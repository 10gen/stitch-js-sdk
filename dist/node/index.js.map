{"mappings":"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","sources":["src/index.js","src/client.js","src/auth/index.js","src/auth/storage.js","src/auth/common.js","src/auth/providers.js","src/common.js","src/errors.js","src/util.js","src/services/index.js","src/services/aws/s3_service.js","src/services/aws/ses_service.js","src/services/http/http_service.js","src/services/mongodb/mongodb_service.js","src/services/mongodb/db.js","src/services/mongodb/collection.js","src/services/twilio/twilio_service.js","src/constants.js","src/admin.js"],"sourcesContent":["import { StitchClientFactory } from './client';\nimport { StitchAdminClientFactory } from './admin';\nimport BSON from 'bson';\n\nexport {\n  StitchClientFactory,\n  StitchAdminClientFactory,\n  BSON\n};\n","/* global window, fetch */\n/* eslint no-labels: ['error', { 'allowLoop': true }] */\nimport { AuthFactory } from './auth';\nimport { PROVIDER_TYPE_ANON } from './auth/providers';\nimport { APP_CLIENT_CODEC } from './auth/common';\nimport ServiceRegistry from './services';\nimport * as common from './common';\nimport { EJSON } from 'bson';\nimport queryString from 'query-string';\nimport { StitchError, ErrInvalidSession, ErrUnauthorized } from './errors';\nimport { v1, v2, v3, API_TYPE_PUBLIC, API_TYPE_PRIVATE, API_TYPE_CLIENT, API_TYPE_APP } from './constants';\n\nexport const fetcher = () => (typeof fetch === 'undefined' ? require('node-fetch') : fetch);\n\n/**\n * StitchClientFactory is a singleton factory class which can be used to\n * asynchronously create instances of {@link StitchClient}. StitchClientFactory\n * is not meant to be instantiated. Use the static `create()` method to build\n * a new StitchClient.\n */\nexport class StitchClientFactory {\n  /**\n   * @hideconstructor\n   */\n  constructor() {\n    throw new StitchError(\n      'StitchClient can only be made from the StitchClientFactory.create function',\n    );\n  }\n\n  /**\n   * Creates a new {@link StitchClient}.\n   *\n   * @param {String} clientAppID the app ID of the Stitch application, which can be found in\n   * the \"Clients\" page of the Stitch admin console.\n   * @param {Object} [options = {}] additional options for creating the {@link StitchClient}.\n   */\n  static create(clientAppID, options = {}) {\n    return newStitchClient(StitchClient.prototype, clientAppID, options);\n  }\n}\n\nexport function newStitchClient(prototype, clientAppID, options = {}) {\n  let stitchClient = Object.create(prototype);\n  let baseUrl = common.DEFAULT_STITCH_SERVER_URL;\n  if (options.baseUrl) {\n    baseUrl = options.baseUrl;\n  }\n\n  stitchClient.clientAppID = clientAppID;\n\n  stitchClient.authUrl = clientAppID\n    ? `${baseUrl}/api/client/v2.0/app/${clientAppID}/auth`\n    : `${baseUrl}/api/admin/v3.0/auth`;\n\n  stitchClient.rootURLsByAPIVersion = {\n    [v1]: {\n      [API_TYPE_PUBLIC]: `${baseUrl}/api/public/v1.0`,\n      [API_TYPE_CLIENT]: `${baseUrl}/api/client/v1.0`,\n      [API_TYPE_PRIVATE]: `${baseUrl}/api/private/v1.0`,\n      [API_TYPE_APP]: clientAppID\n        ? `${baseUrl}/api/client/v1.0/app/${clientAppID}`\n        : `${baseUrl}/api/public/v1.0`\n    },\n    [v2]: {\n      [API_TYPE_PUBLIC]: `${baseUrl}/api/public/v2.0`,\n      [API_TYPE_CLIENT]: `${baseUrl}/api/client/v2.0`,\n      [API_TYPE_PRIVATE]: `${baseUrl}/api/private/v2.0`,\n      [API_TYPE_APP]: clientAppID\n        ? `${baseUrl}/api/client/v2.0/app/${clientAppID}`\n        : `${baseUrl}/api/public/v2.0`\n    },\n    [v3]: {\n      [API_TYPE_PUBLIC]: `${baseUrl}/api/public/v3.0`,\n      [API_TYPE_CLIENT]: `${baseUrl}/api/client/v3.0`,\n      [API_TYPE_APP]: clientAppID\n        ? `${baseUrl}/api/client/v3.0/app/${clientAppID}`\n        : `${baseUrl}/api/admin/v3.0`\n    }\n  };\n\n  const authOptions = {\n    codec: APP_CLIENT_CODEC,\n    storage: options.storage\n  };\n\n  if (options.storageType) {\n    authOptions.storageType = options.storageType;\n  }\n  if (options.platform) {\n    authOptions.platform = options.platform;\n  }\n  if (options.authCodec) {\n    authOptions.codec = options.authCodec;\n  }\n  if (options.requestOrigin) {\n    authOptions.requestOrigin = options.requestOrigin;\n  }\n\n  const authPromise = AuthFactory.create(\n    stitchClient,\n    stitchClient.authUrl,\n    authOptions,\n  );\n  return authPromise\n    .then(auth => {\n      stitchClient.auth = auth;\n      return Promise.all([\n        stitchClient.auth.handleRedirect(),\n        stitchClient.auth.handleCookie()\n      ]);\n    })\n    .then(() => stitchClient);\n}\n/**\n * StitchClient is the fundamental way of communicating with MongoDB Stitch in your\n * application. Use StitchClient to authenticate users and to access Stitch services.\n * StitchClient is not meant to be instantiated directly. Use a\n * {@link StitchClientFactory} to create one.\n */\nexport class StitchClient {\n  /**\n   * @hideconstructor\n   */\n  constructor() {\n    let classname = this.constructor.name;\n    throw new StitchError(\n      `${classname} can only be made from the ${classname}Factory.create function`,\n    );\n  }\n\n  get type() {\n    return common.APP_CLIENT_TYPE;\n  }\n\n  /**\n   * Login to Stitch instance, optionally providing a username and password. In\n   * the event that these are omitted, anonymous authentication is used.\n   *\n   * @param {String} [email] the email address used for login\n   * @param {String} [password] the password for the provided email address\n   * @param {Object} [options = {}] additional authentication options\n   * @returns {Promise} which resolve to a String value: the authenticated user ID.\n   */\n  login(email, password, options = {}) {\n    if (email === undefined || password === undefined) {\n      return this.authenticate(PROVIDER_TYPE_ANON, options);\n    }\n\n    return this.authenticate(\n      'userpass',\n      Object.assign({ username: email, password }, options),\n    );\n  }\n\n  /**\n   * Send a request to the server indicating the provided email would like\n   * to sign up for an account. This will trigger a confirmation email containing\n   * a token which must be used with the `emailConfirm` method of the `userpass`\n   * auth provider in order to complete registration. The user will not be able\n   * to log in until that flow has been completed.\n   *\n   * @param {String} email the email used to sign up for the app\n   * @param {String} password the password used to sign up for the app\n   * @param {Object} [options = {}] additional authentication options\n   * @returns {Promise}\n   */\n  register(email, password, options = {}) {\n    return this.auth.provider('userpass').register(email, password, options);\n  }\n\n  /**\n   * Links the currently logged in user with another identity.\n   *\n   * @param {String} providerType the provider of the other identity (e.g. 'userpass', 'facebook', 'google')\n   * @param {Object} [options = {}] additional authentication options\n   * @returns {Promise} which resolves to a String value: the original user ID\n   */\n  linkWithProvider(providerType, options = {}) {\n    if (!this.isAuthenticated()) {\n      throw new StitchError('Must be authenticated to link an account');\n    }\n\n    return this.auth\n      .provider(providerType)\n      .authenticate(options, true)\n      .then(() => this.authedId());\n  }\n\n  /**\n   * Submits an authentication request to the specified provider providing any\n   * included options (read: user data).  If auth data already exists and the\n   * existing auth data has an access token, then these credentials are returned.\n   *\n   * @param {String} providerType the provider used for authentication (The possible\n   *                 options are 'anon', 'userpass', 'custom', 'facebook', 'google',\n   *                 and 'apiKey')\n   * @param {Object} [options = {}] additional authentication options\n   * @returns {Promise} which resolves to a String value: the authenticated user ID\n   */\n  authenticate(providerType, options = {}) {\n    // reuse existing auth if present\n    const authenticateFn = () =>\n      this.auth\n        .provider(providerType)\n        .authenticate(options)\n        .then(() => this.authedId());\n\n    if (this.isAuthenticated()) {\n      if (\n        providerType === PROVIDER_TYPE_ANON &&\n        this.auth.getLoggedInProviderType() === PROVIDER_TYPE_ANON\n      ) {\n        return Promise.resolve(this.auth.authedId); // is authenticated, skip log in\n      }\n\n      return this.logout().then(() => authenticateFn()); // will not be authenticated, continue log in\n    }\n\n    // is not authenticated, continue log in\n    return authenticateFn();\n  }\n\n  /**\n   * Ends the session for the current user, and clears auth information from storage.\n   *\n   * @returns {Promise}\n   */\n  logout() {\n    return this._do('/auth/session', 'DELETE', {\n      refreshOnFailure: false,\n      useRefreshToken: true,\n      rootURL: this.rootURLsByAPIVersion[v2][API_TYPE_CLIENT]\n    }).then(() => this.auth.clear(), () => this.auth.clear());\n  }\n\n  /**\n   * @returns {*} Returns any error from the Stitch authentication system.\n   */\n  authError() {\n    return this.auth.error();\n  }\n\n  /**\n   * Returns profile information for the currently logged in user.\n   *\n   * @returns {Promise} which resolves to a a JSON object containing user profile information.\n   */\n  userProfile() {\n    return this._do('/auth/profile', 'GET', {\n      rootURL: this.rootURLsByAPIVersion[v2][API_TYPE_CLIENT]\n    }).then(response => response.json());\n  }\n\n  /**\n   * @returns {Boolean} whether or not the current client is authenticated.\n   */\n  isAuthenticated() {\n    return !!this.authedId();\n  }\n\n  /**\n   *  @returns {String} a string of the currently authenticated user's ID.\n   */\n  authedId() {\n    return this.auth.authedId;\n  }\n\n  /**\n   * Factory method for accessing Stitch services.\n   *\n   * @method\n   * @param {String} type the service type (e.g. \"mongodb\", \"aws-s3\", \"aws-ses\", \"twilio\", \"http\", etc.)\n   * @param {String} name the service name specified in the Stitch admin console.\n   * @returns {Object} returns an instance of the specified service type.\n   */\n  service(type, name) {\n    if (this.constructor !== StitchClient) {\n      throw new StitchError('`service` is a factory method, do not use `new`');\n    }\n\n    if (!ServiceRegistry.hasOwnProperty(type)) {\n      throw new StitchError('Invalid service type specified: ' + type);\n    }\n\n    const ServiceType = ServiceRegistry[type];\n    return new ServiceType(this, name);\n  }\n\n  /**\n   * Executes a function.\n   *\n   * @param {String} name The name of the function.\n   * @param {...*} args Arguments to pass to the function.\n   */\n  executeFunction(name, ...args) {\n    return this._doFunctionCall({\n      name,\n      arguments: args\n    });\n  }\n\n  /**\n   * Executes a service function.\n   *\n   * @param {String} service The name of the service.\n   * @param {String} action The name of the service action.\n   * @param {...*} args Arguments to pass to the service action.\n   */\n  executeServiceFunction(service, action, ...args) {\n    return this._doFunctionCall({\n      service,\n      name: action,\n      arguments: args\n    });\n  }\n\n  _doFunctionCall(request) {\n    let responseDecoder = d => EJSON.parse(d, { relaxed: true });\n    let responseEncoder = d => EJSON.stringify(d, { strict: true });\n\n    return this._do('/functions/call', 'POST', { body: responseEncoder(request) })\n      .then(response => response.text())\n      .then(body => responseDecoder(body));\n  }\n\n  /**\n   * Returns an access token for the user\n   *\n   * @private\n   * @returns {Promise}\n   */\n  doSessionPost() {\n    return this._do('/auth/session', 'POST', {\n      refreshOnFailure: false,\n      useRefreshToken: true,\n      rootURL: this.rootURLsByAPIVersion[v2][API_TYPE_CLIENT]\n    }).then(response => response.json());\n  }\n\n  /**\n   * Returns the user API keys associated with the current user.\n   *\n   * @returns {Promise} which resolves to an array of API key objects\n   */\n  getApiKeys() {\n    return this._do('/auth/api_keys', 'GET', {\n      rootURL: this.rootURLsByAPIVersion[v2][API_TYPE_CLIENT],\n      useRefreshToken: true\n    }).then(response => response.json());\n  }\n\n  /**\n   * Creates a user API key that can be used to authenticate as the current user.\n   *\n   * @param {String} userApiKeyName a unique name for the user API key\n   * @returns {Promise} which resolves to an API key object containing the API key value\n   */\n  createApiKey(userApiKeyName) {\n    return this._do('/auth/api_keys', 'POST', {\n      rootURL: this.rootURLsByAPIVersion[v2][API_TYPE_CLIENT],\n      useRefreshToken: true,\n      body: JSON.stringify({ name: userApiKeyName })\n    }).then(response => response.json());\n  }\n\n  /**\n   * Returns a user API key associated with the current user.\n   *\n   * @param {String} keyID the ID of the key to fetch\n   * @returns {Promise} which resolves to an API key object, although the API key value will be omitted\n   */\n  getApiKeyByID(keyID) {\n    return this._do(`/auth/api_keys/${keyID}`, 'GET', {\n      rootURL: this.rootURLsByAPIVersion[v2][API_TYPE_CLIENT],\n      useRefreshToken: true\n    }).then(response => response.json());\n  }\n\n  /**\n   * Deletes a user API key associated with the current user.\n   *\n   * @param {String} keyID the ID of the key to delete\n   * @returns {Promise}\n   */\n  deleteApiKeyByID(keyID) {\n    return this._do(`/auth/api_keys/${keyID}`, 'DELETE', {\n      rootURL: this.rootURLsByAPIVersion[v2][API_TYPE_CLIENT],\n      useRefreshToken: true\n    });\n  }\n\n  /**\n   * Enables a user API key associated with the current user.\n   *\n   * @param {String} keyID the ID of the key to enable\n   * @returns {Promise}\n   */\n  enableApiKeyByID(keyID) {\n    return this._do(`/auth/api_keys/${keyID}/enable`, 'PUT', {\n      rootURL: this.rootURLsByAPIVersion[v2][API_TYPE_CLIENT],\n      useRefreshToken: true\n    });\n  }\n\n  /**\n   * Disables a user API key associated with the current user.\n   *\n   * @param {String} keyID the ID of the key to disable\n   * @returns {Promise}\n   */\n  disableApiKeyByID(keyID) {\n    return this._do(`/auth/api_keys/${keyID}/disable`, 'PUT', {\n      rootURL: this.rootURLsByAPIVersion[v2][API_TYPE_CLIENT],\n      useRefreshToken: true\n    });\n  }\n\n  _fetch(url, fetchArgs, resource, method, options) {\n    const doFetch = fetcher();\n    return doFetch(url, fetchArgs).then(response => {\n      // Okay: passthrough\n      if (response.status >= 200 && response.status < 300) {\n        return Promise.resolve(response);\n      }\n\n      if (response.headers.get('Content-Type') === common.JSONTYPE) {\n        return response.json().then(json => {\n          // Only want to try refreshing token when there's an invalid session\n          if ('error_code' in json && json.error_code === ErrInvalidSession) {\n            if (!options.refreshOnFailure) {\n              return this.auth.clear().then(() => {\n                const error = new StitchError(json.error, json.error_code);\n                error.response = response;\n                error.json = json;\n                throw error;\n              });\n            }\n\n            return this.auth.refreshToken().then(() => {\n              options.refreshOnFailure = false;\n              return this._do(resource, method, options);\n            });\n          }\n\n          const error = new StitchError(json.error, json.error_code);\n          error.response = response;\n          error.json = json;\n          return Promise.reject(error);\n        });\n      }\n\n      const error = new Error(response.statusText);\n      error.response = response;\n      return Promise.reject(error);\n    });\n  }\n\n  _fetchArgs(resource, method, options) {\n    const appURL = this.rootURLsByAPIVersion[options.apiVersion][\n      options.apiType\n    ];\n    let url = `${appURL}${resource}`;\n    if (options.rootURL) {\n      url = `${options.rootURL}${resource}`;\n    }\n    let fetchArgs = common.makeFetchArgs(method, options.body, options);\n\n    if (!!options.headers) {\n      Object.assign(fetchArgs.headers, options.headers);\n    }\n\n    if (options.queryParams) {\n      url = `${url}?${queryString.stringify(options.queryParams)}`;\n    }\n\n    if (options.multipart) {\n      // fall-back on browser to generate Content-Type for us based on request body (FormData)\n      delete fetchArgs.headers['Content-Type'];\n    }\n\n    return { url, fetchArgs };\n  }\n\n  _do(resource, method, options) {\n    options = Object.assign(\n      {},\n      {\n        refreshOnFailure: true,\n        useRefreshToken: false,\n        apiVersion: v2,\n        apiType: API_TYPE_APP,\n        rootURL: undefined\n      },\n      options,\n    );\n\n    let { url, fetchArgs } = this._fetchArgs(resource, method, options);\n    if (options.noAuth) {\n      return this._fetch(url, fetchArgs, resource, method, options);\n    }\n\n    if (!this.isAuthenticated()) {\n      return Promise.reject(\n        new StitchError('Must auth first', ErrUnauthorized),\n      );\n    }\n\n    if (this.auth.requestOrigin) {\n      fetchArgs.headers['X-BAAS-Request-Origin'] = this.auth.requestOrigin;\n    }\n\n    const token = options.useRefreshToken\n      ? this.auth.getRefreshToken()\n      : this.auth.getAccessToken();\n\n    fetchArgs.headers.Authorization = `Bearer ${token}`;\n    return this._fetch(url, fetchArgs, resource, method, options);\n  }\n}\n","/* global window, document, fetch */\n\nimport { createStorage } from './storage';\nimport { createProviders, PROVIDER_TYPE_MONGODB_CLOUD } from './providers';\nimport { StitchError } from '../errors';\nimport * as authCommon from './common';\nimport * as common from '../common';\nimport * as _platform from 'detect-browser';\n\nconst jwtDecode = require('jwt-decode');\n\nconst EMBEDDED_USER_AUTH_DATA_PARTS = 4;\n\n/** @private */\nexport class AuthFactory {\n  constructor() {\n    throw new StitchError('Auth can only be made from the AuthFactory.create function');\n  }\n\n  static create(client, rootUrl, options) {\n    return newAuth(client, rootUrl, options);\n  }\n}\n\n/** @private */\nexport function newAuth(client, rootUrl, options) {\n  let auth = Object.create(Auth.prototype);\n  let namespace;\n  if (!client || client.clientAppID === '') {\n    namespace = 'admin';\n  } else {\n    namespace = `client.${client.clientAppID}`;\n  }\n\n  options = Object.assign({\n    codec: authCommon.APP_CLIENT_CODEC,\n    namespace: namespace,\n    storageType: 'localStorage'\n  }, options);\n\n  auth.client = client;\n  auth.rootUrl = rootUrl;\n  auth.codec = options.codec;\n  auth.requestOrigin = options.requestOrigin;\n  auth.platform = options.platform || _platform;\n  auth.storage = createStorage(options);\n  auth.providers = createProviders(auth, options);\n\n  return Promise.all([\n    auth._get(),\n    auth.storage.get(authCommon.REFRESH_TOKEN_KEY),\n    auth.storage.get(authCommon.USER_LOGGED_IN_PT_KEY),\n    auth.storage.get(authCommon.DEVICE_ID_KEY)\n  ]).then(([authObj, rt, loggedInProviderType, deviceId]) => {\n    auth.auth = authObj;\n    auth.authedId = authObj.userId;\n    auth.rt = rt;\n    auth.loggedInProviderType = loggedInProviderType;\n    auth.deviceId = deviceId;\n\n    return auth;\n  });\n}\n\n/** @private */\nexport class Auth {\n  constructor(client, rootUrl, options) {\n    throw new StitchError('Auth can only be made from the AuthFactory.create function');\n  }\n\n  /**\n   * Create the device info for this client.\n   *\n   * @private\n   * @memberof module:auth\n   * @method getDeviceInfo\n   * @param {String} appId The app ID for this client\n   * @param {String} appVersion The version of the app\n   * @returns {Object} The device info object\n   */\n  getDeviceInfo(deviceId, appId, appVersion = '') {\n    const deviceInfo = { appId, appVersion, sdkVersion: common.SDK_VERSION };\n\n    if (deviceId) {\n      deviceInfo.deviceId = deviceId;\n    }\n\n    if (this.platform) {\n      deviceInfo.platform = this.platform.name;\n      deviceInfo.platformVersion = this.platform.version;\n    }\n\n    return deviceInfo;\n  }\n\n  provider(name) {\n    if (!this.providers.hasOwnProperty(name)) {\n      throw new Error('Invalid auth provider specified: ' + name);\n    }\n\n    return this.providers[name];\n  }\n\n  refreshToken() {\n    return this.client.doSessionPost()\n      .then((json) => this.set(json));\n  }\n\n  pageRootUrl() {\n    return [window.location.protocol, '//', window.location.host, window.location.pathname].join('');\n  }\n\n  error() {\n    return this._error;\n  }\n\n  isAppClient() {\n    if (!this.client) {\n      return true; // Handle the case where Auth is constructed with null\n    }\n    return this.client.type === common.APP_CLIENT_TYPE;\n  }\n\n  handleRedirect() {\n    if (typeof (window) === 'undefined') {\n      // This means we're running in some environment other\n      // than a browser - so handling a redirect makes no sense here.\n      return;\n    }\n    if (!window.location || !window.location.hash) {\n      return;\n    }\n\n    return Promise.all([\n      this.storage.get(authCommon.STATE_KEY),\n      this.storage.get(authCommon.STITCH_REDIRECT_PROVIDER)\n    ]).then(([ourState, redirectProvider]) => {\n      let redirectFragment = window.location.hash.substring(1);\n      const redirectState = this.parseRedirectFragment(redirectFragment, ourState);\n      if (redirectState.lastError || (redirectState.found && !redirectProvider)) {\n        console.error(`StitchClient: error from redirect: ${redirectState.lastError ?\n          redirectState.lastError : 'provider type not set'}`);\n        this._error = redirectState.lastError;\n        window.history.replaceState(null, '', this.pageRootUrl());\n        return Promise.reject();\n      }\n\n      if (!redirectState.found) {\n        return Promise.reject();\n      }\n\n      return Promise.all(\n        [\n          this.storage.remove(authCommon.STATE_KEY),\n          this.storage.remove(authCommon.STITCH_REDIRECT_PROVIDER)\n        ]\n      ).then(() => ({redirectState, redirectProvider}));\n    }).then(({redirectState, redirectProvider}) => {\n      if (!redirectState.stateValid) {\n        console.error('StitchClient: state values did not match!');\n        window.history.replaceState(null, '', this.pageRootUrl());\n        return;\n      }\n\n      if (!redirectState.ua) {\n        console.error('StitchClient: no UA value was returned from redirect!');\n        return;\n      }\n\n      // If we get here, the state is valid - set auth appropriately.\n      return this.set(redirectState.ua, redirectProvider);\n    }).then(() => window.history.replaceState(null, '', this.pageRootUrl()))\n      .catch(error => {\n        if (error) {\n          throw error;\n        }\n      });\n  }\n\n  getCookie(name) {\n    let splitCookies = document.cookie.split(' ');\n    for (let i = 0; i < splitCookies.length; i++) {\n      let cookie = splitCookies[i];\n      let sepIdx = cookie.indexOf('=');\n      let cookieName = cookie.substring(0, sepIdx);\n      if (cookieName === name) {\n        let cookieVal = cookie.substring(sepIdx + 1, cookie.length);\n        if (cookieVal[cookieVal.length - 1] === ';') {\n          return cookieVal.substring(0, cookieVal.length - 1);\n        }\n        return cookieVal;\n      }\n    }\n  }\n\n  handleCookie() {\n    if (typeof (window) === 'undefined' || typeof (document) === 'undefined') {\n      // This means we're running in some environment other\n      // than a browser - so handling a cookie makes no sense here.\n      return;\n    }\n    if (!document.cookie) {\n      return;\n    }\n\n    let uaCookie = this.getCookie(authCommon.USER_AUTH_COOKIE_NAME);\n    if (!uaCookie) {\n      return;\n    }\n\n    document.cookie = `${authCommon.USER_AUTH_COOKIE_NAME}=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT;`;\n    const userAuth = this.unmarshallUserAuth(uaCookie);\n    return this.set(userAuth, PROVIDER_TYPE_MONGODB_CLOUD).then(() =>\n      window.history.replaceState(null, '', this.pageRootUrl())\n    );\n  }\n\n  clear() {\n    this.auth = null;\n    this.authedId = null;\n    this.rt = null;\n    this.loggedInProviderType = null;\n\n    return Promise.all(\n      [\n        this.storage.remove(authCommon.USER_AUTH_KEY),\n        this.storage.remove(authCommon.REFRESH_TOKEN_KEY),\n        this.storage.remove(authCommon.USER_LOGGED_IN_PT_KEY),\n        this.storage.remove(authCommon.STITCH_REDIRECT_PROVIDER)\n      ]\n    );\n  }\n\n  getDeviceId() {\n    return this.deviceId;\n  }\n\n  // Returns whether or not the access token is expired or is going to expire within 'withinSeconds'\n  // seconds, according to current system time. Returns false if the token is malformed in any way.\n  isAccessTokenExpired(withinSeconds = authCommon.DEFAULT_ACCESS_TOKEN_EXPIRE_WITHIN_SECS) {\n    const token = this.getAccessToken();\n    if (!token) {\n      return false;\n    }\n\n    let decodedToken;\n    try {\n      decodedToken = jwtDecode(token);\n    } catch (e) {\n      return false;\n    }\n\n    if (!decodedToken) {\n      return false;\n    }\n\n    return decodedToken.exp && Math.floor(Date.now() / 1000) >= decodedToken.exp - withinSeconds;\n  }\n\n  getAccessToken() {\n    return this.auth.accessToken;\n  }\n\n  getRefreshToken() {\n    return this.rt;\n  }\n\n  set(json, authType = '') {\n    if (!json) {\n      return;\n    }\n\n    let newUserAuth = {};\n    let setters = [];\n\n    if (authType) {\n      this.loggedInProviderType = authType;\n      setters.push(this.storage.set(authCommon.USER_LOGGED_IN_PT_KEY, authType));\n    }\n\n    if (json[this.codec.refreshToken]) {\n      this.rt = json[this.codec.refreshToken];\n      delete json[this.codec.refreshToken];\n      setters.push(this.storage.set(authCommon.REFRESH_TOKEN_KEY, this.rt));\n    }\n\n    if (json[this.codec.deviceId]) {\n      this.deviceId = json[this.codec.deviceId];\n      delete json[this.codec.deviceId];\n      setters.push(this.storage.set(authCommon.DEVICE_ID_KEY, this.deviceId));\n    }\n\n    // Merge in new fields with old fields. Typically the first json value\n    // is complete with every field inside a user auth, but subsequent requests\n    // do not include everything. This merging behavior is safe so long as json\n    // value responses with absent fields do not indicate that the field should\n    // be unset.\n    if (json[this.codec.accessToken]) {\n      newUserAuth.accessToken = json[this.codec.accessToken];\n    }\n    if (json[this.codec.userId]) {\n      newUserAuth.userId = json[this.codec.userId];\n    }\n\n    this.auth = Object.assign(this.auth ? this.auth : {}, newUserAuth);\n    this.authedId = this.auth.userId;\n    setters.push(this.storage.set(authCommon.USER_AUTH_KEY, JSON.stringify(this.auth)));\n    return Promise.all(setters).then(() => this.auth);\n  }\n\n  _get() {\n    return this.storage.get(authCommon.USER_AUTH_KEY).then((data) => {\n      if (!data) {\n        return {};\n      }\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        // Need to back out and clear auth otherwise we will never\n        // be able to do anything useful.\n        return this.clear().then(() => {\n          throw new StitchError('Failure retrieving stored auth');\n        });\n      }\n    });\n  }\n\n  getLoggedInProviderType() {\n    return this.loggedInProviderType;\n  }\n\n  parseRedirectFragment(fragment, ourState) {\n    // After being redirected from oauth, the URL will look like:\n    // https://todo.examples.stitch.mongodb.com/#_baas_state=...&_baas_ua=...\n    // This function parses out stitch-specific tokens from the fragment and\n    // builds an object describing the result.\n    const vars = fragment.split('&');\n    const result = { ua: null, found: false, stateValid: false, lastError: null };\n    let shouldBreak = false;\n    for (let i = 0; i < vars.length && !shouldBreak; ++i) {\n      const pairParts = vars[i].split('=');\n      const pairKey = decodeURIComponent(pairParts[0]);\n      switch (pairKey) {\n      case authCommon.STITCH_ERROR_KEY:\n        result.lastError = decodeURIComponent(pairParts[1]);\n        result.found = true;\n        shouldBreak = true;\n        break;\n      case authCommon.USER_AUTH_KEY:\n        try {\n          result.ua = this.unmarshallUserAuth(decodeURIComponent(pairParts[1]));\n          result.found = true;\n        } catch (e) {\n          result.lastError = e;\n        }\n        continue;\n      case authCommon.STITCH_LINK_KEY:\n        result.found = true;\n        continue;\n      case authCommon.STATE_KEY:\n        result.found = true;\n        let theirState = decodeURIComponent(pairParts[1]);\n        if (ourState && ourState === theirState) {\n          result.stateValid = true;\n        }\n        continue;\n      default: continue;\n      }\n    }\n\n    return result;\n  }\n\n  unmarshallUserAuth(data) {\n    let parts = data.split('$');\n    if (parts.length !== EMBEDDED_USER_AUTH_DATA_PARTS) {\n      throw new RangeError('invalid user auth data provided: ' + data);\n    }\n\n    return {\n      [this.codec.accessToken]: parts[0],\n      [this.codec.refreshToken]: parts[1],\n      [this.codec.userId]: parts[2],\n      [this.codec.deviceId]: parts[3]\n    };\n  }\n\n  fetchArgsWithLink(fetchArgs, link) {\n    if (link) {\n      fetchArgs.headers.Authorization = `Bearer ${this.getAccessToken()}`;\n    }\n\n    return fetchArgs;\n  }\n}\n","import { USER_AUTH_KEY, REFRESH_TOKEN_KEY, DEVICE_ID_KEY, STATE_KEY } from './common';\n\nexport class MemoryStorage {\n  constructor() {\n    this._data = {};\n    this._orderedKeys = [];\n    this.length = 0;\n  }\n\n  getItem(key) {\n    return (key in this._data) ? this._data[key] : null;\n  }\n\n  setItem(key, value) {\n    this._orderedKeys.push(key);\n    this._data[key] = value;\n    this.length++;\n    return this._data[key];\n  }\n\n  removeItem(key) {\n    this._orderedKeys.pop(key);\n    delete this._data[key];\n    this.length--;\n    return undefined;\n  }\n\n  key(index) {\n    return this._orderedKeys[index];\n  }\n}\n\nconst _VERSION = 1;\nconst _VERSION_KEY = '__baas_storage_version__';\n\n/**\n  * Run a migration on the currently used storage\n  * that checks to see if the current version is up to date.\n  * If the version has not been set, this method will migrate\n  * to the latest version.\n  *\n  * @private\n  * @param {Integer} version version number of storage\n  * @param {Object} storage storage class being checked\n  * @returns {Promise} nullable promise containing migration logic\n  */\nfunction _runMigration(version, storage) {\n  switch (version) {\n  case null:\n  case undefined:\n    // return a promise,\n    // mapping each of the store's keys to a Promise\n    // that fetches the each value for each key,\n    // sets the old value to the new \"namespaced\" key\n    // remove the old key value pair,\n    // and set the version number\n    let migrations = [\n      USER_AUTH_KEY,\n      REFRESH_TOKEN_KEY,\n      DEVICE_ID_KEY,\n      STATE_KEY\n    ].map(key =>\n      Promise.resolve(storage.store.getItem(key))\n        .then(item => !!item && storage.store.setItem(storage._generateKey(key), item))\n        .then(() => storage.store.removeItem(key))\n    );\n    return Promise.all(migrations)\n      .then(() => storage.store.setItem(_VERSION_KEY, _VERSION));\n  // in future versions, `case 1:`, `case 2:` and so on\n  // could be added to perform similar migrations\n  default: break;\n  }\n}\n\n/** @private */\nclass Storage {\n  /**\n   * @param {Storage} store implementer of Storage interface\n   * @param {String} namespace clientAppID to be used for namespacing\n   * @param\n  */\n  constructor(store, namespace) {\n    this.store = store;\n    this.namespace = `_baas.${namespace}`;\n\n    this._migration = Promise.resolve(this.store.getItem(_VERSION_KEY))\n      .then(version => _runMigration(version, this));\n  }\n\n  _generateKey(key) {\n    return `${this.namespace}.${key}`;\n  }\n\n  get(key) {\n    return Promise.resolve(this._migration)\n      .then(() => this.store.getItem(this._generateKey(key)));\n  }\n\n  set(key, value) {\n    return Promise.resolve(this._migration)\n      .then(() => this.store.setItem(this._generateKey(key), value))\n      .then(() => value);\n  }\n\n  remove(key) {\n    return Promise.resolve(this._migration)\n      .then(() => this.store.removeItem(this._generateKey(key)));\n  }\n}\n\nexport function createStorage(options) {\n  let { storageType, storage, namespace } = options;\n\n  if (storageType === 'localStorage') {\n    if ((typeof window !== 'undefined') && 'localStorage' in window && window.localStorage !== null) {\n      return new Storage(window.localStorage, namespace);\n    }\n  } else if (storageType === 'sessionStorage') {\n    if ((typeof window !== 'undefined') && 'sessionStorage' in window && window.sessionStorage !== null) {\n      return new Storage(window.sessionStorage, namespace);\n    }\n  } else if (storageType == 'customStorage') { //eslint-disable-line eqeqeq\n    return new Storage(storage, namespace);\n  }\n\n  // default to memory storage\n  return new Storage(new MemoryStorage(), namespace);\n}\n","export const USER_AUTH_KEY = '_baas_ua';\nexport const REFRESH_TOKEN_KEY = '_baas_rt';\nexport const DEVICE_ID_KEY = '_baas_did';\nexport const STATE_KEY = '_baas_state';\nexport const USER_AUTH_COOKIE_NAME = 'baas_ua';\nexport const STITCH_ERROR_KEY = '_baas_error';\nexport const STITCH_LINK_KEY = '_baas_link';\nexport const USER_LOGGED_IN_PT_KEY = '_baas_pt';\nexport const STITCH_REDIRECT_PROVIDER = '_baas_rp';\n\nexport const DEFAULT_ACCESS_TOKEN_EXPIRE_WITHIN_SECS = 10;\n\nexport const APP_CLIENT_CODEC = {\n  'accessToken': 'access_token',\n  'refreshToken': 'refresh_token',\n  'deviceId': 'device_id',\n  'userId': 'user_id'\n};\n\nexport const ADMIN_CLIENT_CODEC = {\n  'accessToken': 'access_token',\n  'refreshToken': 'refresh_token',\n  'deviceId': 'device_id',\n  'userId': 'user_id'\n};\n","/**\n * @private\n * @module auth\n */\nimport * as common from '../common';\nimport * as authCommon from './common';\nimport { uriEncodeObject } from '../util';\n\nexport const PROVIDER_TYPE_ANON = 'anon';\nexport const PROVIDER_TYPE_CUSTOM = 'custom';\nexport const PROVIDER_TYPE_USERPASS = 'userpass';\nexport const PROVIDER_TYPE_APIKEY = 'apiKey';\nexport const PROVIDER_TYPE_GOOGLE = 'google';\nexport const PROVIDER_TYPE_FACEBOOK = 'facebook';\nexport const PROVIDER_TYPE_MONGODB_CLOUD = 'mongodbCloud';\n\nexport const fetcher = () => (typeof fetch === 'undefined' ? require('node-fetch') : fetch);\n\nfunction urlWithLinkParam(url, link) {\n  if (link) {\n    return url + '?link=true';\n  }\n\n  return url;\n}\n\n/**\n * @private\n * @namespace\n */\nfunction anonProvider(auth) {\n  return {\n    /**\n     * Login to a stitch application using anonymous authentication\n     *\n     * @memberof anonProvider\n     * @instance\n     * @returns {Promise} a promise that resolves when authentication succeeds.\n     */\n    authenticate: (options, link) => {\n      const deviceId = auth.getDeviceId();\n      const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);\n      const fetchArgs = common.makeFetchArgs('GET');\n      fetchArgs.cors = true;\n\n      const doFetch = fetcher();\n\n      return doFetch(\n        urlWithLinkParam(`${auth.rootUrl}/providers/anon-user/login?device=${uriEncodeObject(device)}`, link),\n        auth.fetchArgsWithLink(fetchArgs, link)\n      )\n        .then(common.checkStatus)\n        .then(response => response.json())\n        .then(json => auth.set(json, PROVIDER_TYPE_ANON));\n    }\n  };\n}\n\n/**\n * @private\n * @namespace\n */\nfunction customProvider(auth) {\n  const providerRoute = 'providers/custom-token';\n  const loginRoute = `${providerRoute}/login`;\n\n  return {\n    /**\n     * Login to a stitch application using custom authentication\n     *\n     * @memberof customProvider\n     * @instance\n     * @param {String} JWT token to use for authentication\n     * @returns {Promise} a promise that resolves when authentication succeeds.\n     */\n    authenticate: (token, link) => {\n      const deviceId = auth.getDeviceId();\n      const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);\n\n      const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ token, options: { device } }));\n      fetchArgs.cors = true;\n\n      const doFetch = fetcher();\n      return doFetch(urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link))\n        .then(common.checkStatus)\n        .then(response => response.json())\n        .then(json => auth.set(json, PROVIDER_TYPE_CUSTOM));\n    }\n  };\n}\n\n/**\n * userPassProvider offers several methods for completing certain tasks necessary for email/password\n * authentication. userPassProvider cannot be instantiated directly. To instantiate,\n * use `.auth.providers('userpass')` on a {@link StitchClient}.\n *\n * @namespace\n */\nfunction userPassProvider(auth) {\n  // The ternary expression here is redundant but is just preserving previous behavior based on whether or not\n  // the client is for the admin or client API.\n  const providerRoute = auth.isAppClient() ? 'providers/local-userpass' : 'providers/local-userpass';\n  const loginRoute = auth.isAppClient() ? `${providerRoute}/login` : `${providerRoute}/login`;\n\n  return {\n    /**\n     * Login to a stitch application using username and password authentication\n     *\n     * @private\n     * @memberof userPassProvider\n     * @instance\n     * @param {String} username the username to use for authentication\n     * @param {String} password the password to use for authentication\n     * @returns {Promise} a promise that resolves when authentication succeeds.\n     */\n    authenticate: ({ username, password }, link) => {\n      const deviceId = auth.getDeviceId();\n      const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);\n\n      const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ username, password, options: { device } }));\n      fetchArgs.cors = true;\n\n      const doFetch = fetcher();\n      return doFetch(urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link))\n        .then(common.checkStatus)\n        .then(response => response.json())\n        .then(json => auth.set(json, PROVIDER_TYPE_USERPASS));\n    },\n\n    /**\n     * Completes the email confirmation workflow from the Stitch server\n     *\n     * @memberof userPassProvider\n     * @instance\n     * @param {String} tokenId the tokenId provided by the Stitch server\n     * @param {String} token the token provided by the Stitch server\n     * @returns {Promise}\n     */\n    emailConfirm: (tokenId, token) => {\n      const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ tokenId, token }));\n      fetchArgs.cors = true;\n\n      const doFetch = fetcher();\n      return doFetch(`${auth.rootUrl}/${providerRoute}/confirm`, fetchArgs)\n        .then(common.checkStatus)\n        .then(response => response.json());\n    },\n\n    /**\n     * Request that the stitch server send another email confirmation\n     * for account creation.\n     *\n     * @memberof userPassProvider\n     * @instance\n     * @param {String} email the email address to send a confirmation email for\n     * @returns {Promise}\n     */\n    sendEmailConfirm: email => {\n      const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ email }));\n      fetchArgs.cors = true;\n\n      const doFetch = fetcher();\n      return doFetch(`${auth.rootUrl}/${providerRoute}/confirm/send`, fetchArgs)\n        .then(common.checkStatus)\n        .then(response => response.json());\n    },\n\n    /**\n     * Sends a password reset request to the Stitch server\n     *\n     * @memberof userPassProvider\n     * @instance\n     * @param {String} email the email address of the account to reset the password for\n     * @returns {Promise}\n     */\n    sendPasswordReset: email => {\n      const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ email }));\n      fetchArgs.cors = true;\n\n      const doFetch = fetcher();\n      return doFetch(`${auth.rootUrl}/${providerRoute}/reset/send`, fetchArgs)\n        .then(common.checkStatus)\n        .then(response => response.json());\n    },\n\n    /**\n     * Use information returned from the Stitch server to complete the password\n     * reset flow for a given email account, providing a new password for the account.\n     *\n     * @memberof userPassProvider\n     * @instance\n     * @param {String} tokenId the tokenId provided by the Stitch server\n     * @param {String} token the token provided by the Stitch server\n     * @param {String} password the new password requested for this account\n     * @returns {Promise}\n     */\n    passwordReset: (tokenId, token, password) => {\n      const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ tokenId, token, password }));\n      fetchArgs.cors = true;\n\n      const doFetch = fetcher();\n      return doFetch(`${auth.rootUrl}/${providerRoute}/reset`, fetchArgs)\n        .then(common.checkStatus)\n        .then(response => response.json());\n    },\n\n    /**\n     * Will trigger an email to the requested account containing a link with the\n     * token and tokenId that must be returned to the server using emailConfirm()\n     * to activate the account.\n     *\n     * @memberof userPassProvider\n     * @instance\n     * @param {String} email the requested email for the account\n     * @param {String} password the requested password for the account\n     * @returns {Promise}\n     */\n    register: (email, password) => {\n      const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ email, password }));\n      fetchArgs.cors = true;\n\n      const doFetch = fetcher();\n      return doFetch(`${auth.rootUrl}/${providerRoute}/register`, fetchArgs)\n        .then(common.checkStatus)\n        .then(response => response.json());\n    }\n  };\n}\n\n/**\n * @private\n * @namespace\n */\nfunction apiKeyProvider(auth) {\n  // The ternary expression here is redundant but is just preserving previous behavior based on whether or not\n  // the client is for the admin or client API.\n  const loginRoute = auth.isAppClient() ? 'providers/api-key/login' : 'providers/api-key/login';\n\n  return {\n    /**\n     * Login to a stitch application using an api key\n     *\n     * @memberof apiKeyProvider\n     * @instance\n     * @param {String} key the key for authentication\n     * @returns {Promise} a promise that resolves when authentication succeeds.\n     */\n    authenticate: (key, link) => {\n      const deviceId = auth.getDeviceId();\n      const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);\n      const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ key: key, options: { device } }));\n      fetchArgs.cors = true;\n\n      const doFetch = fetcher();\n      return doFetch(urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link))\n        .then(common.checkStatus)\n        .then(response => response.json())\n        .then(json => auth.set(json, PROVIDER_TYPE_APIKEY));\n    }\n  };\n}\n\n// The state we generate is to be used for any kind of request where we will\n// complete an authentication flow via a redirect. We store the generate in\n// a local storage bound to the app's origin. This ensures that any time we\n// receive a redirect, there must be a state parameter and it must match\n// what we ourselves have generated. This state MUST only be sent to\n// a trusted Stitch endpoint in order to preserve its integrity. Stitch will\n// store it in some way on its origin (currently a cookie stored on this client)\n// and use that state at the end of an auth flow as a parameter in the redirect URI.\nconst alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nfunction generateState() {\n  let state = '';\n  for (let i = 0; i < 64; ++i) {\n    state += alpha.charAt(Math.floor(Math.random() * alpha.length));\n  }\n\n  return state;\n}\n\nfunction getOAuthLoginURL(auth, providerName, redirectUrl) {\n  if (redirectUrl === undefined) {\n    redirectUrl = auth.pageRootUrl();\n  }\n\n  const state = generateState();\n  return auth.storage\n    .set(authCommon.STATE_KEY, state)\n    .then(() => auth.getDeviceId())\n    .then(deviceId => {\n      const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);\n\n      const result = `${auth.rootUrl}/providers/oauth2-${providerName}/login?redirect=${encodeURI(\n        redirectUrl\n      )}&state=${state}&device=${uriEncodeObject(device)}`;\n      return result;\n    });\n}\n\n/**\n * @private\n * @namespace\n */\nfunction googleProvider(auth) {\n  const loginRoute = auth.isAppClient() ? 'providers/oauth2-google/login' : 'providers/oauth2-google/login';\n\n  return {\n    /**\n     * Login to a stitch application using google authentication\n     *\n     * @memberof googleProvider\n     * @instance\n     * @param {Object} data the redirectUrl data to use for authentication\n     * @returns {Promise} a promise that resolves when authentication succeeds.\n     */\n    authenticate: (data, link) => {\n      let { authCode } = data;\n      if (authCode) {\n        const deviceId = auth.getDeviceId();\n        const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);\n\n        const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ authCode, options: { device } }));\n\n        const doFetch = fetcher();\n        return doFetch(urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link))\n          .then(common.checkStatus)\n          .then(response => response.json())\n          .then(json => auth.set(json, PROVIDER_TYPE_GOOGLE));\n      }\n\n      const redirectUrl = data && data.redirectUrl ? data.redirectUrl : undefined;\n      return auth.storage\n        .set(authCommon.STITCH_REDIRECT_PROVIDER, PROVIDER_TYPE_GOOGLE)\n        .then(() => getOAuthLoginURL(auth, PROVIDER_TYPE_GOOGLE, redirectUrl))\n        .then(res => window.location.replace(res));\n    }\n  };\n}\n\n/**\n * @private\n * @namespace\n */\nfunction facebookProvider(auth) {\n  const loginRoute = auth.isAppClient() ? 'providers/oauth2-facebook/login' : 'providers/oauth2-facebook/login';\n\n  return {\n    /**\n     * Login to a stitch application using facebook authentication\n     *\n     * @memberof facebookProvider\n     * @instance\n     * @param {Object} data the redirectUrl data to use for authentication\n     * @returns {Promise} a promise that resolves when authentication succeeds.\n     */\n    authenticate: (data, link) => {\n      let { accessToken } = data;\n\n      if (accessToken) {\n        const deviceId = auth.getDeviceId();\n        const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);\n\n        const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ accessToken, options: { device } }));\n\n        const doFetch = fetcher();\n        return doFetch(urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link))\n          .then(common.checkStatus)\n          .then(response => response.json())\n          .then(json => auth.set(json, PROVIDER_TYPE_FACEBOOK));\n      }\n\n      const redirectUrl = data && data.redirectUrl ? data.redirectUrl : undefined;\n      return auth.storage\n        .set(authCommon.STITCH_REDIRECT_PROVIDER, PROVIDER_TYPE_FACEBOOK)\n        .then(() => getOAuthLoginURL(auth, PROVIDER_TYPE_FACEBOOK, redirectUrl))\n        .then(res => window.location.replace(res));\n    }\n  };\n}\n\n/**\n * @private\n * @namespace\n */\nfunction mongodbCloudProvider(auth) {\n  // The ternary expression here is redundant but is just preserving previous behavior based on whether or not\n  // the client is for the admin or client API.\n  const loginRoute = auth.isAppClient() ? 'providers/mongodb-cloud/login' : 'providers/mongodb-cloud/login';\n\n  return {\n    /**\n     * Login to a stitch application using mongodb cloud authentication\n     *\n     * @memberof mongodbCloudProvider\n     * @instance\n     * @param {Object} data the username, apiKey, cors, and cookie data to use for authentication\n     * @returns {Promise} a promise that resolves when authentication succeeds.\n     */\n    authenticate: (data, link) => {\n      const { username, apiKey, cors, cookie } = data;\n      const options = Object.assign({}, { cors: true, cookie: false }, { cors: cors, cookie: cookie });\n      const deviceId = auth.getDeviceId();\n      const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);\n      const fetchArgs = common.makeFetchArgs('POST', JSON.stringify({ username, apiKey, options: { device } }));\n      fetchArgs.cors = true; // TODO: shouldn't this use the passed in `cors` value?\n      fetchArgs.credentials = 'include';\n\n      const doFetch = fetcher();\n      let url = urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link);\n      if (options.cookie) {\n        return doFetch(url + '?cookie=true', fetchArgs).then(common.checkStatus);\n      }\n\n      return doFetch(url, auth.fetchArgsWithLink(fetchArgs, link))\n        .then(common.checkStatus)\n        .then(response => response.json())\n        .then(json => auth.set(json, PROVIDER_TYPE_MONGODB_CLOUD));\n    }\n  };\n}\n\n// TODO: support auth-specific options\nfunction createProviders(auth, options = {}) {\n  return {\n    [PROVIDER_TYPE_ANON]: anonProvider(auth),\n    [PROVIDER_TYPE_APIKEY]: apiKeyProvider(auth),\n    [PROVIDER_TYPE_GOOGLE]: googleProvider(auth),\n    [PROVIDER_TYPE_FACEBOOK]: facebookProvider(auth),\n    [PROVIDER_TYPE_MONGODB_CLOUD]: mongodbCloudProvider(auth),\n    [PROVIDER_TYPE_USERPASS]: userPassProvider(auth),\n    [PROVIDER_TYPE_CUSTOM]: customProvider(auth)\n  };\n}\n\nexport { createProviders };\n","import { StitchError } from './errors';\n\nexport const JSONTYPE = 'application/json';\nexport const APP_CLIENT_TYPE = 'app';\nexport const ADMIN_CLIENT_TYPE = 'admin';\nexport const DEFAULT_STITCH_SERVER_URL = 'https://realm.mongodb.com';\n\n// VERSION is substituted with the package.json version number at build time\nlet version = 'unknown';\nif (typeof VERSION !== 'undefined') {\n  version = VERSION;\n}\nexport const SDK_VERSION = version;\n\nexport const checkStatus = (response) => {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  if (response.headers.get('Content-Type') === JSONTYPE) {\n    return response.json()\n      .then(json => {\n        const error = new StitchError(json.error, json.error_code);\n        error.response = response;\n        error.json = json;\n        return Promise.reject(error);\n      });\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  return Promise.reject(error);\n};\n\nexport const makeFetchArgs = (method, body, options) => {\n  const init = {\n    method: method,\n    headers: { 'Accept': JSONTYPE, 'Content-Type': JSONTYPE }\n  };\n\n  if (options && options.credentials) {\n    init.credentials = options.credentials;\n  }\n\n  if (body) {\n    init.body = body;\n  }\n\n  init.cors = true;\n\n  return init;\n};\n","const _Error = function(message, code) {\n  Error.call(this, message);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  }\n\n  this.message = message;\n  this.name = this.constructor.name;\n\n  if (code !== undefined) {\n    this.code = code;\n  }\n};\n_Error.prototype = Object.create(Error.prototype);\n\n/**\n * StitchError represents general errors for SDK operations\n *\n * @class\n * @return {StitchError} a StitchError instance.\n */\nclass StitchError extends _Error {}\n\nconst ErrAuthProviderNotFound = 'AuthProviderNotFound';\nconst ErrInvalidSession = 'InvalidSession';\nconst ErrUnauthorized = 'Unauthorized';\n\n\nexport {\n  StitchError,\n  ErrAuthProviderNotFound,\n  ErrInvalidSession,\n  ErrUnauthorized\n};\n","import * as base64 from 'Base64';\n\n/**\n * @namespace util\n * @private\n */\n\n/**\n * Utility method for executing a service action as a function call.\n *\n * @memberof util\n * @param {Object} service the service to execute the action on\n * @param {String} action the service action to execute\n * @param {Array} args the arguments to supply to the service action invocation\n * @returns {Promise} the API response from the executed service action\n */\nfunction serviceResponse(service, { serviceName = service.serviceName, action, args }) {\n  const { client } = service;\n\n  if (!client) {\n    throw new Error('Service has no client');\n  }\n\n  return client.executeServiceFunction(serviceName, action, args);\n}\n\n/**\n * Utility function to encode a JSON object into a valid string that can be\n * inserted in a URI. The object is first stringified, then encoded in base64,\n * and finally encoded via the builtin encodeURIComponent function.\n *\n * @memberof util\n * @param {Object} obj The object to encode\n * @returns {String} The encoded object\n */\nfunction uriEncodeObject(obj) {\n  return encodeURIComponent(base64.btoa(JSON.stringify(obj)));\n}\n\nexport {\n  serviceResponse,\n  uriEncodeObject\n};\n","import S3Service from './aws/s3_service';\nimport SESService from './aws/ses_service';\nimport HTTPService from './http/http_service';\nimport MongoDBService from './mongodb/mongodb_service';\nimport TwilioService from './twilio/twilio_service';\n\nexport default {\n  'aws-s3': S3Service,\n  'aws-ses': SESService,\n  'aws_s3': S3Service,\n  'aws_ses': SESService,\n  'http': HTTPService,\n  'mongodb': MongoDBService,\n  'twilio': TwilioService\n};\n","import { serviceResponse } from '../../util';\n\n/**\n * Convenience wrapper around AWS S3 service (not meant to be instantiated directly,\n * use `.service('aws-s3', '<service-name>')` on a {@link StitchClient} instance).\n *\n * @class\n * @return {S3Service} a S3Service instance.\n */\nclass S3Service {\n  constructor(stitchClient, serviceName) {\n    this.client = stitchClient;\n    this.serviceName = serviceName;\n  }\n\n  /**\n   * Put an object to S3 via Stitch. For small uploads\n   *\n   * @param {String} bucket which S3 bucket to use\n   * @param {String} key which key (filename) to use\n   * @param {String} acl which policy to apply\n   * @param {String} contentType content type of uploaded data\n   * @param {String|BSON.Binary} body the content to put in the bucket\n   * @return {Promise} which resolves to an object containing a single field \"location\"\n   *                   which is the URL of the object that was put into the S3 bucket\n   */\n  put(bucket, key, acl, contentType, body) {\n    return serviceResponse(this, {\n      action: 'put',\n      args: { bucket, key, acl, contentType, body }\n    });\n  }\n\n  /**\n   * Sign a policy for putting via Stitch. For large uploads\n   *\n   * @param {String} bucket which S3 bucket to use\n   * @param {String} key which key (filename) to use\n   * @param {String} acl which policy to apply\n   * @param {String} contentType content type of uploaded data\n   * @return {Promise}\n   */\n  signPolicy(bucket, key, acl, contentType) {\n    return serviceResponse(this, {\n      action: 'signPolicy',\n      args: { bucket, key, acl, contentType }\n    });\n  }\n}\n\nexport default S3Service;\n","import { serviceResponse } from '../../util';\n\n/**\n * Convenience wrapper around AWS SES service (not meant to be instantiated directly,\n * use `.service('aws-ses', '<service-name>')` on a {@link StitchClient} instance).\n *\n * @class\n * @return {SESService} a SESService instance.\n */\nclass SESService {\n  constructor(stitchClient, serviceName) {\n    this.client = stitchClient;\n    this.serviceName = serviceName;\n  }\n\n  /**\n   * Send an email\n   *\n   * @method\n   * @param {String} fromAddress the email to send from\n   * @param {String} toAddress the email to send to\n   * @param {String} subject the subject of the email\n   * @param {String} body the body of the email\n   * @return {Promise} resolving to an object which contains the single string field\n   *                   \"messageId\", which is the SES message ID for the email message.\n   */\n  send(fromAddress, toAddress, subject, body) {\n    return serviceResponse(this, {\n      action: 'send',\n      args: { fromAddress, toAddress, subject, body }\n    });\n  }\n}\n\nexport default SESService;\n","import { serviceResponse } from '../../util';\n\n/**\n * Convenience wrapper for HTTP service (not meant to be instantiated directly,\n * use `.service('http', '<service-name>')` on a {@link StitchClient} instance).\n *\n * @class\n * @return {HTTPService} a HTTPService instance.\n */\nclass HTTPService {\n  constructor(client, serviceName) {\n    this.client = client;\n    this.serviceName = serviceName;\n  }\n\n  /**\n   * Send a GET request to a resource (result must be application/json)\n   *\n   * @param {String|Object} urlOrOptions the url to request, or an object of GET args\n   * @param {Object} [options] optional settings for the GET operation\n   * @param {String} [options.authUrl] url that grants a cookie\n   * @return {Promise}\n   */\n  get(urlOrOptions, options = {}) {\n    return buildResponse('get', this, buildArgs(urlOrOptions, options));\n  }\n\n  /**\n   * Send a POST request to a resource with payload\n   *\n   * @param {String|Object} urlOrOptions the url to request, or an object of POST args\n   * @param {Object} [options] optional settings for the POST operation\n   * @param {String} [options.authUrl] url that grants a cookie\n   * @return {Promise}\n   */\n  post(urlOrOptions, options = {}) {\n    return buildResponse('post', this, buildArgs(urlOrOptions, options));\n  }\n\n  /**\n   * Send a PUT request to a resource with payload\n   *\n   * @param {String|Object} urlOrOptions the url to request, or an object of PUT args\n   * @param {Object} [options] optional settings for the PUT operation\n   * @param {String} [options.authUrl] url that grants a cookie\n   * @return {Promise}\n   */\n  put(urlOrOptions, options = {}) {\n    return buildResponse('put', this, buildArgs(urlOrOptions, options));\n  }\n\n  /**\n   * Send a PATCH request to a resource with payload\n   *\n   * @param {String|Object} urlOrOptions the url to request, or an object of PATCH args\n   * @param {Object} [options] optional settings for the PATCH operation\n   * @param {String} [options.authUrl] url that grants a cookie\n   * @return {Promise}\n   */\n  patch(urlOrOptions, options = {}) {\n    return buildResponse('patch', this, buildArgs(urlOrOptions, options));\n  }\n\n  /**\n   * Send a DELETE request to a resource\n   *\n   * @param {String|Object} urlOrOptions the url to request, or an object of DELETE args\n   * @param {Object} [options] optional settings for the DELETE operation\n   * @param {String} [options.authUrl] url that grants a cookie\n   * @return {Promise}\n   */\n  delete(urlOrOptions, options = {}) {\n    return buildResponse('delete', this, buildArgs(urlOrOptions, options));\n  }\n\n  /**\n   * Send a HEAD request to a resource\n   *\n   * @param {String|Object} urlOrOptions the url to request, or an object of HEAD args\n   * @param {Object} [options] optional settings for the HEAD operation\n   * @param {String} [options.authUrl] url that grants a cookie\n   * @return {Promise}\n   */\n  head(urlOrOptions, options = {}) {\n    return buildResponse('head', this, buildArgs(urlOrOptions, options));\n  }\n}\n\nfunction buildArgs(urlOrOptions, options) {\n  let args;\n  if (typeof urlOrOptions !== 'string') {\n    args = urlOrOptions;\n  } else {\n    args = { url: urlOrOptions };\n    if (!!options.authUrl) args.authUrl = options.authUrl;\n  }\n\n  return args;\n}\n\nfunction buildResponse(action, service, args) {\n  return serviceResponse(service, {\n    action,\n    args\n  });\n}\n\nexport default HTTPService;\n","import DB from './db';\n\n/**\n * Creates a new MongoDBService instance (not meant to be instantiated directly, use\n * `.service('mongodb', '<service-name>')` on a {@link StitchClient} instance.\n *\n * @class\n * @return {MongoDBService} a MongoDBService instance.\n */\nclass MongoDBService {\n  /**\n   * @hideconstructor\n   */\n  constructor(stitchClient, serviceName) {\n    this.stitchClient = stitchClient;\n    this.serviceName = serviceName;\n  }\n\n  /**\n   * Get a DB instance\n   *\n   * @method\n   * @param {String} databaseName The MongoDB database name\n   * @param {Object} [options] Additional options.\n   * @return {DB} returns a DB instance representing a MongoDB database.\n   */\n  db(databaseName, options = {}) {\n    return new DB(this.stitchClient, this.serviceName, databaseName);\n  }\n}\n\n\nexport default MongoDBService;\n","import Collection from './collection';\n\n/**\n * Creates a new DB instance (not meant to be instantiated directly, use `.db()` on\n * a {@link MongoDBService} instance).\n * @class\n * @return {DB} a DB instance.\n */\nclass DB {\n  /**\n   * @hideconstructor\n   */\n  constructor(client, service, name) {\n    this.client = client;\n    this.service = service;\n    this.name = name;\n  }\n\n  /**\n   * Returns a Collection instance representing a MongoDB Collection object.\n   *\n   * @method\n   * @param {String} name The collection name.\n   * @param {Object} [options] Additional options.\n   * @return {Collection} returns a Collection instance representing a MongoDb collection.\n   */\n  collection(name, options = {}) {\n    return new Collection(this, name, options);\n  }\n}\n\nexport default DB;\n","import { serviceResponse } from '../../util';\n\n/**\n * Creates a new Collection instance (not meant to be instantiated directly,\n * use `.collection()` on a {@link DB} instance).\n *\n * @class\n * @return {Collection} a Collection instance.\n */\nclass Collection {\n  /**\n   * @hideconstructor\n   */\n  constructor(db, name) {\n    this.db = db;\n    this.name = name;\n  }\n\n  /**\n   * Inserts a single document.\n   *\n   * @method\n   * @param {Object} doc The document to insert.\n   * @return {Promise<Object, Error>} a Promise for the operation.\n   */\n  insertOne(doc) {\n    const args = { document: doc };\n    return buildResponse('insertOne', this, buildArgs(this, args));\n  }\n\n  /**\n   * Inserts multiple documents.\n   *\n   * @method\n   * @param {Array} docs The documents to insert.\n   * @return {Promise<Object, Error>} Returns a Promise for the operation.\n   */\n  insertMany(docs) {\n    const args = { documents: Array.isArray(docs) ? docs : [ docs ] };\n    return buildResponse('insertMany', this, buildArgs(this, args));\n  }\n\n  /**\n   * Deletes a single document.\n   *\n   * @method\n   * @param {Object} query The query used to match a single document.\n   * @return {Promise<Object, Error>} Returns a Promise for the operation.\n   */\n  deleteOne(query) {\n    return buildResponse('deleteOne', this, buildArgs(this, { query }));\n  }\n\n  /**\n   * Deletes all documents matching query.\n   *\n   * @method\n   * @param {Object} query The query used to match the documents to delete.\n   * @return {Promise<Object, Error>} Returns a Promise for the operation.\n   */\n  deleteMany(query) {\n    return buildResponse('deleteMany', this, buildArgs(this, { query }));\n  }\n\n  /**\n   * Updates a single document.\n   *\n   * @method\n   * @param {Object} query The query used to match a single document.\n   * @param {Object} update The update operations to perform on the matching document.\n   * @param {Object} [options] Additional options object.\n   * @param {Boolean} [options.upsert=false] Perform an upsert operation.\n   * @return {Promise<Object, Error>} A Promise for the operation.\n   */\n  updateOne(query, update, options = {}) {\n    return updateOp(this, false, query, update, options);\n  }\n\n  /**\n   * Updates multiple documents.\n   *\n   * @method\n   * @param {Object} query The query used to match the documents.\n   * @param {Object} update The update operations to perform on the matching documents.\n   * @param {Object} [options] Additional options object.\n   * @param {Boolean} [options.upsert=false] Perform an upsert operation.\n   * @return {Promise<Object, Error>} Returns a Promise for the operation.\n   */\n  updateMany(query, update) {\n    return updateOp(this, true, query, update);\n  }\n\n  /**\n   * Finds documents.\n   *\n   * @method\n   * @param {Object} query The query used to match documents.\n   * @param {Object} [project] The query document projection.\n   * @return {MongoQuery} An object which allows for `limit` and `sort` parameters to be set.\n   * `execute` will return a {Promise} for the operation.\n   */\n  find(query, project) {\n    return new MongoQuery(this, query, project);\n  }\n\n  /**\n   * Finds one document.\n   *\n   * @method\n   * @param {Object} query The query used to match documents.\n   * @param {Object} [project] The query document projection.\n   * @return {Promise<Object, Error>} Returns a Promise for the operation\n   */\n  findOne(query, project) {\n    return buildResponse('findOne', this, buildArgs(this, { query, project }));\n  }\n\n  /**\n   * Executes an aggregation pipeline.\n   *\n   * @param {Array} pipeline The aggregation pipeline.\n   * @returns {Array} The results of the aggregation.\n   */\n  aggregate(pipeline) {\n    return aggregateOp(this, pipeline);\n  }\n\n  /**\n   * Gets the number of documents matching the filter.\n   *\n   * @param {Object} query The query used to match documents.\n   * @param {Object} options Additional count options.\n   * @param {Number} [options.limit=null] The maximum number of documents to return.\n   * @return {Number} The results of the count operation.\n   */\n  count(query, options = {}) {\n    let outgoingOptions;\n    if (options.limit) {\n      outgoingOptions = { limit: options.limit };\n    }\n\n    return buildResponse('count', this, buildArgs(this, { count: true, query }, outgoingOptions));\n  }\n}\n\n// private\n\nfunction updateOp(service, isMulti, query, update, options = {}) {\n  const action = isMulti ? 'updateMany' : 'updateOne';\n\n  let outgoingOptions;\n  if (!isMulti && options.upsert) {\n    outgoingOptions = { upsert: true };\n  }\n\n  return buildResponse(action, service, buildArgs(service, { query, update }, outgoingOptions));\n}\n\nfunction findOp({ service, query, project, limit, sort }) {\n  return buildResponse('find', service, buildArgs(service, { query, project, limit, sort }));\n}\n\nfunction aggregateOp(service, pipeline) {\n  return buildResponse('aggregate', service, buildArgs(service, { pipeline }));\n}\n\nfunction buildArgs({ db: { name: database }, name: collection }, args, options = {}) {\n  return Object.assign(\n    { database, collection },\n    args,\n    options\n  );\n}\n\nfunction buildResponse(action, service, args) {\n  return serviceResponse(service.db, {\n    serviceName: service.db.service,\n    action,\n    args\n  });\n}\n\n// mongo query (find) support\n\nfunction MongoQuery(service, query, project) {\n  if (this instanceof MongoQuery) {\n    this.service = service;\n    this.query = query;\n    this.project = project;\n    return this;\n  }\n  return new MongoQuery(service, query, project);\n}\n\nMongoQuery.prototype.limit = function(limit) {\n  this.limit = limit;\n  return this;\n};\n\nMongoQuery.prototype.sort = function(sort) {\n  this.sort = sort;\n  return this;\n};\n\nMongoQuery.prototype.execute = function(resolve) {\n  return findOp(this);\n};\n\nexport default Collection;\n","import { serviceResponse } from '../../util';\n\n/**\n * Create a new TwilioService instance (not meant to be instantiated directly,\n * use `.service('twilio', '<service-name>')` on a {@link StitchClient} instance).\n *\n * @class\n * @return {TwilioService} a TwilioService instance.\n */\nclass TwilioService {\n  constructor(stitchClient, serviceName) {\n    this.client = stitchClient;\n    this.serviceName = serviceName;\n  }\n\n  /**\n   * Send a text message to a number\n   *\n   * @method\n   * @param {String} from number to send from\n   * @param {String} to number to send to\n   * @param {String} body SMS body content\n   * @return {Promise} which resolves to 'null' when message is sent successfully,\n   *                   or is rejected when there is an error\n   */\n  send(from, to, body) {\n    return serviceResponse(this, {\n      action: 'send',\n      args: { from, to, body }\n    });\n  }\n}\n\nexport default TwilioService;\n","const v1 = 1;\nconst v2 = 2;\nconst v3 = 3;\nconst API_TYPE_PUBLIC = 'public';\nconst API_TYPE_PRIVATE = 'private';\nconst API_TYPE_CLIENT = 'client';\nconst API_TYPE_APP = 'app';\n\nexport { v1, v2, v3, API_TYPE_PUBLIC, API_TYPE_PRIVATE, API_TYPE_CLIENT, API_TYPE_APP };\n","/* global window, fetch */\n/* eslint no-labels: ['error', { 'allowLoop': true }] */\nimport FormData from 'form-data';\nimport { newStitchClient, StitchClient } from './client';\nimport { ADMIN_CLIENT_TYPE } from './common';\nimport { ADMIN_CLIENT_CODEC } from './auth/common';\nimport { StitchError } from './errors';\nimport { v1, v3, API_TYPE_PRIVATE } from './constants';\n\n/** @private **/\nexport class StitchAdminClientFactory {\n  constructor() {\n    throw new StitchError('StitchAdminClient can only be made from the StitchAdminClientFactory.create function');\n  }\n\n  static create(baseUrl, options = { requestOrigin: undefined }) {\n    return newStitchClient(StitchAdminClient.prototype, '', {\n      requestOrigin: options.requestOrigin,\n      baseUrl,\n      authCodec: ADMIN_CLIENT_CODEC\n    });\n  }\n}\n\n/** @private */\nexport class StitchAdminClient extends StitchClient {\n  constructor() {\n    super();\n  }\n\n  get type() {\n    return ADMIN_CLIENT_TYPE;\n  }\n\n  get _v1() {\n    const privateV1do = (url, method, options) =>\n      super._do(url, method, Object.assign({ apiVersion: v1, apiType: API_TYPE_PRIVATE }, options)).then(response => {\n        const contentHeader = response.headers.get('content-type') || '';\n        if (contentHeader.split(',').indexOf('application/json') >= 0) {\n          return response.json();\n        }\n        return response;\n      });\n\n    return {\n      [API_TYPE_PRIVATE]: {\n        _get: (url, queryParams, headers, options) =>\n          privateV1do(url, 'GET', Object.assign({ queryParams, headers }, options)),\n        _post: (url, body, options = {}) => privateV1do(url, 'POST', Object.assign({ body }, options))\n      }\n    };\n  }\n\n  get _v3() {\n    const v3do = (url, method, options) =>\n      super._do(url, method, Object.assign({}, { apiVersion: v3 }, options)).then(response => {\n        const contentHeader = response.headers.get('content-type') || '';\n        if (contentHeader.split(',').indexOf('application/json') >= 0) {\n          return response.json();\n        }\n        return response;\n      });\n\n    return {\n      _get: (url, queryParams, headers, options) =>\n        v3do(url, 'GET', Object.assign({}, { queryParams, headers }, options)),\n      _put: (url, options) => (options ? v3do(url, 'PUT', options) : v3do(url, 'PUT')),\n      _patch: (url, options) => (options ? v3do(url, 'PATCH', options) : v3do(url, 'PATCH')),\n      _delete: (url, queryParams) => (queryParams ? v3do(url, 'DELETE', { queryParams }) : v3do(url, 'DELETE')),\n      _post: (url, body, queryParams) =>\n        queryParams\n          ? v3do(url, 'POST', { body: JSON.stringify(body), queryParams })\n          : v3do(url, 'POST', { body: JSON.stringify(body) }),\n      _postRaw: (url, options) => v3do(url, 'POST', options)\n    };\n  }\n\n  /**\n   * Verifies a recaptcha token.\n   *\n   * @returns {Promise}\n   */\n  verifyRecaptcha(token) {\n    return this._v1.private._post(\n      '/spa/recaptcha/verify',\n      new URLSearchParams(`response=${token}`),\n      { credentials: 'include', multipart: true, noAuth: true },\n    );\n  }\n\n  /**\n   * Ends the session for the current user.\n   *\n   * @returns {Promise}\n   */\n  logout() {\n    return super\n      ._do('/auth/session', 'DELETE', {\n        refreshOnFailure: false,\n        useRefreshToken: true,\n        apiVersion: v3\n      })\n      .then(() => this.auth.clear());\n  }\n\n  /**\n   * Returns profile information for the currently logged in user\n   *\n   * @returns {Promise}\n   */\n  userProfile() {\n    return this._v3._get('/auth/profile');\n  }\n\n  /**\n   * Returns available providers for the currently logged in admin\n   *\n   * @returns {Promise}\n   */\n  getAuthProviders() {\n    return super._do('/auth/providers', 'GET', { noAuth: true, apiVersion: v3 }).then(response => response.json());\n  }\n\n  /**\n   * Returns an access token for the user\n   *\n   * @returns {Promise}\n   */\n  doSessionPost() {\n    return super\n      ._do('/auth/session', 'POST', {\n        refreshOnFailure: false,\n        useRefreshToken: true,\n        apiVersion: v3\n      })\n      .then(response => response.json());\n  }\n\n  /* Examples of how to access admin API with this client:\n   *\n   * List all apps\n   *    a.apps('580e6d055b199c221fcb821c').list()\n   *\n   * Fetch app under name 'planner'\n   *    a.apps('580e6d055b199c221fcb821c').app('planner').get()\n   *\n   * List services under the app 'planner'\n   *    a.apps('580e6d055b199c221fcb821c').app('planner').services().list()\n   *\n   * Delete a rule by ID\n   *    a.apps('580e6d055b199c221fcb821c').app('planner').services().service('mdb1').rules().rule('580e6d055b199c221fcb821d').remove()\n   *\n   */\n  apps(groupId) {\n    const api = this._v3;\n    const groupUrl = `/groups/${groupId}/apps`;\n    return {\n      list: filter => api._get(groupUrl, filter),\n      create: (data, options) => {\n        let query = options && options.product ? `?product=${options.product}` : '';\n        return api._post(groupUrl + query, data);\n      },\n\n      measurements: filter => api._get(`/groups/${groupId}/measurements`, filter),\n\n      app: appId => {\n        const appUrl = `${groupUrl}/${appId}`;\n        return {\n          get: () => api._get(appUrl),\n          remove: () => api._delete(appUrl),\n\n          export: () =>\n            api._get(`${appUrl}/export`, { version: '20200603' }, {\n              Accept: 'application/zip'\n            }),\n\n          measurements: filter => api._get(`${appUrl}/measurements`, filter),\n\n          commands: () => ({\n            run: (command, data) => api._post(`${appUrl}/commands/${command}`, data)\n          }),\n\n          dependencies: () => ({\n            list: () => api._get(`${appUrl}/dependencies`),\n            upload: (filename, body) => {\n              const form = new FormData();\n              form.append('file', body, filename);\n              return api._postRaw(`${appUrl}/dependencies`, {\n                body: form,\n                multipart: true\n              });\n            }\n          }),\n\n          values: () => ({\n            list: () => api._get(`${appUrl}/values`),\n            create: data => api._post(`${appUrl}/values`, data),\n            value: valueId => {\n              const valueUrl = `${appUrl}/values/${valueId}`;\n              return {\n                get: () => api._get(valueUrl),\n                remove: () => api._delete(valueUrl),\n                update: data => api._put(valueUrl, { body: JSON.stringify(data) })\n              };\n            }\n          }),\n\n          secrets: () => ({\n            list: () => api._get(`${appUrl}/secrets`),\n            create: data => api._post(`${appUrl}/secrets`, data),\n            secret: secretId => {\n              const secretUrl = `${appUrl}/secrets/${secretId}`;\n              return {\n                remove: () => api._delete(secretUrl),\n                update: data => api._put(secretUrl, { body: JSON.stringify(data) })\n              };\n            }\n          }),\n\n          hosting: () => ({\n            config: () => ({\n              get: () => api._get(`${appUrl}/hosting/config`),\n              patch: config =>\n                api._patch(`${appUrl}/hosting/config`, {\n                  body: JSON.stringify(config)\n                })\n            }),\n            cache: () => ({\n              invalidate: path =>\n                api._put(`${appUrl}/hosting/cache`, {\n                  body: JSON.stringify({ invalidate: true, path: path })\n                })\n            }),\n            assets: () => ({\n              createDirectory: folderName =>\n                api._put(`${appUrl}/hosting/assets/asset`, {\n                  body: JSON.stringify({ path: `${folderName}/` })\n                }),\n              list: params => api._get(`${appUrl}/hosting/assets`, params),\n              upload: (metadata, body) => {\n                const form = new FormData();\n                form.append('meta', metadata);\n                form.append('file', body);\n                return api._put(`${appUrl}/hosting/assets/asset`, {\n                  body: form,\n                  multipart: true\n                });\n              },\n              post: data => api._post(`${appUrl}/hosting/assets`, data),\n              asset: () => ({\n                patch: options =>\n                  api._patch(`${appUrl}/hosting/assets/asset`, {\n                    body: JSON.stringify({ attributes: options.attributes }),\n                    queryParams: { path: options.path }\n                  }),\n                get: params => api._get(`${appUrl}/hosting/assets/asset`, params),\n                delete: params => api._delete(`${appUrl}/hosting/assets/asset`, params)\n              })\n            })\n          }),\n\n          deploy: () => ({\n            auth: () => ({\n              github: () =>\n                api._get(`${appUrl}/deploy/github/auth`, undefined, undefined, {\n                  credentials: 'include'\n                })\n            }),\n            config: () => api._get(`${appUrl}/deploy/config`),\n            deployments: () => ({\n              list: filter => api._get(`${appUrl}/deployments`, filter),\n              get: commit => api._get(`${appUrl}/deployments/${commit}`)\n            }),\n            installation: () => api._get(`${appUrl}/deploy/installation`),\n            repositories: () => ({\n              repository: repoId => ({\n                github: () => ({\n                  branches: () => ({\n                    list: () => api._get(`${appUrl}/deploy/github/repositories/${repoId}/branches`)\n                  })\n                })\n              })\n            }),\n            updateConfig: config =>\n              api._patch(`${appUrl}/deploy/config`, {\n                body: JSON.stringify(config)\n              }),\n            overwriteConfig: config =>\n              api._put(`${appUrl}/deploy/config`, {\n                body: JSON.stringify(config)\n              })\n          }),\n\n          drafts: () => ({\n            get: draftId => api._get(`${appUrl}/drafts/${draftId}`),\n            list: () => api._get(`${appUrl}/drafts`),\n            create: () => api._post(`${appUrl}/drafts`),\n            delete: draftId => api._delete(`${appUrl}/drafts/${draftId}`),\n            deploy: (draftId, params) => api._post(`${appUrl}/drafts/${draftId}/deployment`, null, params),\n            diff: draftId => api._get(`${appUrl}/drafts/${draftId}/diff`)\n          }),\n\n          services: () => ({\n            list: () => api._get(`${appUrl}/services`),\n            create: data => api._post(`${appUrl}/services`, data),\n            service: serviceId => ({\n              get: () => api._get(`${appUrl}/services/${serviceId}`),\n              remove: (params) => api._delete(`${appUrl}/services/${serviceId}`, params),\n              update: data =>\n                api._patch(`${appUrl}/services/${serviceId}`, {\n                  body: JSON.stringify(data)\n                }),\n              runCommand: (commandName, data) =>\n                api._post(`${appUrl}/services/${serviceId}/commands/${commandName}`, data),\n              config: () => ({\n                get: params => api._get(`${appUrl}/services/${serviceId}/config`, params),\n                update: data =>\n                  api._patch(`${appUrl}/services/${serviceId}/config`, {\n                    body: JSON.stringify(data)\n                  })\n              }),\n\n              rules: () => ({\n                list: () => api._get(`${appUrl}/services/${serviceId}/rules`),\n                create: (data, params) => api._post(`${appUrl}/services/${serviceId}/rules`, data, params),\n                rule: ruleId => {\n                  const ruleUrl = `${appUrl}/services/${serviceId}/rules/${ruleId}`;\n                  return {\n                    get: () => api._get(ruleUrl),\n                    update: (data, params) => api._put(ruleUrl, { body: JSON.stringify(data), queryParams: params }),\n                    remove: (params) => api._delete(ruleUrl, params)\n                  };\n                }\n              }),\n\n              incomingWebhooks: () => ({\n                list: () => api._get(`${appUrl}/services/${serviceId}/incoming_webhooks`),\n                create: data => api._post(`${appUrl}/services/${serviceId}/incoming_webhooks`, data),\n                incomingWebhook: incomingWebhookId => {\n                  const webhookUrl = `${appUrl}/services/${serviceId}/incoming_webhooks/${incomingWebhookId}`;\n                  return {\n                    get: () => api._get(webhookUrl),\n                    update: data => api._put(webhookUrl, { body: JSON.stringify(data) }),\n                    remove: () => api._delete(webhookUrl)\n                  };\n                }\n              })\n            })\n          }),\n\n          pushNotifications: () => ({\n            list: filter => api._get(`${appUrl}/push/notifications`, filter),\n            create: data => api._post(`${appUrl}/push/notifications`, data),\n            pushNotification: messageId => ({\n              get: () => api._get(`${appUrl}/push/notifications/${messageId}`),\n              update: data =>\n                api._put(`${appUrl}/push/notifications/${messageId}`, {\n                  body: JSON.stringify(data)\n                }),\n              remove: () => api._delete(`${appUrl}/push/notifications/${messageId}`),\n              send: () => api._post(`${appUrl}/push/notifications/${messageId}/send`)\n            })\n          }),\n\n          users: () => ({\n            count: () => api._get(`${appUrl}/users_count`),\n            list: filter => api._get(`${appUrl}/users`, filter),\n            create: user => api._post(`${appUrl}/users`, user),\n            user: uid => ({\n              get: () => api._get(`${appUrl}/users/${uid}`),\n              devices: () => ({\n                get: () => api._get(`${appUrl}/users/${uid}/devices`)\n              }),\n              logout: () => api._put(`${appUrl}/users/${uid}/logout`),\n              enable: () => api._put(`${appUrl}/users/${uid}/enable`),\n              disable: () => api._put(`${appUrl}/users/${uid}/disable`),\n              remove: () => api._delete(`${appUrl}/users/${uid}`)\n            })\n          }),\n\n          userRegistrations: () => ({\n            sendConfirmationEmail: (email) => api._post(`${appUrl}/user_registrations/by_email/${email}/send_confirm`),\n            runUserConfirmation: (email) => api._post(`${appUrl}/user_registrations/by_email/${email}/run_confirm`),\n            confirmByEmail: (email) => api._post(`${appUrl}/user_registrations/by_email/${email}/confirm`),\n            listPending: (filter) => api._get(`${appUrl}/user_registrations/pending_users`, filter),\n            removePendingUserByEmail: (email) => api._delete(`${appUrl}/user_registrations/by_email/${email}`),\n            removePendingUserByID: (id) => api._delete(`${appUrl}/user_registrations/by_id/${id}`)\n          }),\n\n          customUserData: () => ({\n            get: () => api._get(`${appUrl}/custom_user_data`),\n            update: (data) => api._patch(`${appUrl}/custom_user_data`, { body: JSON.stringify(data) })\n          }),\n\n          debug: () => ({\n            executeFunction: (userId, name = '', ...args) => {\n              return api._post(`${appUrl}/debug/execute_function`, { name, arguments: args }, { user_id: userId });\n            },\n            executeFunctionSource: ({ userId, source = '', evalSource = '', runAsSystem }) => {\n              return api._post(\n                `${appUrl}/debug/execute_function_source`,\n                { source, eval_source: evalSource },\n                { user_id: userId, run_as_system: runAsSystem }\n              );\n            }\n          }),\n\n          authProviders: () => ({\n            list: () => api._get(`${appUrl}/auth_providers`),\n            create: data => api._post(`${appUrl}/auth_providers`, data),\n            authProvider: providerId => ({\n              get: () => api._get(`${appUrl}/auth_providers/${providerId}`),\n              update: data =>\n                api._patch(`${appUrl}/auth_providers/${providerId}`, {\n                  body: JSON.stringify(data)\n                }),\n              enable: () => api._put(`${appUrl}/auth_providers/${providerId}/enable`),\n              disable: () => api._put(`${appUrl}/auth_providers/${providerId}/disable`),\n              remove: () => api._delete(`${appUrl}/auth_providers/${providerId}`)\n            })\n          }),\n\n          security: () => ({\n            allowedRequestOrigins: () => ({\n              get: () => api._get(`${appUrl}/security/allowed_request_origins`),\n              update: data => api._post(`${appUrl}/security/allowed_request_origins`, data)\n            })\n          }),\n\n          logs: () => ({\n            list: filter => api._get(`${appUrl}/logs`, filter)\n          }),\n\n          apiKeys: () => ({\n            list: () => api._get(`${appUrl}/api_keys`),\n            create: data => api._post(`${appUrl}/api_keys`, data),\n            apiKey: apiKeyId => ({\n              get: () => api._get(`${appUrl}/api_keys/${apiKeyId}`),\n              remove: () => api._delete(`${appUrl}/api_keys/${apiKeyId}`),\n              enable: () => api._put(`${appUrl}/api_keys/${apiKeyId}/enable`),\n              disable: () => api._put(`${appUrl}/api_keys/${apiKeyId}/disable`)\n            })\n          }),\n\n          functions: () => ({\n            list: () => api._get(`${appUrl}/functions`),\n            create: data => api._post(`${appUrl}/functions`, data),\n            function: functionId => ({\n              get: () => api._get(`${appUrl}/functions/${functionId}`),\n              update: data =>\n                api._put(`${appUrl}/functions/${functionId}`, {\n                  body: JSON.stringify(data)\n                }),\n              remove: () => api._delete(`${appUrl}/functions/${functionId}`)\n            })\n          }),\n\n          eventSubscriptions: () => ({\n            list: filter => api._get(`${appUrl}/event_subscriptions`, filter),\n            create: data => api._post(`${appUrl}/event_subscriptions`, data),\n            eventSubscription: eventSubscriptionId => ({\n              get: () => api._get(`${appUrl}/event_subscriptions/${eventSubscriptionId}`),\n              update: data =>\n                api._put(`${appUrl}/event_subscriptions/${eventSubscriptionId}`, { body: JSON.stringify(data) }),\n              remove: () => api._delete(`${appUrl}/event_subscriptions/${eventSubscriptionId}`),\n              resume: data =>\n                api._put(`${appUrl}/event_subscriptions/${eventSubscriptionId}/resume`, { body: JSON.stringify(data) })\n            })\n          }),\n\n          validationSettings: () => {\n            const validationSettingsUrl = `${appUrl}/validation_settings`;\n\n            return {\n              graphql: () => {\n                const graphqlUrl = `${validationSettingsUrl}/graphql`;\n\n                return {\n                  get: () => api._get(graphqlUrl),\n                  update: (data) => api._put(graphqlUrl, { body: JSON.stringify(data) })\n                };\n              }\n            };\n          },\n\n          graphql: () => {\n            const graphqlUrl = `${appUrl}/graphql`;\n\n            return {\n              config: () => ({\n                get: () => api._get(`${graphqlUrl}/config`),\n                update: data => api._put(`${graphqlUrl}/config`, { body: JSON.stringify(data) })\n              }),\n              post: (data) => api._post(`${graphqlUrl}`, data),\n              validate: () => api._get(`${graphqlUrl}/validate`),\n              customResolvers: () => ({\n                list: () => api._get(`${graphqlUrl}/custom_resolvers`),\n                create: data => api._post(`${graphqlUrl}/custom_resolvers`, data),\n                customResolver: (id) => ({\n                  get: () => api._get(`${graphqlUrl}/custom_resolvers/${id}`),\n                  update: data => api._put(`${graphqlUrl}/custom_resolvers/${id}`, { body: JSON.stringify(data) }),\n                  remove: () => api._delete(`${graphqlUrl}/custom_resolvers/${id}`)\n                })\n              })\n            };\n          },\n\n          sync: () => {\n            const syncUrl = `${appUrl}/sync`;\n            return {\n              config: () => {\n                const realmConfigUrl = `${syncUrl}/config`;\n                return {\n                  get: () => api._get(realmConfigUrl),\n                  update: (data) => api._put(realmConfigUrl, { body: JSON.stringify(data) })\n                };\n              },\n              clientSchemas: () => {\n                const realmClientSchemasUrl = `${syncUrl}/client_schemas`;\n                return {\n                  get: (language, filter) => api._get(`${realmClientSchemasUrl}/${language}`, filter)\n                };\n              },\n              data: (params = {}) => api._get(`${syncUrl}/data`, params),\n              patchSchemas: data => api._patch(`${syncUrl}/schemas`, { body: JSON.stringify(data) }),\n              progress: () => api._get(`${syncUrl}/progress`)\n            };\n          }\n        };\n      }\n    };\n  }\n\n  /**\n   * Manages an Atlas Cluster.\n   *\n   * @returns {Object}\n   */\n  privateClusters(groupId, appId) {\n    const privateApi = this._v1[API_TYPE_PRIVATE];\n    const baseUrl = `/groups/${groupId}/apps/${appId}/atlas_clusters`;\n\n    return {\n      create: (regionName) =>\n        privateApi._post(baseUrl, JSON.stringify({ region_name: regionName }), { credentials: 'include' })\n    };\n  }\n\n  /**\n   * Manages Atlas temporary API keys.\n   *\n   * @returns {Object}\n   */\n  privateTempAPIKeys() {\n    const privateApi = this._v1[API_TYPE_PRIVATE];\n    const baseUrl = '/auth/temp_api_keys';\n\n    return {\n      create: (desc) =>\n        privateApi._post(baseUrl, JSON.stringify({ desc }))\n    };\n  }\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../"}