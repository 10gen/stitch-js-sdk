function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire0fbe"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire0fbe"] = parcelRequire;
}
const $99eab7d63bb19b88$export$6ad5149ddc5975aa = '_baas_ua';
const $99eab7d63bb19b88$export$b315e18d7776b217 = '_baas_rt';
const $99eab7d63bb19b88$export$27679e29a5d747dd = '_baas_did';
const $99eab7d63bb19b88$export$b56c47f66926ce06 = '_baas_state';
const $99eab7d63bb19b88$export$98dc88e4299e0f63 = 'baas_ua';
const $99eab7d63bb19b88$export$95c7c81c07ded128 = '_baas_error';
const $99eab7d63bb19b88$export$1e66525f78624edb = '_baas_link';
const $99eab7d63bb19b88$export$f7ebad5035fb5d3a = '_baas_pt';
const $99eab7d63bb19b88$export$b932e4f5204468ed = '_baas_rp';
const $99eab7d63bb19b88$export$a0144ec7f076612d = 10;
const $99eab7d63bb19b88$export$ef2912c5a4434709 = {
    'accessToken': 'access_token',
    'refreshToken': 'refresh_token',
    'deviceId': 'device_id',
    'userId': 'user_id'
};
const $99eab7d63bb19b88$export$790cb3fe07c4778b = {
    'accessToken': 'access_token',
    'refreshToken': 'refresh_token',
    'deviceId': 'device_id',
    'userId': 'user_id'
};


class $553257b34cc1550b$export$d7392285c701ecf5 {
    constructor(){
        this._data = {
        };
        this._orderedKeys = [];
        this.length = 0;
    }
    getItem(key3) {
        return key3 in this._data ? this._data[key3] : null;
    }
    setItem(key1, value) {
        this._orderedKeys.push(key1);
        this._data[key1] = value;
        this.length++;
        return this._data[key1];
    }
    removeItem(key2) {
        this._orderedKeys.pop(key2);
        delete this._data[key2];
        this.length--;
        return undefined;
    }
    key(index) {
        return this._orderedKeys[index];
    }
}
const $553257b34cc1550b$var$_VERSION = 1;
const $553257b34cc1550b$var$_VERSION_KEY = '__baas_storage_version__';
/**
  * Run a migration on the currently used storage
  * that checks to see if the current version is up to date.
  * If the version has not been set, this method will migrate
  * to the latest version.
  *
  * @private
  * @param {Integer} version version number of storage
  * @param {Object} storage storage class being checked
  * @returns {Promise} nullable promise containing migration logic
  */ function $553257b34cc1550b$var$_runMigration(version, storage) {
    switch(version){
        case null:
        case undefined:
            // return a promise,
            // mapping each of the store's keys to a Promise
            // that fetches the each value for each key,
            // sets the old value to the new "namespaced" key
            // remove the old key value pair,
            // and set the version number
            let migrations = [
                $99eab7d63bb19b88$export$6ad5149ddc5975aa,
                $99eab7d63bb19b88$export$b315e18d7776b217,
                $99eab7d63bb19b88$export$27679e29a5d747dd,
                $99eab7d63bb19b88$export$b56c47f66926ce06
            ].map((key)=>Promise.resolve(storage.store.getItem(key)).then((item)=>!!item && storage.store.setItem(storage._generateKey(key), item)
                ).then(()=>storage.store.removeItem(key)
                )
            );
            return Promise.all(migrations).then(()=>storage.store.setItem($553257b34cc1550b$var$_VERSION_KEY, $553257b34cc1550b$var$_VERSION)
            );
        // in future versions, `case 1:`, `case 2:` and so on
        // could be added to perform similar migrations
        default:
            break;
    }
}
/** @private */ class $553257b34cc1550b$var$Storage {
    /**
   * @param {Storage} store implementer of Storage interface
   * @param {String} namespace clientAppID to be used for namespacing
   * @param
  */ constructor(store, namespace1){
        this.store = store;
        this.namespace = `_baas.${namespace1}`;
        this._migration = Promise.resolve(this.store.getItem($553257b34cc1550b$var$_VERSION_KEY)).then((version)=>$553257b34cc1550b$var$_runMigration(version, this)
        );
    }
    _generateKey(key) {
        return `${this.namespace}.${key}`;
    }
    get(key4) {
        return Promise.resolve(this._migration).then(()=>this.store.getItem(this._generateKey(key4))
        );
    }
    set(key5, value1) {
        return Promise.resolve(this._migration).then(()=>this.store.setItem(this._generateKey(key5), value1)
        ).then(()=>value1
        );
    }
    remove(key6) {
        return Promise.resolve(this._migration).then(()=>this.store.removeItem(this._generateKey(key6))
        );
    }
}
function $553257b34cc1550b$export$d184a47a971dd4b9(options) {
    let { storageType: storageType , storage: storage , namespace: namespace  } = options;
    if (storageType === 'localStorage') {
        if (typeof window !== 'undefined' && 'localStorage' in window && window.localStorage !== null) return new $553257b34cc1550b$var$Storage(window.localStorage, namespace);
    } else if (storageType === 'sessionStorage') {
        if (typeof window !== 'undefined' && 'sessionStorage' in window && window.sessionStorage !== null) return new $553257b34cc1550b$var$Storage(window.sessionStorage, namespace);
    } else if (storageType == 'customStorage') return new $553257b34cc1550b$var$Storage(storage, namespace);
    // default to memory storage
    return new $553257b34cc1550b$var$Storage(new $553257b34cc1550b$export$d7392285c701ecf5(), namespace);
}


const $5acc442337fa3693$var$_Error = function(message, code) {
    Error.call(this, message);
    if (Error.captureStackTrace) Error.captureStackTrace(this);
    this.message = message;
    this.name = this.constructor.name;
    if (code !== undefined) this.code = code;
};
$5acc442337fa3693$var$_Error.prototype = Object.create(Error.prototype);
/**
 * StitchError represents general errors for SDK operations
 *
 * @class
 * @return {StitchError} a StitchError instance.
 */ class $5acc442337fa3693$export$92aa0aa8f60e5a4f extends $5acc442337fa3693$var$_Error {
}
const $5acc442337fa3693$export$d3641f3066a48dcb = 'AuthProviderNotFound';
const $5acc442337fa3693$export$604c120584438724 = 'InvalidSession';
const $5acc442337fa3693$export$14a25834bf5fa686 = 'Unauthorized';


const $eadd389675610441$export$ad106c78fd3b6e6 = 'application/json';
const $eadd389675610441$export$347e6d9936c9829 = 'app';
const $eadd389675610441$export$7ca39f6d0f92b2ab = 'admin';
const $eadd389675610441$export$15e777aff03fd23c = 'https://realm.mongodb.com';
// VERSION is substituted with the package.json version number at build time
let $eadd389675610441$var$version = 'unknown';
if (typeof VERSION !== 'undefined') $eadd389675610441$var$version = VERSION;
const $eadd389675610441$export$31499a9cd224b78c = $eadd389675610441$var$version;
const $eadd389675610441$export$1c8f61c1db5300d2 = (response)=>{
    if (response.status >= 200 && response.status < 300) return response;
    if (response.headers.get('Content-Type') === $eadd389675610441$export$ad106c78fd3b6e6) return response.json().then((json)=>{
        const error = new $5acc442337fa3693$export$92aa0aa8f60e5a4f(json.error, json.error_code);
        error.response = response;
        error.json = json;
        return Promise.reject(error);
    });
    const error1 = new Error(response.statusText);
    error1.response = response;
    return Promise.reject(error1);
};
const $eadd389675610441$export$f269dc256bdbf2f8 = (method, body, options)=>{
    const init = {
        method: method,
        headers: {
            'Accept': $eadd389675610441$export$ad106c78fd3b6e6,
            'Content-Type': $eadd389675610441$export$ad106c78fd3b6e6
        }
    };
    if (options && options.credentials) init.credentials = options.credentials;
    if (body) init.body = body;
    init.cors = true;
    return init;
};



var $a4e37d9b85c9ed07$exports = {};
(function(f) {
    /* istanbul ignore else */ if (typeof $a4e37d9b85c9ed07$exports === 'object' && $a4e37d9b85c9ed07$exports != null && typeof $a4e37d9b85c9ed07$exports.nodeType !== 'number') $a4e37d9b85c9ed07$exports = f();
    else if (typeof define === 'function' && define.amd != null) define([], f);
    else {
        var base64 = f();
        var global = typeof self !== 'undefined' ? self : $.global;
        if (typeof global.btoa !== 'function') global.btoa = base64.btoa;
        if (typeof global.atob !== 'function') global.atob = base64.atob;
    }
})(function() {
    'use strict';
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    function InvalidCharacterError(message) {
        this.message = message;
    }
    InvalidCharacterError.prototype = new Error();
    InvalidCharacterError.prototype.name = 'InvalidCharacterError';
    // encoder
    // [https://gist.github.com/999166] by [https://github.com/nignag]
    function btoa(input) {
        var str = String(input);
        for(// initialize result and counter
        var block, charCode, idx = 0, map = chars, output = ''; // if the next str index does not exist:
        //   change the mapping table to "="
        //   check if d has no fractional digits
        str.charAt(idx | 0) || (map = '=', idx % 1); // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
        output += map.charAt(63 & block >> 8 - idx % 1 * 8)){
            charCode = str.charCodeAt(idx += 0.75);
            if (charCode > 255) throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
            block = block << 8 | charCode;
        }
        return output;
    }
    // decoder
    // [https://gist.github.com/1020396] by [https://github.com/atk]
    function atob(input) {
        var str = String(input).replace(/[=]+$/, ''); // #31: ExtendScript bad parse of /=
        if (str.length % 4 === 1) throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
        for(// initialize result and counters
        var bc = 0, bs, buffer, idx = 0, output = ''; // get next character
        buffer = str.charAt(idx++); // character found in table? initialize bit storage and add its ascii value;
        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,
        // convert the first 8 bits to one ascii character
        (bc++) % 4) && (output += String.fromCharCode(255 & bs >> (-2 * bc & 6))))// try to find character in table (0-63, not found => -1)
        buffer = chars.indexOf(buffer);
        return output;
    }
    return {
        btoa: btoa,
        atob: atob
    };
});


/**
 * @namespace util
 * @private
 */ /**
 * Utility method for executing a service action as a function call.
 *
 * @memberof util
 * @param {Object} service the service to execute the action on
 * @param {String} action the service action to execute
 * @param {Array} args the arguments to supply to the service action invocation
 * @returns {Promise} the API response from the executed service action
 */ function $e75cbf5bfa03336a$export$f0b7529ba755d680(service, { serviceName: serviceName = service.serviceName , action: action , args: args  }) {
    const { client: client  } = service;
    if (!client) throw new Error('Service has no client');
    return client.executeServiceFunction(serviceName, action, args);
}
/**
 * Utility function to encode a JSON object into a valid string that can be
 * inserted in a URI. The object is first stringified, then encoded in base64,
 * and finally encoded via the builtin encodeURIComponent function.
 *
 * @memberof util
 * @param {Object} obj The object to encode
 * @returns {String} The encoded object
 */ function $e75cbf5bfa03336a$export$eb8b1f60ba4589aa(obj) {
    return encodeURIComponent($a4e37d9b85c9ed07$exports.btoa(JSON.stringify(obj)));
}


const $2859ed2d1ef64fb6$export$a79c91b221bb4dea = 'anon';
const $2859ed2d1ef64fb6$export$e48f71866ac8652a = 'custom';
const $2859ed2d1ef64fb6$export$3b9f1faf0c9c41fb = 'userpass';
const $2859ed2d1ef64fb6$export$55a72882668e67f5 = 'apiKey';
const $2859ed2d1ef64fb6$export$62be50743fab570 = 'google';
const $2859ed2d1ef64fb6$export$43c1e19648991f7b = 'facebook';
const $2859ed2d1ef64fb6$export$a71df098a182ee3a = 'mongodbCloud';
parcelRequire.register("hcqDF", function(module, exports) {
"use strict";
// ref: https://github.com/tc39/proposal-global
var getGlobal = function() {
    // the only reliable means to get the global object is
    // `Function('return this')()`
    // However, this causes CSP violations in Chrome apps.
    if (typeof self !== 'undefined') return self;
    if (typeof window !== 'undefined') return window;
    if (typeof global !== 'undefined') return global;
    throw new Error('unable to locate global object');
};
var global = getGlobal();
module.exports = exports = global.fetch;
// Needed for TypeScript and Webpack.
if (global.fetch) exports.default = global.fetch.bind(global);
exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

});


const $2859ed2d1ef64fb6$export$47fdd40111eda34c = ()=>typeof fetch === 'undefined' ? (parcelRequire("hcqDF")) : fetch
;
function $2859ed2d1ef64fb6$var$urlWithLinkParam(url, link) {
    if (link) return url + '?link=true';
    return url;
}
/**
 * @private
 * @namespace
 */ function $2859ed2d1ef64fb6$var$anonProvider(auth) {
    return {
        /**
     * Login to a stitch application using anonymous authentication
     *
     * @memberof anonProvider
     * @instance
     * @returns {Promise} a promise that resolves when authentication succeeds.
     */ authenticate: (options, link)=>{
            const deviceId = auth.getDeviceId();
            const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('GET');
            fetchArgs.cors = true;
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            return doFetch($2859ed2d1ef64fb6$var$urlWithLinkParam(`${auth.rootUrl}/providers/anon-user/login?device=${$e75cbf5bfa03336a$export$eb8b1f60ba4589aa(device)}`, link), auth.fetchArgsWithLink(fetchArgs, link)).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            ).then((json)=>auth.set(json, $2859ed2d1ef64fb6$export$a79c91b221bb4dea)
            );
        }
    };
}
/**
 * @private
 * @namespace
 */ function $2859ed2d1ef64fb6$var$customProvider(auth) {
    const providerRoute = 'providers/custom-token';
    const loginRoute = `${providerRoute}/login`;
    return {
        /**
     * Login to a stitch application using custom authentication
     *
     * @memberof customProvider
     * @instance
     * @param {String} JWT token to use for authentication
     * @returns {Promise} a promise that resolves when authentication succeeds.
     */ authenticate: (token, link)=>{
            const deviceId = auth.getDeviceId();
            const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                token: token,
                options: {
                    device: device
                }
            }));
            fetchArgs.cors = true;
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            return doFetch($2859ed2d1ef64fb6$var$urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link)).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            ).then((json)=>auth.set(json, $2859ed2d1ef64fb6$export$e48f71866ac8652a)
            );
        }
    };
}
/**
 * userPassProvider offers several methods for completing certain tasks necessary for email/password
 * authentication. userPassProvider cannot be instantiated directly. To instantiate,
 * use `.auth.providers('userpass')` on a {@link StitchClient}.
 *
 * @namespace
 */ function $2859ed2d1ef64fb6$var$userPassProvider(auth) {
    // The ternary expression here is redundant but is just preserving previous behavior based on whether or not
    // the client is for the admin or client API.
    const providerRoute = auth.isAppClient() ? 'providers/local-userpass' : 'providers/local-userpass';
    const loginRoute = auth.isAppClient() ? `${providerRoute}/login` : `${providerRoute}/login`;
    return {
        /**
     * Login to a stitch application using username and password authentication
     *
     * @private
     * @memberof userPassProvider
     * @instance
     * @param {String} username the username to use for authentication
     * @param {String} password the password to use for authentication
     * @returns {Promise} a promise that resolves when authentication succeeds.
     */ authenticate: ({ username: username , password: password  }, link)=>{
            const deviceId = auth.getDeviceId();
            const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                username: username,
                password: password,
                options: {
                    device: device
                }
            }));
            fetchArgs.cors = true;
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            return doFetch($2859ed2d1ef64fb6$var$urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link)).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            ).then((json)=>auth.set(json, $2859ed2d1ef64fb6$export$3b9f1faf0c9c41fb)
            );
        },
        /**
     * Completes the email confirmation workflow from the Stitch server
     *
     * @memberof userPassProvider
     * @instance
     * @param {String} tokenId the tokenId provided by the Stitch server
     * @param {String} token the token provided by the Stitch server
     * @returns {Promise}
     */ emailConfirm: (tokenId, token)=>{
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                tokenId: tokenId,
                token: token
            }));
            fetchArgs.cors = true;
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            return doFetch(`${auth.rootUrl}/${providerRoute}/confirm`, fetchArgs).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            );
        },
        /**
     * Request that the stitch server send another email confirmation
     * for account creation.
     *
     * @memberof userPassProvider
     * @instance
     * @param {String} email the email address to send a confirmation email for
     * @returns {Promise}
     */ sendEmailConfirm: (email)=>{
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                email: email
            }));
            fetchArgs.cors = true;
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            return doFetch(`${auth.rootUrl}/${providerRoute}/confirm/send`, fetchArgs).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            );
        },
        /**
     * Sends a password reset request to the Stitch server
     *
     * @memberof userPassProvider
     * @instance
     * @param {String} email the email address of the account to reset the password for
     * @returns {Promise}
     */ sendPasswordReset: (email)=>{
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                email: email
            }));
            fetchArgs.cors = true;
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            return doFetch(`${auth.rootUrl}/${providerRoute}/reset/send`, fetchArgs).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            );
        },
        /**
     * Use information returned from the Stitch server to complete the password
     * reset flow for a given email account, providing a new password for the account.
     *
     * @memberof userPassProvider
     * @instance
     * @param {String} tokenId the tokenId provided by the Stitch server
     * @param {String} token the token provided by the Stitch server
     * @param {String} password the new password requested for this account
     * @returns {Promise}
     */ passwordReset: (tokenId, token, password)=>{
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                tokenId: tokenId,
                token: token,
                password: password
            }));
            fetchArgs.cors = true;
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            return doFetch(`${auth.rootUrl}/${providerRoute}/reset`, fetchArgs).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            );
        },
        /**
     * Will trigger an email to the requested account containing a link with the
     * token and tokenId that must be returned to the server using emailConfirm()
     * to activate the account.
     *
     * @memberof userPassProvider
     * @instance
     * @param {String} email the requested email for the account
     * @param {String} password the requested password for the account
     * @returns {Promise}
     */ register: (email, password)=>{
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                email: email,
                password: password
            }));
            fetchArgs.cors = true;
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            return doFetch(`${auth.rootUrl}/${providerRoute}/register`, fetchArgs).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            );
        }
    };
}
/**
 * @private
 * @namespace
 */ function $2859ed2d1ef64fb6$var$apiKeyProvider(auth) {
    // The ternary expression here is redundant but is just preserving previous behavior based on whether or not
    // the client is for the admin or client API.
    const loginRoute = auth.isAppClient() ? 'providers/api-key/login' : 'providers/api-key/login';
    return {
        /**
     * Login to a stitch application using an api key
     *
     * @memberof apiKeyProvider
     * @instance
     * @param {String} key the key for authentication
     * @returns {Promise} a promise that resolves when authentication succeeds.
     */ authenticate: (key, link)=>{
            const deviceId = auth.getDeviceId();
            const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                key: key,
                options: {
                    device: device
                }
            }));
            fetchArgs.cors = true;
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            return doFetch($2859ed2d1ef64fb6$var$urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link)).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            ).then((json)=>auth.set(json, $2859ed2d1ef64fb6$export$55a72882668e67f5)
            );
        }
    };
}
// The state we generate is to be used for any kind of request where we will
// complete an authentication flow via a redirect. We store the generate in
// a local storage bound to the app's origin. This ensures that any time we
// receive a redirect, there must be a state parameter and it must match
// what we ourselves have generated. This state MUST only be sent to
// a trusted Stitch endpoint in order to preserve its integrity. Stitch will
// store it in some way on its origin (currently a cookie stored on this client)
// and use that state at the end of an auth flow as a parameter in the redirect URI.
const $2859ed2d1ef64fb6$var$alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
function $2859ed2d1ef64fb6$var$generateState() {
    let state = '';
    for(let i = 0; i < 64; ++i)state += $2859ed2d1ef64fb6$var$alpha.charAt(Math.floor(Math.random() * $2859ed2d1ef64fb6$var$alpha.length));
    return state;
}
function $2859ed2d1ef64fb6$var$getOAuthLoginURL(auth, providerName, redirectUrl) {
    if (redirectUrl === undefined) redirectUrl = auth.pageRootUrl();
    const state = $2859ed2d1ef64fb6$var$generateState();
    return auth.storage.set($99eab7d63bb19b88$export$b56c47f66926ce06, state).then(()=>auth.getDeviceId()
    ).then((deviceId)=>{
        const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);
        const result = `${auth.rootUrl}/providers/oauth2-${providerName}/login?redirect=${encodeURI(redirectUrl)}&state=${state}&device=${$e75cbf5bfa03336a$export$eb8b1f60ba4589aa(device)}`;
        return result;
    });
}
/**
 * @private
 * @namespace
 */ function $2859ed2d1ef64fb6$var$googleProvider(auth) {
    const loginRoute = auth.isAppClient() ? 'providers/oauth2-google/login' : 'providers/oauth2-google/login';
    return {
        /**
     * Login to a stitch application using google authentication
     *
     * @memberof googleProvider
     * @instance
     * @param {Object} data the redirectUrl data to use for authentication
     * @returns {Promise} a promise that resolves when authentication succeeds.
     */ authenticate: (data, link)=>{
            let { authCode: authCode  } = data;
            if (authCode) {
                const deviceId = auth.getDeviceId();
                const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);
                const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                    authCode: authCode,
                    options: {
                        device: device
                    }
                }));
                const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
                return doFetch($2859ed2d1ef64fb6$var$urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link)).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
                ).then((json)=>auth.set(json, $2859ed2d1ef64fb6$export$62be50743fab570)
                );
            }
            const redirectUrl = data && data.redirectUrl ? data.redirectUrl : undefined;
            return auth.storage.set($99eab7d63bb19b88$export$b932e4f5204468ed, $2859ed2d1ef64fb6$export$62be50743fab570).then(()=>$2859ed2d1ef64fb6$var$getOAuthLoginURL(auth, $2859ed2d1ef64fb6$export$62be50743fab570, redirectUrl)
            ).then((res)=>window.location.replace(res)
            );
        }
    };
}
/**
 * @private
 * @namespace
 */ function $2859ed2d1ef64fb6$var$facebookProvider(auth) {
    const loginRoute = auth.isAppClient() ? 'providers/oauth2-facebook/login' : 'providers/oauth2-facebook/login';
    return {
        /**
     * Login to a stitch application using facebook authentication
     *
     * @memberof facebookProvider
     * @instance
     * @param {Object} data the redirectUrl data to use for authentication
     * @returns {Promise} a promise that resolves when authentication succeeds.
     */ authenticate: (data, link)=>{
            let { accessToken: accessToken  } = data;
            if (accessToken) {
                const deviceId = auth.getDeviceId();
                const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);
                const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                    accessToken: accessToken,
                    options: {
                        device: device
                    }
                }));
                const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
                return doFetch($2859ed2d1ef64fb6$var$urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link), auth.fetchArgsWithLink(fetchArgs, link)).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
                ).then((json)=>auth.set(json, $2859ed2d1ef64fb6$export$43c1e19648991f7b)
                );
            }
            const redirectUrl = data && data.redirectUrl ? data.redirectUrl : undefined;
            return auth.storage.set($99eab7d63bb19b88$export$b932e4f5204468ed, $2859ed2d1ef64fb6$export$43c1e19648991f7b).then(()=>$2859ed2d1ef64fb6$var$getOAuthLoginURL(auth, $2859ed2d1ef64fb6$export$43c1e19648991f7b, redirectUrl)
            ).then((res)=>window.location.replace(res)
            );
        }
    };
}
/**
 * @private
 * @namespace
 */ function $2859ed2d1ef64fb6$var$mongodbCloudProvider(auth) {
    // The ternary expression here is redundant but is just preserving previous behavior based on whether or not
    // the client is for the admin or client API.
    const loginRoute = auth.isAppClient() ? 'providers/mongodb-cloud/login' : 'providers/mongodb-cloud/login';
    return {
        /**
     * Login to a stitch application using mongodb cloud authentication
     *
     * @memberof mongodbCloudProvider
     * @instance
     * @param {Object} data the username, apiKey, cors, and cookie data to use for authentication
     * @returns {Promise} a promise that resolves when authentication succeeds.
     */ authenticate: (data, link)=>{
            const { username: username , apiKey: apiKey , cors: cors , cookie: cookie  } = data;
            const options = Object.assign({
            }, {
                cors: true,
                cookie: false
            }, {
                cors: cors,
                cookie: cookie
            });
            const deviceId = auth.getDeviceId();
            const device = auth.getDeviceInfo(deviceId, !!auth.client && auth.client.clientAppID);
            const fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8('POST', JSON.stringify({
                username: username,
                apiKey: apiKey,
                options: {
                    device: device
                }
            }));
            fetchArgs.cors = true; // TODO: shouldn't this use the passed in `cors` value?
            fetchArgs.credentials = 'include';
            const doFetch = $2859ed2d1ef64fb6$export$47fdd40111eda34c();
            let url = $2859ed2d1ef64fb6$var$urlWithLinkParam(`${auth.rootUrl}/${loginRoute}`, link);
            if (options.cookie) return doFetch(url + '?cookie=true', fetchArgs).then($eadd389675610441$export$1c8f61c1db5300d2);
            return doFetch(url, auth.fetchArgsWithLink(fetchArgs, link)).then($eadd389675610441$export$1c8f61c1db5300d2).then((response)=>response.json()
            ).then((json)=>auth.set(json, $2859ed2d1ef64fb6$export$a71df098a182ee3a)
            );
        }
    };
}
// TODO: support auth-specific options
function $2859ed2d1ef64fb6$export$814e607a4dbc5ea7(auth, options = {
}) {
    return {
        [$2859ed2d1ef64fb6$export$a79c91b221bb4dea]: $2859ed2d1ef64fb6$var$anonProvider(auth),
        [$2859ed2d1ef64fb6$export$55a72882668e67f5]: $2859ed2d1ef64fb6$var$apiKeyProvider(auth),
        [$2859ed2d1ef64fb6$export$62be50743fab570]: $2859ed2d1ef64fb6$var$googleProvider(auth),
        [$2859ed2d1ef64fb6$export$43c1e19648991f7b]: $2859ed2d1ef64fb6$var$facebookProvider(auth),
        [$2859ed2d1ef64fb6$export$a71df098a182ee3a]: $2859ed2d1ef64fb6$var$mongodbCloudProvider(auth),
        [$2859ed2d1ef64fb6$export$3b9f1faf0c9c41fb]: $2859ed2d1ef64fb6$var$userPassProvider(auth),
        [$2859ed2d1ef64fb6$export$e48f71866ac8652a]: $2859ed2d1ef64fb6$var$customProvider(auth)
    };
}





var $ba922556495d8a90$exports = {};
var $5322f236e08c1dc8$exports = {};
var $68ba5b48e62c8111$exports = {};
$68ba5b48e62c8111$exports = function detectOS(userAgentString) {
    var operatingSystems = [
        {
            name: 'iOS',
            rule: /iP(hone|od|ad)/
        },
        {
            name: 'Android OS',
            rule: /Android/
        },
        {
            name: 'BlackBerry OS',
            rule: /BlackBerry|BB10/
        },
        {
            name: 'Windows Mobile',
            rule: /IEMobile/
        },
        {
            name: 'Amazon OS',
            rule: /Kindle/
        },
        {
            name: 'Windows 3.11',
            rule: /Win16/
        },
        {
            name: 'Windows 95',
            rule: /(Windows 95)|(Win95)|(Windows_95)/
        },
        {
            name: 'Windows 98',
            rule: /(Windows 98)|(Win98)/
        },
        {
            name: 'Windows 2000',
            rule: /(Windows NT 5.0)|(Windows 2000)/
        },
        {
            name: 'Windows XP',
            rule: /(Windows NT 5.1)|(Windows XP)/
        },
        {
            name: 'Windows Server 2003',
            rule: /(Windows NT 5.2)/
        },
        {
            name: 'Windows Vista',
            rule: /(Windows NT 6.0)/
        },
        {
            name: 'Windows 7',
            rule: /(Windows NT 6.1)/
        },
        {
            name: 'Windows 8',
            rule: /(Windows NT 6.2)/
        },
        {
            name: 'Windows 8.1',
            rule: /(Windows NT 6.3)/
        },
        {
            name: 'Windows 10',
            rule: /(Windows NT 10.0)/
        },
        {
            name: 'Windows ME',
            rule: /Windows ME/
        },
        {
            name: 'Open BSD',
            rule: /OpenBSD/
        },
        {
            name: 'Sun OS',
            rule: /SunOS/
        },
        {
            name: 'Linux',
            rule: /(Linux)|(X11)/
        },
        {
            name: 'Mac OS',
            rule: /(Mac_PowerPC)|(Macintosh)/
        },
        {
            name: 'QNX',
            rule: /QNX/
        },
        {
            name: 'BeOS',
            rule: /BeOS/
        },
        {
            name: 'OS/2',
            rule: /OS\/2/
        },
        {
            name: 'Search Bot',
            rule: /(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/
        }
    ];
    var detected = operatingSystems.filter(function(os) {
        if (userAgentString.match(os.rule)) return true;
    });
    return detected && detected[0] ? detected[0].name : null;
};


$5322f236e08c1dc8$exports = function detectBrowser(userAgentString) {
    if (!userAgentString) return null;
    var browsers = [
        [
            'edge',
            /Edge\/([0-9\._]+)/
        ],
        [
            'yandexbrowser',
            /YaBrowser\/([0-9\._]+)/
        ],
        [
            'vivaldi',
            /Vivaldi\/([0-9\.]+)/
        ],
        [
            'kakaotalk',
            /KAKAOTALK\s([0-9\.]+)/
        ],
        [
            'chrome',
            /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
        ],
        [
            'phantomjs',
            /PhantomJS\/([0-9\.]+)(:?\s|$)/
        ],
        [
            'crios',
            /CriOS\/([0-9\.]+)(:?\s|$)/
        ],
        [
            'firefox',
            /Firefox\/([0-9\.]+)(?:\s|$)/
        ],
        [
            'fxios',
            /FxiOS\/([0-9\.]+)/
        ],
        [
            'opera',
            /Opera\/([0-9\.]+)(?:\s|$)/
        ],
        [
            'opera',
            /OPR\/([0-9\.]+)(:?\s|$)$/
        ],
        [
            'ie',
            /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/
        ],
        [
            'ie',
            /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/
        ],
        [
            'ie',
            /MSIE\s(7\.0)/
        ],
        [
            'bb10',
            /BB10;\sTouch.*Version\/([0-9\.]+)/
        ],
        [
            'android',
            /Android\s([0-9\.]+)/
        ],
        [
            'ios',
            /Version\/([0-9\._]+).*Mobile.*Safari.*/
        ],
        [
            'safari',
            /Version\/([0-9\._]+).*Safari/
        ]
    ];
    return browsers.map(function(rule) {
        if (rule[1].test(userAgentString)) {
            var match = rule[1].exec(userAgentString);
            var version = match && match[1].split(/[._]/).slice(0, 3);
            if (version && version.length < 3) Array.prototype.push.apply(version, version.length == 1 ? [
                0,
                0
            ] : [
                0
            ]);
            return {
                name: rule[0],
                version: version.join('.'),
                os: $68ba5b48e62c8111$exports(userAgentString)
            };
        }
    }).filter(Boolean).shift();
};


var $ba922556495d8a90$var$agent;
if (typeof navigator !== 'undefined' && navigator) $ba922556495d8a90$var$agent = navigator.userAgent;
$ba922556495d8a90$exports = $5322f236e08c1dc8$exports($ba922556495d8a90$var$agent);


var $0a4415d04996d009$exports = {};
'use strict';
var $693b9b62bd8a160c$exports = {};
var $80909589c76906e7$exports = {};
/**
 * The code was extracted from:
 * https://github.com/davidchambers/Base64.js
 */ var $80909589c76906e7$var$chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
function $80909589c76906e7$var$InvalidCharacterError(message) {
    this.message = message;
}
$80909589c76906e7$var$InvalidCharacterError.prototype = new Error();
$80909589c76906e7$var$InvalidCharacterError.prototype.name = 'InvalidCharacterError';
function $80909589c76906e7$var$polyfill(input) {
    var str = String(input).replace(/=+$/, '');
    if (str.length % 4 == 1) throw new $80909589c76906e7$var$InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
    for(// initialize result and counters
    var bc = 0, bs, buffer, idx = 0, output = ''; // get next character
    buffer = str.charAt(idx++); // character found in table? initialize bit storage and add its ascii value;
    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,
    // convert the first 8 bits to one ascii character
    (bc++) % 4) && (output += String.fromCharCode(255 & bs >> (-2 * bc & 6))))// try to find character in table (0-63, not found => -1)
    buffer = $80909589c76906e7$var$chars.indexOf(buffer);
    return output;
}
$80909589c76906e7$exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || $80909589c76906e7$var$polyfill;


function $693b9b62bd8a160c$var$b64DecodeUnicode(str) {
    return decodeURIComponent($80909589c76906e7$exports(str).replace(/(.)/g, function(m, p) {
        var code = p.charCodeAt(0).toString(16).toUpperCase();
        if (code.length < 2) code = '0' + code;
        return '%' + code;
    }));
}
$693b9b62bd8a160c$exports = function(str) {
    var output = str.replace(/-/g, "+").replace(/_/g, "/");
    switch(output.length % 4){
        case 0:
            break;
        case 2:
            output += "==";
            break;
        case 3:
            output += "=";
            break;
        default:
            throw "Illegal base64url string!";
    }
    try {
        return $693b9b62bd8a160c$var$b64DecodeUnicode(output);
    } catch (err) {
        return $80909589c76906e7$exports(output);
    }
};


function $0a4415d04996d009$var$InvalidTokenError(message) {
    this.message = message;
}
$0a4415d04996d009$var$InvalidTokenError.prototype = new Error();
$0a4415d04996d009$var$InvalidTokenError.prototype.name = 'InvalidTokenError';
$0a4415d04996d009$exports = function(token, options) {
    if (typeof token !== 'string') throw new $0a4415d04996d009$var$InvalidTokenError('Invalid token specified');
    options = options || {
    };
    var pos = options.header === true ? 0 : 1;
    try {
        return JSON.parse($693b9b62bd8a160c$exports(token.split('.')[pos]));
    } catch (e) {
        throw new $0a4415d04996d009$var$InvalidTokenError('Invalid token specified: ' + e.message);
    }
};
$0a4415d04996d009$exports.InvalidTokenError = $0a4415d04996d009$var$InvalidTokenError;


const $bec6eb1921ac4121$var$EMBEDDED_USER_AUTH_DATA_PARTS = 4;
class $bec6eb1921ac4121$export$a4b63a972049ab97 {
    constructor(){
        throw new $5acc442337fa3693$export$92aa0aa8f60e5a4f('Auth can only be made from the AuthFactory.create function');
    }
    static create(client1, rootUrl1, options1) {
        return $bec6eb1921ac4121$export$2294c375cbb7cefa(client1, rootUrl1, options1);
    }
}
function $bec6eb1921ac4121$export$2294c375cbb7cefa(client, rootUrl, options) {
    let auth = Object.create($bec6eb1921ac4121$export$334c29725a78c21d.prototype);
    let namespace;
    if (!client || client.clientAppID === '') namespace = 'admin';
    else namespace = `client.${client.clientAppID}`;
    options = Object.assign({
        codec: $99eab7d63bb19b88$export$ef2912c5a4434709,
        namespace: namespace,
        storageType: 'localStorage'
    }, options);
    auth.client = client;
    auth.rootUrl = rootUrl;
    auth.codec = options.codec;
    auth.requestOrigin = options.requestOrigin;
    auth.platform = options.platform || $ba922556495d8a90$exports;
    auth.storage = $553257b34cc1550b$export$d184a47a971dd4b9(options);
    auth.providers = $2859ed2d1ef64fb6$export$814e607a4dbc5ea7(auth, options);
    return Promise.all([
        auth._get(),
        auth.storage.get($99eab7d63bb19b88$export$b315e18d7776b217),
        auth.storage.get($99eab7d63bb19b88$export$f7ebad5035fb5d3a),
        auth.storage.get($99eab7d63bb19b88$export$27679e29a5d747dd)
    ]).then(([authObj, rt, loggedInProviderType, deviceId])=>{
        auth.auth = authObj;
        auth.authedId = authObj.userId;
        auth.rt = rt;
        auth.loggedInProviderType = loggedInProviderType;
        auth.deviceId = deviceId;
        return auth;
    });
}
class $bec6eb1921ac4121$export$334c29725a78c21d {
    constructor(client, rootUrl, options){
        throw new $5acc442337fa3693$export$92aa0aa8f60e5a4f('Auth can only be made from the AuthFactory.create function');
    }
    /**
   * Create the device info for this client.
   *
   * @private
   * @memberof module:auth
   * @method getDeviceInfo
   * @param {String} appId The app ID for this client
   * @param {String} appVersion The version of the app
   * @returns {Object} The device info object
   */ getDeviceInfo(deviceId, appId, appVersion = '') {
        const deviceInfo = {
            appId: appId,
            appVersion: appVersion,
            sdkVersion: $eadd389675610441$export$31499a9cd224b78c
        };
        if (deviceId) deviceInfo.deviceId = deviceId;
        if (this.platform) {
            deviceInfo.platform = this.platform.name;
            deviceInfo.platformVersion = this.platform.version;
        }
        return deviceInfo;
    }
    provider(name) {
        if (!this.providers.hasOwnProperty(name)) throw new Error('Invalid auth provider specified: ' + name);
        return this.providers[name];
    }
    refreshToken() {
        return this.client.doSessionPost().then((json)=>this.set(json)
        );
    }
    pageRootUrl() {
        return [
            window.location.protocol,
            '//',
            window.location.host,
            window.location.pathname
        ].join('');
    }
    error() {
        return this._error;
    }
    isAppClient() {
        if (!this.client) return true; // Handle the case where Auth is constructed with null
        return this.client.type === $eadd389675610441$export$347e6d9936c9829;
    }
    handleRedirect() {
        if (typeof window === 'undefined') // This means we're running in some environment other
        // than a browser - so handling a redirect makes no sense here.
        return;
        if (!window.location || !window.location.hash) return;
        return Promise.all([
            this.storage.get($99eab7d63bb19b88$export$b56c47f66926ce06),
            this.storage.get($99eab7d63bb19b88$export$b932e4f5204468ed)
        ]).then(([ourState, redirectProvider])=>{
            let redirectFragment = window.location.hash.substring(1);
            const redirectState = this.parseRedirectFragment(redirectFragment, ourState);
            if (redirectState.lastError || redirectState.found && !redirectProvider) {
                console.error(`StitchClient: error from redirect: ${redirectState.lastError ? redirectState.lastError : 'provider type not set'}`);
                this._error = redirectState.lastError;
                window.history.replaceState(null, '', this.pageRootUrl());
                return Promise.reject();
            }
            if (!redirectState.found) return Promise.reject();
            return Promise.all([
                this.storage.remove($99eab7d63bb19b88$export$b56c47f66926ce06),
                this.storage.remove($99eab7d63bb19b88$export$b932e4f5204468ed)
            ]).then(()=>({
                    redirectState: redirectState,
                    redirectProvider: redirectProvider
                })
            );
        }).then(({ redirectState: redirectState , redirectProvider: redirectProvider  })=>{
            if (!redirectState.stateValid) {
                console.error('StitchClient: state values did not match!');
                window.history.replaceState(null, '', this.pageRootUrl());
                return;
            }
            if (!redirectState.ua) {
                console.error('StitchClient: no UA value was returned from redirect!');
                return;
            }
            // If we get here, the state is valid - set auth appropriately.
            return this.set(redirectState.ua, redirectProvider);
        }).then(()=>window.history.replaceState(null, '', this.pageRootUrl())
        ).catch((error)=>{
            if (error) throw error;
        });
    }
    getCookie(name1) {
        let splitCookies = document.cookie.split(' ');
        for(let i = 0; i < splitCookies.length; i++){
            let cookie = splitCookies[i];
            let sepIdx = cookie.indexOf('=');
            let cookieName = cookie.substring(0, sepIdx);
            if (cookieName === name1) {
                let cookieVal = cookie.substring(sepIdx + 1, cookie.length);
                if (cookieVal[cookieVal.length - 1] === ';') return cookieVal.substring(0, cookieVal.length - 1);
                return cookieVal;
            }
        }
    }
    handleCookie() {
        if (typeof window === 'undefined' || typeof document === 'undefined') // This means we're running in some environment other
        // than a browser - so handling a cookie makes no sense here.
        return;
        if (!document.cookie) return;
        let uaCookie = this.getCookie($99eab7d63bb19b88$export$98dc88e4299e0f63);
        if (!uaCookie) return;
        document.cookie = `${$99eab7d63bb19b88$export$98dc88e4299e0f63}=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT;`;
        const userAuth = this.unmarshallUserAuth(uaCookie);
        return this.set(userAuth, $2859ed2d1ef64fb6$export$a71df098a182ee3a).then(()=>window.history.replaceState(null, '', this.pageRootUrl())
        );
    }
    clear() {
        this.auth = null;
        this.authedId = null;
        this.rt = null;
        this.loggedInProviderType = null;
        return Promise.all([
            this.storage.remove($99eab7d63bb19b88$export$6ad5149ddc5975aa),
            this.storage.remove($99eab7d63bb19b88$export$b315e18d7776b217),
            this.storage.remove($99eab7d63bb19b88$export$f7ebad5035fb5d3a),
            this.storage.remove($99eab7d63bb19b88$export$b932e4f5204468ed)
        ]);
    }
    getDeviceId() {
        return this.deviceId;
    }
    // Returns whether or not the access token is expired or is going to expire within 'withinSeconds'
    // seconds, according to current system time. Returns false if the token is malformed in any way.
    isAccessTokenExpired(withinSeconds = $99eab7d63bb19b88$export$a0144ec7f076612d) {
        const token = this.getAccessToken();
        if (!token) return false;
        let decodedToken;
        try {
            decodedToken = $0a4415d04996d009$exports(token);
        } catch (e) {
            return false;
        }
        if (!decodedToken) return false;
        return decodedToken.exp && Math.floor(Date.now() / 1000) >= decodedToken.exp - withinSeconds;
    }
    getAccessToken() {
        return this.auth.accessToken;
    }
    getRefreshToken() {
        return this.rt;
    }
    set(json, authType = '') {
        if (!json) return;
        let newUserAuth = {
        };
        let setters = [];
        if (authType) {
            this.loggedInProviderType = authType;
            setters.push(this.storage.set($99eab7d63bb19b88$export$f7ebad5035fb5d3a, authType));
        }
        if (json[this.codec.refreshToken]) {
            this.rt = json[this.codec.refreshToken];
            delete json[this.codec.refreshToken];
            setters.push(this.storage.set($99eab7d63bb19b88$export$b315e18d7776b217, this.rt));
        }
        if (json[this.codec.deviceId]) {
            this.deviceId = json[this.codec.deviceId];
            delete json[this.codec.deviceId];
            setters.push(this.storage.set($99eab7d63bb19b88$export$27679e29a5d747dd, this.deviceId));
        }
        // Merge in new fields with old fields. Typically the first json value
        // is complete with every field inside a user auth, but subsequent requests
        // do not include everything. This merging behavior is safe so long as json
        // value responses with absent fields do not indicate that the field should
        // be unset.
        if (json[this.codec.accessToken]) newUserAuth.accessToken = json[this.codec.accessToken];
        if (json[this.codec.userId]) newUserAuth.userId = json[this.codec.userId];
        this.auth = Object.assign(this.auth ? this.auth : {
        }, newUserAuth);
        this.authedId = this.auth.userId;
        setters.push(this.storage.set($99eab7d63bb19b88$export$6ad5149ddc5975aa, JSON.stringify(this.auth)));
        return Promise.all(setters).then(()=>this.auth
        );
    }
    _get() {
        return this.storage.get($99eab7d63bb19b88$export$6ad5149ddc5975aa).then((data)=>{
            if (!data) return {
            };
            try {
                return JSON.parse(data);
            } catch (e) {
                // Need to back out and clear auth otherwise we will never
                // be able to do anything useful.
                return this.clear().then(()=>{
                    throw new $5acc442337fa3693$export$92aa0aa8f60e5a4f('Failure retrieving stored auth');
                });
            }
        });
    }
    getLoggedInProviderType() {
        return this.loggedInProviderType;
    }
    parseRedirectFragment(fragment, ourState) {
        // After being redirected from oauth, the URL will look like:
        // https://todo.examples.stitch.mongodb.com/#_baas_state=...&_baas_ua=...
        // This function parses out stitch-specific tokens from the fragment and
        // builds an object describing the result.
        const vars = fragment.split('&');
        const result = {
            ua: null,
            found: false,
            stateValid: false,
            lastError: null
        };
        let shouldBreak = false;
        for(let i = 0; i < vars.length && !shouldBreak; ++i){
            const pairParts = vars[i].split('=');
            const pairKey = decodeURIComponent(pairParts[0]);
            switch(pairKey){
                case $99eab7d63bb19b88$export$95c7c81c07ded128:
                    result.lastError = decodeURIComponent(pairParts[1]);
                    result.found = true;
                    shouldBreak = true;
                    break;
                case $99eab7d63bb19b88$export$6ad5149ddc5975aa:
                    try {
                        result.ua = this.unmarshallUserAuth(decodeURIComponent(pairParts[1]));
                        result.found = true;
                    } catch (e) {
                        result.lastError = e;
                    }
                    continue;
                case $99eab7d63bb19b88$export$1e66525f78624edb:
                    result.found = true;
                    continue;
                case $99eab7d63bb19b88$export$b56c47f66926ce06:
                    result.found = true;
                    let theirState = decodeURIComponent(pairParts[1]);
                    if (ourState && ourState === theirState) result.stateValid = true;
                    continue;
                default:
                    continue;
            }
        }
        return result;
    }
    unmarshallUserAuth(data) {
        let parts = data.split('$');
        if (parts.length !== $bec6eb1921ac4121$var$EMBEDDED_USER_AUTH_DATA_PARTS) throw new RangeError('invalid user auth data provided: ' + data);
        return {
            [this.codec.accessToken]: parts[0],
            [this.codec.refreshToken]: parts[1],
            [this.codec.userId]: parts[2],
            [this.codec.deviceId]: parts[3]
        };
    }
    fetchArgsWithLink(fetchArgs, link) {
        if (link) fetchArgs.headers.Authorization = `Bearer ${this.getAccessToken()}`;
        return fetchArgs;
    }
}





/**
 * Convenience wrapper around AWS S3 service (not meant to be instantiated directly,
 * use `.service('aws-s3', '<service-name>')` on a {@link StitchClient} instance).
 *
 * @class
 * @return {S3Service} a S3Service instance.
 */ class $5d30424beef3cf62$var$S3Service {
    constructor(stitchClient, serviceName){
        this.client = stitchClient;
        this.serviceName = serviceName;
    }
    /**
   * Put an object to S3 via Stitch. For small uploads
   *
   * @param {String} bucket which S3 bucket to use
   * @param {String} key which key (filename) to use
   * @param {String} acl which policy to apply
   * @param {String} contentType content type of uploaded data
   * @param {String|BSON.Binary} body the content to put in the bucket
   * @return {Promise} which resolves to an object containing a single field "location"
   *                   which is the URL of the object that was put into the S3 bucket
   */ put(bucket, key, acl, contentType, body) {
        return $e75cbf5bfa03336a$export$f0b7529ba755d680(this, {
            action: 'put',
            args: {
                bucket: bucket,
                key: key,
                acl: acl,
                contentType: contentType,
                body: body
            }
        });
    }
    /**
   * Sign a policy for putting via Stitch. For large uploads
   *
   * @param {String} bucket which S3 bucket to use
   * @param {String} key which key (filename) to use
   * @param {String} acl which policy to apply
   * @param {String} contentType content type of uploaded data
   * @return {Promise}
   */ signPolicy(bucket1, key1, acl1, contentType1) {
        return $e75cbf5bfa03336a$export$f0b7529ba755d680(this, {
            action: 'signPolicy',
            args: {
                bucket: bucket1,
                key: key1,
                acl: acl1,
                contentType: contentType1
            }
        });
    }
}
var $5d30424beef3cf62$export$2e2bcd8739ae039 = $5d30424beef3cf62$var$S3Service;



/**
 * Convenience wrapper around AWS SES service (not meant to be instantiated directly,
 * use `.service('aws-ses', '<service-name>')` on a {@link StitchClient} instance).
 *
 * @class
 * @return {SESService} a SESService instance.
 */ class $1b910509c10de867$var$SESService {
    constructor(stitchClient, serviceName){
        this.client = stitchClient;
        this.serviceName = serviceName;
    }
    /**
   * Send an email
   *
   * @method
   * @param {String} fromAddress the email to send from
   * @param {String} toAddress the email to send to
   * @param {String} subject the subject of the email
   * @param {String} body the body of the email
   * @return {Promise} resolving to an object which contains the single string field
   *                   "messageId", which is the SES message ID for the email message.
   */ send(fromAddress, toAddress, subject, body) {
        return $e75cbf5bfa03336a$export$f0b7529ba755d680(this, {
            action: 'send',
            args: {
                fromAddress: fromAddress,
                toAddress: toAddress,
                subject: subject,
                body: body
            }
        });
    }
}
var $1b910509c10de867$export$2e2bcd8739ae039 = $1b910509c10de867$var$SESService;



/**
 * Convenience wrapper for HTTP service (not meant to be instantiated directly,
 * use `.service('http', '<service-name>')` on a {@link StitchClient} instance).
 *
 * @class
 * @return {HTTPService} a HTTPService instance.
 */ class $833ca2ed2482f93c$var$HTTPService {
    constructor(client, serviceName){
        this.client = client;
        this.serviceName = serviceName;
    }
    /**
   * Send a GET request to a resource (result must be application/json)
   *
   * @param {String|Object} urlOrOptions the url to request, or an object of GET args
   * @param {Object} [options] optional settings for the GET operation
   * @param {String} [options.authUrl] url that grants a cookie
   * @return {Promise}
   */ get(urlOrOptions6, options6 = {
    }) {
        return $833ca2ed2482f93c$var$buildResponse('get', this, $833ca2ed2482f93c$var$buildArgs(urlOrOptions6, options6));
    }
    /**
   * Send a POST request to a resource with payload
   *
   * @param {String|Object} urlOrOptions the url to request, or an object of POST args
   * @param {Object} [options] optional settings for the POST operation
   * @param {String} [options.authUrl] url that grants a cookie
   * @return {Promise}
   */ post(urlOrOptions1, options1 = {
    }) {
        return $833ca2ed2482f93c$var$buildResponse('post', this, $833ca2ed2482f93c$var$buildArgs(urlOrOptions1, options1));
    }
    /**
   * Send a PUT request to a resource with payload
   *
   * @param {String|Object} urlOrOptions the url to request, or an object of PUT args
   * @param {Object} [options] optional settings for the PUT operation
   * @param {String} [options.authUrl] url that grants a cookie
   * @return {Promise}
   */ put(urlOrOptions2, options2 = {
    }) {
        return $833ca2ed2482f93c$var$buildResponse('put', this, $833ca2ed2482f93c$var$buildArgs(urlOrOptions2, options2));
    }
    /**
   * Send a PATCH request to a resource with payload
   *
   * @param {String|Object} urlOrOptions the url to request, or an object of PATCH args
   * @param {Object} [options] optional settings for the PATCH operation
   * @param {String} [options.authUrl] url that grants a cookie
   * @return {Promise}
   */ patch(urlOrOptions3, options3 = {
    }) {
        return $833ca2ed2482f93c$var$buildResponse('patch', this, $833ca2ed2482f93c$var$buildArgs(urlOrOptions3, options3));
    }
    /**
   * Send a DELETE request to a resource
   *
   * @param {String|Object} urlOrOptions the url to request, or an object of DELETE args
   * @param {Object} [options] optional settings for the DELETE operation
   * @param {String} [options.authUrl] url that grants a cookie
   * @return {Promise}
   */ delete(urlOrOptions4, options4 = {
    }) {
        return $833ca2ed2482f93c$var$buildResponse('delete', this, $833ca2ed2482f93c$var$buildArgs(urlOrOptions4, options4));
    }
    /**
   * Send a HEAD request to a resource
   *
   * @param {String|Object} urlOrOptions the url to request, or an object of HEAD args
   * @param {Object} [options] optional settings for the HEAD operation
   * @param {String} [options.authUrl] url that grants a cookie
   * @return {Promise}
   */ head(urlOrOptions5, options5 = {
    }) {
        return $833ca2ed2482f93c$var$buildResponse('head', this, $833ca2ed2482f93c$var$buildArgs(urlOrOptions5, options5));
    }
}
function $833ca2ed2482f93c$var$buildArgs(urlOrOptions, options) {
    let args;
    if (typeof urlOrOptions !== 'string') args = urlOrOptions;
    else {
        args = {
            url: urlOrOptions
        };
        if (!!options.authUrl) args.authUrl = options.authUrl;
    }
    return args;
}
function $833ca2ed2482f93c$var$buildResponse(action, service, args) {
    return $e75cbf5bfa03336a$export$f0b7529ba755d680(service, {
        action: action,
        args: args
    });
}
var $833ca2ed2482f93c$export$2e2bcd8739ae039 = $833ca2ed2482f93c$var$HTTPService;



/**
 * Creates a new Collection instance (not meant to be instantiated directly,
 * use `.collection()` on a {@link DB} instance).
 *
 * @class
 * @return {Collection} a Collection instance.
 */ class $5babea4b359b42fe$var$Collection {
    /**
   * @hideconstructor
   */ constructor(db, name){
        this.db = db;
        this.name = name;
    }
    /**
   * Inserts a single document.
   *
   * @method
   * @param {Object} doc The document to insert.
   * @return {Promise<Object, Error>} a Promise for the operation.
   */ insertOne(doc) {
        const args = {
            document: doc
        };
        return $5babea4b359b42fe$var$buildResponse('insertOne', this, $5babea4b359b42fe$var$buildArgs(this, args));
    }
    /**
   * Inserts multiple documents.
   *
   * @method
   * @param {Array} docs The documents to insert.
   * @return {Promise<Object, Error>} Returns a Promise for the operation.
   */ insertMany(docs) {
        const args = {
            documents: Array.isArray(docs) ? docs : [
                docs
            ]
        };
        return $5babea4b359b42fe$var$buildResponse('insertMany', this, $5babea4b359b42fe$var$buildArgs(this, args));
    }
    /**
   * Deletes a single document.
   *
   * @method
   * @param {Object} query The query used to match a single document.
   * @return {Promise<Object, Error>} Returns a Promise for the operation.
   */ deleteOne(query7) {
        return $5babea4b359b42fe$var$buildResponse('deleteOne', this, $5babea4b359b42fe$var$buildArgs(this, {
            query: query7
        }));
    }
    /**
   * Deletes all documents matching query.
   *
   * @method
   * @param {Object} query The query used to match the documents to delete.
   * @return {Promise<Object, Error>} Returns a Promise for the operation.
   */ deleteMany(query1) {
        return $5babea4b359b42fe$var$buildResponse('deleteMany', this, $5babea4b359b42fe$var$buildArgs(this, {
            query: query1
        }));
    }
    /**
   * Updates a single document.
   *
   * @method
   * @param {Object} query The query used to match a single document.
   * @param {Object} update The update operations to perform on the matching document.
   * @param {Object} [options] Additional options object.
   * @param {Boolean} [options.upsert=false] Perform an upsert operation.
   * @return {Promise<Object, Error>} A Promise for the operation.
   */ updateOne(query2, update2, options2 = {
    }) {
        return $5babea4b359b42fe$var$updateOp(this, false, query2, update2, options2);
    }
    /**
   * Updates multiple documents.
   *
   * @method
   * @param {Object} query The query used to match the documents.
   * @param {Object} update The update operations to perform on the matching documents.
   * @param {Object} [options] Additional options object.
   * @param {Boolean} [options.upsert=false] Perform an upsert operation.
   * @return {Promise<Object, Error>} Returns a Promise for the operation.
   */ updateMany(query3, update1) {
        return $5babea4b359b42fe$var$updateOp(this, true, query3, update1);
    }
    /**
   * Finds documents.
   *
   * @method
   * @param {Object} query The query used to match documents.
   * @param {Object} [project] The query document projection.
   * @return {MongoQuery} An object which allows for `limit` and `sort` parameters to be set.
   * `execute` will return a {Promise} for the operation.
   */ find(query4, project2) {
        return new $5babea4b359b42fe$var$MongoQuery(this, query4, project2);
    }
    /**
   * Finds one document.
   *
   * @method
   * @param {Object} query The query used to match documents.
   * @param {Object} [project] The query document projection.
   * @return {Promise<Object, Error>} Returns a Promise for the operation
   */ findOne(query5, project1) {
        return $5babea4b359b42fe$var$buildResponse('findOne', this, $5babea4b359b42fe$var$buildArgs(this, {
            query: query5,
            project: project1
        }));
    }
    /**
   * Executes an aggregation pipeline.
   *
   * @param {Array} pipeline The aggregation pipeline.
   * @returns {Array} The results of the aggregation.
   */ aggregate(pipeline1) {
        return $5babea4b359b42fe$var$aggregateOp(this, pipeline1);
    }
    /**
   * Gets the number of documents matching the filter.
   *
   * @param {Object} query The query used to match documents.
   * @param {Object} options Additional count options.
   * @param {Number} [options.limit=null] The maximum number of documents to return.
   * @return {Number} The results of the count operation.
   */ count(query6, options1 = {
    }) {
        let outgoingOptions;
        if (options1.limit) outgoingOptions = {
            limit: options1.limit
        };
        return $5babea4b359b42fe$var$buildResponse('count', this, $5babea4b359b42fe$var$buildArgs(this, {
            count: true,
            query: query6
        }, outgoingOptions));
    }
}
// private
function $5babea4b359b42fe$var$updateOp(service, isMulti, query, update, options = {
}) {
    const action = isMulti ? 'updateMany' : 'updateOne';
    let outgoingOptions;
    if (!isMulti && options.upsert) outgoingOptions = {
        upsert: true
    };
    return $5babea4b359b42fe$var$buildResponse(action, service, $5babea4b359b42fe$var$buildArgs(service, {
        query: query,
        update: update
    }, outgoingOptions));
}
function $5babea4b359b42fe$var$findOp({ service: service , query: query , project: project , limit: limit , sort: sort  }) {
    return $5babea4b359b42fe$var$buildResponse('find', service, $5babea4b359b42fe$var$buildArgs(service, {
        query: query,
        project: project,
        limit: limit,
        sort: sort
    }));
}
function $5babea4b359b42fe$var$aggregateOp(service, pipeline) {
    return $5babea4b359b42fe$var$buildResponse('aggregate', service, $5babea4b359b42fe$var$buildArgs(service, {
        pipeline: pipeline
    }));
}
function $5babea4b359b42fe$var$buildArgs({ db: { name: database  } , name: collection  }, args, options = {
}) {
    return Object.assign({
        database: database,
        collection: collection
    }, args, options);
}
function $5babea4b359b42fe$var$buildResponse(action, service, args) {
    return $e75cbf5bfa03336a$export$f0b7529ba755d680(service.db, {
        serviceName: service.db.service,
        action: action,
        args: args
    });
}
// mongo query (find) support
function $5babea4b359b42fe$var$MongoQuery(service, query, project) {
    if (this instanceof $5babea4b359b42fe$var$MongoQuery) {
        this.service = service;
        this.query = query;
        this.project = project;
        return this;
    }
    return new $5babea4b359b42fe$var$MongoQuery(service, query, project);
}
$5babea4b359b42fe$var$MongoQuery.prototype.limit = function(limit) {
    this.limit = limit;
    return this;
};
$5babea4b359b42fe$var$MongoQuery.prototype.sort = function(sort) {
    this.sort = sort;
    return this;
};
$5babea4b359b42fe$var$MongoQuery.prototype.execute = function(resolve) {
    return $5babea4b359b42fe$var$findOp(this);
};
var $5babea4b359b42fe$export$2e2bcd8739ae039 = $5babea4b359b42fe$var$Collection;


/**
 * Creates a new DB instance (not meant to be instantiated directly, use `.db()` on
 * a {@link MongoDBService} instance).
 * @class
 * @return {DB} a DB instance.
 */ class $70b888c28d917dbb$var$DB {
    /**
   * @hideconstructor
   */ constructor(client, service, name){
        this.client = client;
        this.service = service;
        this.name = name;
    }
    /**
   * Returns a Collection instance representing a MongoDB Collection object.
   *
   * @method
   * @param {String} name The collection name.
   * @param {Object} [options] Additional options.
   * @return {Collection} returns a Collection instance representing a MongoDb collection.
   */ collection(name1, options = {
    }) {
        return new $5babea4b359b42fe$export$2e2bcd8739ae039(this, name1, options);
    }
}
var $70b888c28d917dbb$export$2e2bcd8739ae039 = $70b888c28d917dbb$var$DB;


/**
 * Creates a new MongoDBService instance (not meant to be instantiated directly, use
 * `.service('mongodb', '<service-name>')` on a {@link StitchClient} instance.
 *
 * @class
 * @return {MongoDBService} a MongoDBService instance.
 */ class $146faf86babd876a$var$MongoDBService {
    /**
   * @hideconstructor
   */ constructor(stitchClient, serviceName){
        this.stitchClient = stitchClient;
        this.serviceName = serviceName;
    }
    /**
   * Get a DB instance
   *
   * @method
   * @param {String} databaseName The MongoDB database name
   * @param {Object} [options] Additional options.
   * @return {DB} returns a DB instance representing a MongoDB database.
   */ db(databaseName, options = {
    }) {
        return new $70b888c28d917dbb$export$2e2bcd8739ae039(this.stitchClient, this.serviceName, databaseName);
    }
}
var $146faf86babd876a$export$2e2bcd8739ae039 = $146faf86babd876a$var$MongoDBService;



/**
 * Create a new TwilioService instance (not meant to be instantiated directly,
 * use `.service('twilio', '<service-name>')` on a {@link StitchClient} instance).
 *
 * @class
 * @return {TwilioService} a TwilioService instance.
 */ class $f4b7eecbac497259$var$TwilioService {
    constructor(stitchClient, serviceName){
        this.client = stitchClient;
        this.serviceName = serviceName;
    }
    /**
   * Send a text message to a number
   *
   * @method
   * @param {String} from number to send from
   * @param {String} to number to send to
   * @param {String} body SMS body content
   * @return {Promise} which resolves to 'null' when message is sent successfully,
   *                   or is rejected when there is an error
   */ send(from, to, body) {
        return $e75cbf5bfa03336a$export$f0b7529ba755d680(this, {
            action: 'send',
            args: {
                from: from,
                to: to,
                body: body
            }
        });
    }
}
var $f4b7eecbac497259$export$2e2bcd8739ae039 = $f4b7eecbac497259$var$TwilioService;


var $93d1449ecf1cf6a9$export$2e2bcd8739ae039 = {
    'aws-s3': $5d30424beef3cf62$export$2e2bcd8739ae039,
    'aws-ses': $1b910509c10de867$export$2e2bcd8739ae039,
    'aws_s3': $5d30424beef3cf62$export$2e2bcd8739ae039,
    'aws_ses': $1b910509c10de867$export$2e2bcd8739ae039,
    'http': $833ca2ed2482f93c$export$2e2bcd8739ae039,
    'mongodb': $146faf86babd876a$export$2e2bcd8739ae039,
    'twilio': $f4b7eecbac497259$export$2e2bcd8739ae039
};



var $868bb48821d209c4$exports = {};

$parcel$export($868bb48821d209c4$exports, "BSONError", () => $868bb48821d209c4$export$dcd4c628d4081c37, (v) => $868bb48821d209c4$export$dcd4c628d4081c37 = v);
$parcel$export($868bb48821d209c4$exports, "BSONTypeError", () => $868bb48821d209c4$export$5f4690e5e32707d3, (v) => $868bb48821d209c4$export$5f4690e5e32707d3 = v);
$parcel$export($868bb48821d209c4$exports, "UUID", () => $868bb48821d209c4$export$bc35efed93511c4b, (v) => $868bb48821d209c4$export$bc35efed93511c4b = v);
$parcel$export($868bb48821d209c4$exports, "Binary", () => $868bb48821d209c4$export$dbada097a9bd1de9, (v) => $868bb48821d209c4$export$dbada097a9bd1de9 = v);
$parcel$export($868bb48821d209c4$exports, "Code", () => $868bb48821d209c4$export$52f0f02147b12c03, (v) => $868bb48821d209c4$export$52f0f02147b12c03 = v);
$parcel$export($868bb48821d209c4$exports, "DBRef", () => $868bb48821d209c4$export$90e456a500235b9, (v) => $868bb48821d209c4$export$90e456a500235b9 = v);
$parcel$export($868bb48821d209c4$exports, "Long", () => $868bb48821d209c4$export$12ac1d26449d9c2e, (v) => $868bb48821d209c4$export$12ac1d26449d9c2e = v);
$parcel$export($868bb48821d209c4$exports, "Decimal128", () => $868bb48821d209c4$export$39efe8a3f1c2d4eb, (v) => $868bb48821d209c4$export$39efe8a3f1c2d4eb = v);
$parcel$export($868bb48821d209c4$exports, "Double", () => $868bb48821d209c4$export$340e583a64e26663, (v) => $868bb48821d209c4$export$340e583a64e26663 = v);
$parcel$export($868bb48821d209c4$exports, "Int32", () => $868bb48821d209c4$export$493726e231866ac3, (v) => $868bb48821d209c4$export$493726e231866ac3 = v);
$parcel$export($868bb48821d209c4$exports, "MaxKey", () => $868bb48821d209c4$export$d380297cb28b8de0, (v) => $868bb48821d209c4$export$d380297cb28b8de0 = v);
$parcel$export($868bb48821d209c4$exports, "MinKey", () => $868bb48821d209c4$export$aa9d11358976b3cc, (v) => $868bb48821d209c4$export$aa9d11358976b3cc = v);
$parcel$export($868bb48821d209c4$exports, "ObjectID", () => $868bb48821d209c4$export$e68967d37d049767, (v) => $868bb48821d209c4$export$e68967d37d049767 = v);
$parcel$export($868bb48821d209c4$exports, "BSONRegExp", () => $868bb48821d209c4$export$f7fea3e08dc99c1d, (v) => $868bb48821d209c4$export$f7fea3e08dc99c1d = v);
$parcel$export($868bb48821d209c4$exports, "BSONSymbol", () => $868bb48821d209c4$export$8251e971c2f12361, (v) => $868bb48821d209c4$export$8251e971c2f12361 = v);
$parcel$export($868bb48821d209c4$exports, "LongWithoutOverridesClass", () => $868bb48821d209c4$export$d76d2ce407344c9c, (v) => $868bb48821d209c4$export$d76d2ce407344c9c = v);
$parcel$export($868bb48821d209c4$exports, "Timestamp", () => $868bb48821d209c4$export$d9bcbd5e1ff81430, (v) => $868bb48821d209c4$export$d9bcbd5e1ff81430 = v);
$parcel$export($868bb48821d209c4$exports, "EJSON", () => $868bb48821d209c4$export$88f9200ef2b97bb5, (v) => $868bb48821d209c4$export$88f9200ef2b97bb5 = v);
$parcel$export($868bb48821d209c4$exports, "Map", () => $868bb48821d209c4$export$a5c7b93649eaf8f8, (v) => $868bb48821d209c4$export$a5c7b93649eaf8f8 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_INT32_MAX", () => $868bb48821d209c4$export$af352521c8649ed7, (v) => $868bb48821d209c4$export$af352521c8649ed7 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_INT32_MIN", () => $868bb48821d209c4$export$250fc463de59e142, (v) => $868bb48821d209c4$export$250fc463de59e142 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_INT64_MAX", () => $868bb48821d209c4$export$327cb7fa26f74edd, (v) => $868bb48821d209c4$export$327cb7fa26f74edd = v);
$parcel$export($868bb48821d209c4$exports, "BSON_INT64_MIN", () => $868bb48821d209c4$export$4a86b4076bf575d, (v) => $868bb48821d209c4$export$4a86b4076bf575d = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_NUMBER", () => $868bb48821d209c4$export$8a26a5fd67132695, (v) => $868bb48821d209c4$export$8a26a5fd67132695 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_STRING", () => $868bb48821d209c4$export$2ce63c0cc3c9284, (v) => $868bb48821d209c4$export$2ce63c0cc3c9284 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_OBJECT", () => $868bb48821d209c4$export$5a91d81c75e64abe, (v) => $868bb48821d209c4$export$5a91d81c75e64abe = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_ARRAY", () => $868bb48821d209c4$export$a158b7540a414b0, (v) => $868bb48821d209c4$export$a158b7540a414b0 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_BINARY", () => $868bb48821d209c4$export$a6d049d73c03641, (v) => $868bb48821d209c4$export$a6d049d73c03641 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_UNDEFINED", () => $868bb48821d209c4$export$d4e0c9abd56073d0, (v) => $868bb48821d209c4$export$d4e0c9abd56073d0 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_OID", () => $868bb48821d209c4$export$9c296bef3f2e3a80, (v) => $868bb48821d209c4$export$9c296bef3f2e3a80 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_BOOLEAN", () => $868bb48821d209c4$export$ddfe5b18c2cb4c61, (v) => $868bb48821d209c4$export$ddfe5b18c2cb4c61 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_DATE", () => $868bb48821d209c4$export$ff98a022f476c9f6, (v) => $868bb48821d209c4$export$ff98a022f476c9f6 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_NULL", () => $868bb48821d209c4$export$a9d27ecf911c8e2d, (v) => $868bb48821d209c4$export$a9d27ecf911c8e2d = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_REGEXP", () => $868bb48821d209c4$export$73020e19fe1a5dcb, (v) => $868bb48821d209c4$export$73020e19fe1a5dcb = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_DBPOINTER", () => $868bb48821d209c4$export$e22680776caf5882, (v) => $868bb48821d209c4$export$e22680776caf5882 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_CODE", () => $868bb48821d209c4$export$4d96c08829372834, (v) => $868bb48821d209c4$export$4d96c08829372834 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_SYMBOL", () => $868bb48821d209c4$export$d18896fc584f464b, (v) => $868bb48821d209c4$export$d18896fc584f464b = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_CODE_W_SCOPE", () => $868bb48821d209c4$export$959338844bb54803, (v) => $868bb48821d209c4$export$959338844bb54803 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_INT", () => $868bb48821d209c4$export$6b19edc38baa1a8c, (v) => $868bb48821d209c4$export$6b19edc38baa1a8c = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_TIMESTAMP", () => $868bb48821d209c4$export$86ca409d085d6fb2, (v) => $868bb48821d209c4$export$86ca409d085d6fb2 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_LONG", () => $868bb48821d209c4$export$c07849652d011312, (v) => $868bb48821d209c4$export$c07849652d011312 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_DECIMAL128", () => $868bb48821d209c4$export$cde5e2a4f8adcb68, (v) => $868bb48821d209c4$export$cde5e2a4f8adcb68 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_MIN_KEY", () => $868bb48821d209c4$export$988fa02d40535509, (v) => $868bb48821d209c4$export$988fa02d40535509 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_DATA_MAX_KEY", () => $868bb48821d209c4$export$42679d8c82a5a5a0, (v) => $868bb48821d209c4$export$42679d8c82a5a5a0 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_BINARY_SUBTYPE_DEFAULT", () => $868bb48821d209c4$export$f0f029beb8f8c664, (v) => $868bb48821d209c4$export$f0f029beb8f8c664 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_BINARY_SUBTYPE_FUNCTION", () => $868bb48821d209c4$export$de4f3e691990aafd, (v) => $868bb48821d209c4$export$de4f3e691990aafd = v);
$parcel$export($868bb48821d209c4$exports, "BSON_BINARY_SUBTYPE_BYTE_ARRAY", () => $868bb48821d209c4$export$48d3f182699ad59, (v) => $868bb48821d209c4$export$48d3f182699ad59 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_BINARY_SUBTYPE_UUID", () => $868bb48821d209c4$export$35df332a732975a2, (v) => $868bb48821d209c4$export$35df332a732975a2 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_BINARY_SUBTYPE_UUID_NEW", () => $868bb48821d209c4$export$17bbee584f46fa68, (v) => $868bb48821d209c4$export$17bbee584f46fa68 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_BINARY_SUBTYPE_MD5", () => $868bb48821d209c4$export$3480b2b0e04d2c71, (v) => $868bb48821d209c4$export$3480b2b0e04d2c71 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_BINARY_SUBTYPE_ENCRYPTED", () => $868bb48821d209c4$export$2d0bb20574033770, (v) => $868bb48821d209c4$export$2d0bb20574033770 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_BINARY_SUBTYPE_COLUMN", () => $868bb48821d209c4$export$4de8045685e588e4, (v) => $868bb48821d209c4$export$4de8045685e588e4 = v);
$parcel$export($868bb48821d209c4$exports, "BSON_BINARY_SUBTYPE_USER_DEFINED", () => $868bb48821d209c4$export$ae7a7cdb3769db69, (v) => $868bb48821d209c4$export$ae7a7cdb3769db69 = v);
$parcel$export($868bb48821d209c4$exports, "setInternalBufferSize", () => $868bb48821d209c4$export$da02f1c3bf0006e3, (v) => $868bb48821d209c4$export$da02f1c3bf0006e3 = v);
$parcel$export($868bb48821d209c4$exports, "serialize", () => $868bb48821d209c4$export$dfdc1655ccc5b9cb, (v) => $868bb48821d209c4$export$dfdc1655ccc5b9cb = v);
$parcel$export($868bb48821d209c4$exports, "serializeWithBufferAndIndex", () => $868bb48821d209c4$export$b6fb208a7f4c2b5b, (v) => $868bb48821d209c4$export$b6fb208a7f4c2b5b = v);
$parcel$export($868bb48821d209c4$exports, "deserialize", () => $868bb48821d209c4$export$efcd34ab6248d3cd, (v) => $868bb48821d209c4$export$efcd34ab6248d3cd = v);
$parcel$export($868bb48821d209c4$exports, "calculateObjectSize", () => $868bb48821d209c4$export$fd38f60ee2e3ec4b, (v) => $868bb48821d209c4$export$fd38f60ee2e3ec4b = v);
$parcel$export($868bb48821d209c4$exports, "deserializeStream", () => $868bb48821d209c4$export$3f552121051cff1b, (v) => $868bb48821d209c4$export$3f552121051cff1b = v);
$parcel$export($868bb48821d209c4$exports, "default", () => $868bb48821d209c4$export$2e2bcd8739ae039, (v) => $868bb48821d209c4$export$2e2bcd8739ae039 = v);
$parcel$export($868bb48821d209c4$exports, "ObjectId", () => $868bb48821d209c4$export$e68967d37d049767, (v) => $868bb48821d209c4$export$e68967d37d049767 = v);
function $868bb48821d209c4$var$createCommonjsModule(fn, module) {
    return module = {
        exports: {
        }
    }, fn(module, module.exports), module.exports;
}
var $868bb48821d209c4$var$byteLength_1 = $868bb48821d209c4$var$byteLength;
var $868bb48821d209c4$var$toByteArray_1 = $868bb48821d209c4$var$toByteArray;
var $868bb48821d209c4$var$fromByteArray_1 = $868bb48821d209c4$var$fromByteArray;
var $868bb48821d209c4$var$lookup = [];
var $868bb48821d209c4$var$revLookup = [];
var $868bb48821d209c4$var$Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var $868bb48821d209c4$var$code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var $868bb48821d209c4$var$i = 0, $868bb48821d209c4$var$len = $868bb48821d209c4$var$code.length; $868bb48821d209c4$var$i < $868bb48821d209c4$var$len; ++$868bb48821d209c4$var$i){
    $868bb48821d209c4$var$lookup[$868bb48821d209c4$var$i] = $868bb48821d209c4$var$code[$868bb48821d209c4$var$i];
    $868bb48821d209c4$var$revLookup[$868bb48821d209c4$var$code.charCodeAt($868bb48821d209c4$var$i)] = $868bb48821d209c4$var$i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$868bb48821d209c4$var$revLookup['-'.charCodeAt(0)] = 62;
$868bb48821d209c4$var$revLookup['_'.charCodeAt(0)] = 63;
function $868bb48821d209c4$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
     // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
} // base64 is 4/3 + up to two characters of the original data
function $868bb48821d209c4$var$byteLength(b64) {
    var lens = $868bb48821d209c4$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $868bb48821d209c4$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $868bb48821d209c4$var$toByteArray(b64) {
    var tmp;
    var lens = $868bb48821d209c4$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $868bb48821d209c4$var$Arr($868bb48821d209c4$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $868bb48821d209c4$var$revLookup[b64.charCodeAt(i)] << 18 | $868bb48821d209c4$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $868bb48821d209c4$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $868bb48821d209c4$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = $868bb48821d209c4$var$revLookup[b64.charCodeAt(i)] << 2 | $868bb48821d209c4$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = $868bb48821d209c4$var$revLookup[b64.charCodeAt(i)] << 10 | $868bb48821d209c4$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $868bb48821d209c4$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function $868bb48821d209c4$var$tripletToBase64(num) {
    return $868bb48821d209c4$var$lookup[num >> 18 & 63] + $868bb48821d209c4$var$lookup[num >> 12 & 63] + $868bb48821d209c4$var$lookup[num >> 6 & 63] + $868bb48821d209c4$var$lookup[num & 63];
}
function $868bb48821d209c4$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
        output.push($868bb48821d209c4$var$tripletToBase64(tmp));
    }
    return output.join('');
}
function $868bb48821d209c4$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($868bb48821d209c4$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
     // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($868bb48821d209c4$var$lookup[tmp >> 2] + $868bb48821d209c4$var$lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($868bb48821d209c4$var$lookup[tmp >> 10] + $868bb48821d209c4$var$lookup[tmp >> 4 & 63] + $868bb48821d209c4$var$lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}
var $868bb48821d209c4$var$base64Js = {
    byteLength: $868bb48821d209c4$var$byteLength_1,
    toByteArray: $868bb48821d209c4$var$toByteArray_1,
    fromByteArray: $868bb48821d209c4$var$fromByteArray_1
};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $868bb48821d209c4$var$read = function read(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
var $868bb48821d209c4$var$write = function write(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};
var $868bb48821d209c4$var$ieee754 = {
    read: $868bb48821d209c4$var$read,
    write: $868bb48821d209c4$var$write
};
var $868bb48821d209c4$var$buffer$1 = $868bb48821d209c4$var$createCommonjsModule(function(module, exports) {
    var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
     : null;
    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function typedArraySupport() {
        // Can typed array instances can be augmented?
        try {
            var arr = new Uint8Array(1);
            var proto = {
                foo: function foo() {
                    return 42;
                }
            };
            Object.setPrototypeOf(proto, Uint8Array.prototype);
            Object.setPrototypeOf(arr, proto);
            return arr.foo() === 42;
        } catch (e) {
            return false;
        }
    }
    Object.defineProperty(Buffer.prototype, 'parent', {
        enumerable: true,
        get: function get() {
            if (!Buffer.isBuffer(this)) return undefined;
            return this.buffer;
        }
    });
    Object.defineProperty(Buffer.prototype, 'offset', {
        enumerable: true,
        get: function get() {
            if (!Buffer.isBuffer(this)) return undefined;
            return this.byteOffset;
        }
    });
    function createBuffer(length) {
        if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
         // Return an augmented `Uint8Array` instance
        var buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer.prototype);
        return buf;
    }
    /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */ function Buffer(arg, encodingOrOffset, length) {
        // Common case.
        if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
            return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
    }
    Buffer.poolSize = 8192; // not used by this implementation
    function from(value, encodingOrOffset, length) {
        if (typeof value === 'string') return fromString(value, encodingOrOffset);
        if (ArrayBuffer.isView(value)) return fromArrayView(value);
        if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + babelHelpers["typeof"](value));
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
        if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
        if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
        var valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
        var b = fromObject(value);
        if (b) return b;
        if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + babelHelpers["typeof"](value));
    }
    /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/ Buffer.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
    }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer, Uint8Array);
    function assertSize(size) {
        if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
        else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
    function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) return createBuffer(size);
        if (fill !== undefined) // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpreted as a start offset.
        return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        return createBuffer(size);
    }
    /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/ Buffer.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */ Buffer.allocUnsafe = function(size) {
        return allocUnsafe(size);
    };
    /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */ Buffer.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
    };
    function fromString(string, encoding) {
        if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
        if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        var length = byteLength1(string, encoding) | 0;
        var buf = createBuffer(length);
        var actual = buf.write(string, encoding);
        if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual);
        return buf;
    }
    function fromArrayLike(array) {
        var length = array.length < 0 ? 0 : checked(array.length) | 0;
        var buf = createBuffer(length);
        for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
        return buf;
    }
    function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
            var copy = new Uint8Array(arrayView);
            return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
        if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
        var buf;
        if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
        else if (length === undefined) buf = new Uint8Array(array, byteOffset);
        else buf = new Uint8Array(array, byteOffset, length);
         // Return an augmented `Uint8Array` instance
        Object.setPrototypeOf(buf, Buffer.prototype);
        return buf;
    }
    function fromObject(obj) {
        if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0;
            var buf = createBuffer(len);
            if (buf.length === 0) return buf;
            obj.copy(buf, 0, 0, len);
            return buf;
        }
        if (obj.length !== undefined) {
            if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
            return fromArrayLike(obj);
        }
        if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
    }
    function checked(length) {
        // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
        // length is NaN (which is otherwise coerced to zero.)
        if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
        return length | 0;
    }
    function SlowBuffer(length) {
        if (+length != length) // eslint-disable-line eqeqeq
        length = 0;
        return Buffer.alloc(+length);
    }
    Buffer.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
    };
    Buffer.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        if (a === b) return 0;
        var x = a.length;
        var y = b.length;
        for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
    };
    Buffer.isEncoding = function isEncoding(encoding) {
        switch(String(encoding).toLowerCase()){
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return true;
            default:
                return false;
        }
    };
    Buffer.concat = function concat(list, length) {
        if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (list.length === 0) return Buffer.alloc(0);
        var i;
        if (length === undefined) {
            length = 0;
            for(i = 0; i < list.length; ++i)length += list[i].length;
        }
        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;
        for(i = 0; i < list.length; ++i){
            var buf = list[i];
            if (isInstance(buf, Uint8Array)) {
                if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
                else Uint8Array.prototype.set.call(buffer, buf, pos);
            } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
            else buf.copy(buffer, pos);
            pos += buf.length;
        }
        return buffer;
    };
    function byteLength1(string, encoding) {
        if (Buffer.isBuffer(string)) return string.length;
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
        if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + babelHelpers["typeof"](string));
        var len = string.length;
        var mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion
        var loweredCase = false;
        for(;;)switch(encoding){
            case 'ascii':
            case 'latin1':
            case 'binary':
                return len;
            case 'utf8':
            case 'utf-8':
                return utf8ToBytes(string).length;
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return len * 2;
            case 'hex':
                return len >>> 1;
            case 'base64':
                return base64ToBytes(string).length;
            default:
                if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
        }
    }
    Buffer.byteLength = byteLength1;
    function slowToString(encoding, start, end) {
        var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
        // property of a typed array.
        // This behaves neither like String nor Uint8Array in that we set start/end
        // to their upper/lower bounds if the value passed is out of range.
        // undefined is handled specially as per ECMA-262 6th Edition,
        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
        if (start === undefined || start < 0) start = 0;
         // Return early if start > this.length. Done here to prevent potential uint32
        // coercion fail below.
        if (start > this.length) return '';
        if (end === undefined || end > this.length) end = this.length;
        if (end <= 0) return '';
         // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
        end >>>= 0;
        start >>>= 0;
        if (end <= start) return '';
        if (!encoding) encoding = 'utf8';
        while(true)switch(encoding){
            case 'hex':
                return hexSlice(this, start, end);
            case 'utf8':
            case 'utf-8':
                return utf8Slice(this, start, end);
            case 'ascii':
                return asciiSlice(this, start, end);
            case 'latin1':
            case 'binary':
                return latin1Slice(this, start, end);
            case 'base64':
                return base64Slice(this, start, end);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return utf16leSlice(this, start, end);
            default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = (encoding + '').toLowerCase();
                loweredCase = true;
        }
    } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true;
    function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
    }
    Buffer.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
        for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
        return this;
    };
    Buffer.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
        for(var i = 0; i < len; i += 4){
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
        }
        return this;
    };
    Buffer.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
        for(var i = 0; i < len; i += 8){
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
        }
        return this;
    };
    Buffer.prototype.toString = function toString() {
        var length = this.length;
        if (length === 0) return '';
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
    };
    Buffer.prototype.toLocaleString = Buffer.prototype.toString;
    Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
        if (this === b) return true;
        return Buffer.compare(this, b) === 0;
    };
    Buffer.prototype.inspect = function inspect() {
        var str = '';
        var max = exports.INSPECT_MAX_BYTES;
        str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
        if (this.length > max) str += ' ... ';
        return '<Buffer ' + str + '>';
    };
    if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
    Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
        if (!Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + babelHelpers["typeof"](target));
        if (start === undefined) start = 0;
        if (end === undefined) end = target ? target.length : 0;
        if (thisStart === undefined) thisStart = 0;
        if (thisEnd === undefined) thisEnd = this.length;
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
        if (thisStart >= thisEnd && start >= end) return 0;
        if (thisStart >= thisEnd) return -1;
        if (start >= end) return 1;
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
    }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        // Empty buffer means no match
        if (buffer.length === 0) return -1; // Normalize byteOffset
        if (typeof byteOffset === 'string') {
            encoding = byteOffset;
            byteOffset = 0;
        } else if (byteOffset > 2147483647) byteOffset = 2147483647;
        else if (byteOffset < -2147483648) byteOffset = -2147483648;
        byteOffset = +byteOffset; // Coerce to Number.
        if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : buffer.length - 1;
         // Normalize byteOffset: negative offsets start from the end of the buffer
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
            if (dir) return -1;
            else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;
            else return -1;
        } // Normalize val
        if (typeof val === 'string') val = Buffer.from(val, encoding);
         // Finally, search either indexOf (if dir is true) or lastIndexOf
        if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) return -1;
            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === 'number') {
            val = val & 255; // Search for a byte value [0-255]
            if (typeof Uint8Array.prototype.indexOf === 'function') {
                if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
            return arrayIndexOf(buffer, [
                val
            ], byteOffset, encoding, dir);
        }
        throw new TypeError('val must be string, number or Buffer');
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;
        if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();
            if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
                if (arr.length < 2 || val.length < 2) return -1;
                indexSize = 2;
                arrLength /= 2;
                valLength /= 2;
                byteOffset /= 2;
            }
        }
        function read(buf, i) {
            if (indexSize === 1) return buf[i];
            else return buf.readUInt16BE(i * indexSize);
        }
        var i1;
        if (dir) {
            var foundIndex = -1;
            for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
                if (foundIndex === -1) foundIndex = i1;
                if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
                if (foundIndex !== -1) i1 -= i1 - foundIndex;
                foundIndex = -1;
            }
        } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
            for(i1 = byteOffset; i1 >= 0; i1--){
                var found = true;
                for(var j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                    found = false;
                    break;
                }
                if (found) return i1;
            }
        }
        return -1;
    }
    Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (!length) length = remaining;
        else {
            length = Number(length);
            if (length > remaining) length = remaining;
        }
        var strLen = string.length;
        if (length > strLen / 2) length = strLen / 2;
        for(var i = 0; i < length; ++i){
            var parsed = parseInt(string.substr(i * 2, 2), 16);
            if (numberIsNaN(parsed)) return i;
            buf[offset + i] = parsed;
        }
        return i;
    }
    function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer.prototype.write = function write(string, offset, length, encoding) {
        // Buffer#write(string)
        if (offset === undefined) {
            encoding = 'utf8';
            length = this.length;
            offset = 0; // Buffer#write(string, encoding)
        } else if (length === undefined && typeof offset === 'string') {
            encoding = offset;
            length = this.length;
            offset = 0; // Buffer#write(string, offset[, length][, encoding])
        } else if (isFinite(offset)) {
            offset = offset >>> 0;
            if (isFinite(length)) {
                length = length >>> 0;
                if (encoding === undefined) encoding = 'utf8';
            } else {
                encoding = length;
                length = undefined;
            }
        } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
        var remaining = this.length - offset;
        if (length === undefined || length > remaining) length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
        if (!encoding) encoding = 'utf8';
        var loweredCase = false;
        for(;;)switch(encoding){
            case 'hex':
                return hexWrite(this, string, offset, length);
            case 'utf8':
            case 'utf-8':
                return utf8Write(this, string, offset, length);
            case 'ascii':
            case 'latin1':
            case 'binary':
                return asciiWrite(this, string, offset, length);
            case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return ucs2Write(this, string, offset, length);
            default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
        }
    };
    Buffer.prototype.toJSON = function toJSON() {
        return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
        };
    };
    function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) return $868bb48821d209c4$var$base64Js.fromByteArray(buf);
        else return $868bb48821d209c4$var$base64Js.fromByteArray(buf.slice(start, end));
    }
    function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];
        var i = start;
        while(i < end){
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
            if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint;
                switch(bytesPerSequence){
                    case 1:
                        if (firstByte < 128) codePoint = firstByte;
                        break;
                    case 2:
                        secondByte = buf[i + 1];
                        if ((secondByte & 192) === 128) {
                            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                            if (tempCodePoint > 127) codePoint = tempCodePoint;
                        }
                        break;
                    case 3:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];
                        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                        }
                        break;
                    case 4:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];
                        fourthByte = buf[i + 3];
                        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                            if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                        }
                }
            }
            if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 65533;
                bytesPerSequence = 1;
            } else if (codePoint > 65535) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 65536;
                res.push(codePoint >>> 10 & 1023 | 55296);
                codePoint = 56320 | codePoint & 1023;
            }
            res.push(codePoint);
            i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
    } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
         // Decode in chunks to avoid "call stack size exceeded".
        var res = '';
        var i = 0;
        while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        return res;
    }
    function asciiSlice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);
        for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
        return ret;
    }
    function latin1Slice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);
        for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
        return ret;
    }
    function hexSlice(buf, start, end) {
        var len = buf.length;
        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;
        var out = '';
        for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
        return out;
    }
    function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = ''; // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
        for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        return res;
    }
    Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = end === undefined ? len : ~~end;
        if (start < 0) {
            start += len;
            if (start < 0) start = 0;
        } else if (start > len) start = len;
        if (end < 0) {
            end += len;
            if (end < 0) end = 0;
        } else if (end > len) end = len;
        if (end < start) end = start;
        var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance
        Object.setPrototypeOf(newBuf, Buffer.prototype);
        return newBuf;
    };
    /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */ function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
        if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
    }
    Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
        return val;
    };
    Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var val = this[offset + --byteLength];
        var mul = 1;
        while(byteLength > 0 && (mul *= 256))val += this[offset + --byteLength] * mul;
        return val;
    };
    Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        return this[offset];
    };
    Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
    };
    Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
    };
    Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength);
        return val;
    };
    Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];
        while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength);
        return val;
    };
    Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128)) return this[offset];
        return (255 - this[offset] + 1) * -1;
    };
    Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
    };
    Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
    };
    Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return $868bb48821d209c4$var$ieee754.read(this, offset, true, 23, 4);
    };
    Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return $868bb48821d209c4$var$ieee754.read(this, offset, false, 23, 4);
    };
    Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return $868bb48821d209c4$var$ieee754.read(this, offset, true, 52, 8);
    };
    Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return $868bb48821d209c4$var$ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError('Index out of range');
    }
    Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = value & 255;
        while(++i < byteLength && (mul *= 256))this[offset + i] = value / mul & 255;
        return offset + byteLength;
    };
    Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = value & 255;
        while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
        return offset + byteLength;
    };
    Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
    };
    Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
    };
    Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
    };
    Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
    };
    Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
    };
    Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 255;
        while(++i < byteLength && (mul *= 256)){
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
            this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
    };
    Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 255;
        while(--i >= 0 && (mul *= 256)){
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
            this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
    };
    Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
        if (value < 0) value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
    };
    Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
    };
    Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
    };
    Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
    };
    Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0) value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
    };
    function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError('Index out of range');
        if (offset < 0) throw new RangeError('Index out of range');
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkIEEE754(buf, value, offset, 4);
        $868bb48821d209c4$var$ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
    }
    Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkIEEE754(buf, value, offset, 8);
        $868bb48821d209c4$var$ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
    }
    Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
    }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions
        if (targetStart < 0) throw new RangeError('targetStart out of bounds');
        if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
        if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) end = target.length - targetStart + start;
        var len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end);
        else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
        return len;
    }; // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill(val, start, end, encoding) {
        // Handle string cases:
        if (typeof val === 'string') {
            if (typeof start === 'string') {
                encoding = start;
                start = 0;
                end = this.length;
            } else if (typeof end === 'string') {
                encoding = end;
                end = this.length;
            }
            if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
            if (val.length === 1) {
                var code = val.charCodeAt(0);
                if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
                val = code;
            }
        } else if (typeof val === 'number') val = val & 255;
        else if (typeof val === 'boolean') val = Number(val);
         // Invalid ranges are not set to a default, so can range check early.
        if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
        if (end <= start) return this;
        start = start >>> 0;
        end = end === undefined ? this.length : end >>> 0;
        if (!val) val = 0;
        var i;
        if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
        else {
            var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
            var len = bytes.length;
            if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
            for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
        }
        return this;
    }; // HELPER FUNCTIONS
    // ================
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
        // Node takes equal signs as end of the Base64 encoding
        str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not
        str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''
        if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
        while(str.length % 4 !== 0)str = str + '=';
        return str;
    }
    function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];
        for(var i = 0; i < length; ++i){
            codePoint = string.charCodeAt(i); // is surrogate component
            if (codePoint > 55295 && codePoint < 57344) {
                // last char was a lead
                if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 56319) {
                        // unexpected trail
                        if ((units -= 3) > -1) bytes.push(239, 191, 189);
                        continue;
                    } else if (i + 1 === length) {
                        // unpaired lead
                        if ((units -= 3) > -1) bytes.push(239, 191, 189);
                        continue;
                    } // valid lead
                    leadSurrogate = codePoint;
                    continue;
                } // 2 leads in a row
                if (codePoint < 56320) {
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    leadSurrogate = codePoint;
                    continue;
                } // valid surrogate pair
                codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
            } else if (leadSurrogate) // valid bmp char, but last char was a lead
            {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
            }
            leadSurrogate = null; // encode utf8
            if (codePoint < 128) {
                if ((units -= 1) < 0) break;
                bytes.push(codePoint);
            } else if (codePoint < 2048) {
                if ((units -= 2) < 0) break;
                bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
            } else if (codePoint < 65536) {
                if ((units -= 3) < 0) break;
                bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
            } else if (codePoint < 1114112) {
                if ((units -= 4) < 0) break;
                bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
            } else throw new Error('Invalid code point');
        }
        return bytes;
    }
    function asciiToBytes(str) {
        var byteArray = [];
        for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 255);
        return byteArray;
    }
    function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];
        for(var i = 0; i < str.length; ++i){
            if ((units -= 2) < 0) break;
            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
        }
        return byteArray;
    }
    function base64ToBytes(str) {
        return $868bb48821d209c4$var$base64Js.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
        for(var i = 0; i < length; ++i){
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
        }
        return i;
    } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    // the `instanceof` check but they should be treated as of that type.
    // See: https://github.com/feross/buffer/issues/166
    function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
        // For IE11 support
        return obj !== obj; // eslint-disable-line no-self-compare
    } // Create lookup table for `toString('hex')`
    // See: https://github.com/feross/buffer/issues/219
    var hexSliceLookupTable = function() {
        var alphabet = '0123456789abcdef';
        var table = new Array(256);
        for(var i = 0; i < 16; ++i){
            var i16 = i * 16;
            for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
        }
        return table;
    }();
});
var $868bb48821d209c4$var$buffer_1 = $868bb48821d209c4$var$buffer$1.Buffer;
$868bb48821d209c4$var$buffer$1.SlowBuffer;
$868bb48821d209c4$var$buffer$1.INSPECT_MAX_BYTES;
$868bb48821d209c4$var$buffer$1.kMaxLength;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var $868bb48821d209c4$var$_extendStatics = function extendStatics(d1, b1) {
    $868bb48821d209c4$var$_extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return $868bb48821d209c4$var$_extendStatics(d1, b1);
};
function $868bb48821d209c4$var$__extends(d, b) {
    $868bb48821d209c4$var$_extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $868bb48821d209c4$var$_assign = function __assign() {
    $868bb48821d209c4$var$_assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $868bb48821d209c4$var$_assign.apply(this, arguments);
};
/** @public */ var $868bb48821d209c4$export$dcd4c628d4081c37 = function(_super) {
    $868bb48821d209c4$var$__extends(BSONError, _super);
    function BSONError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, BSONError.prototype);
        return _this;
    }
    Object.defineProperty(BSONError.prototype, "name", {
        get: function() {
            return 'BSONError';
        },
        enumerable: false,
        configurable: true
    });
    return BSONError;
}(Error);
/** @public */ var $868bb48821d209c4$export$5f4690e5e32707d3 = function(_super) {
    $868bb48821d209c4$var$__extends(BSONTypeError, _super);
    function BSONTypeError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, BSONTypeError.prototype);
        return _this;
    }
    Object.defineProperty(BSONTypeError.prototype, "name", {
        get: function() {
            return 'BSONTypeError';
        },
        enumerable: false,
        configurable: true
    });
    return BSONTypeError;
}(TypeError);
function $868bb48821d209c4$var$checkForMath(potentialGlobal) {
    // eslint-disable-next-line eqeqeq
    return potentialGlobal && potentialGlobal.Math == Math && potentialGlobal;
}
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
function $868bb48821d209c4$var$getGlobal() {
    // eslint-disable-next-line no-undef
    return $868bb48821d209c4$var$checkForMath(typeof globalThis === 'object' && globalThis) || $868bb48821d209c4$var$checkForMath(typeof window === 'object' && window) || $868bb48821d209c4$var$checkForMath(typeof self === 'object' && self) || $868bb48821d209c4$var$checkForMath(typeof $parcel$global === 'object' && $parcel$global) || Function('return this')();
}
/**
 * Normalizes our expected stringified form of a function across versions of node
 * @param fn - The function to stringify
 */ function $868bb48821d209c4$var$normalizedFunctionString(fn) {
    return fn.toString().replace('function(', 'function (');
}
function $868bb48821d209c4$var$isReactNative() {
    var g = $868bb48821d209c4$var$getGlobal();
    return typeof g.navigator === 'object' && g.navigator.product === 'ReactNative';
}
var $868bb48821d209c4$var$insecureRandomBytes = function insecureRandomBytes(size) {
    var insecureWarning = $868bb48821d209c4$var$isReactNative() ? 'BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.' : 'BSON: No cryptographic implementation for random bytes present, falling back to a less secure implementation.';
    console.warn(insecureWarning);
    var result = $868bb48821d209c4$var$buffer_1.alloc(size);
    for(var i = 0; i < size; ++i)result[i] = Math.floor(Math.random() * 256);
    return result;
};
parcelRequire.register("3vS5Y", function(module, exports) {

$parcel$export(module.exports, "randomBytes", () => $28ee3a9043a33f3e$export$5f828d93ff035aa8, (v) => $28ee3a9043a33f3e$export$5f828d93ff035aa8 = v);
var $28ee3a9043a33f3e$export$5f828d93ff035aa8;
var $28ee3a9043a33f3e$export$cd94982b18c6332c;
var $28ee3a9043a33f3e$export$1d518568e4f529b0;
var $28ee3a9043a33f3e$export$5285b6d41c912b41;
var $28ee3a9043a33f3e$export$2fb37efbf6ae0c0e;
var $28ee3a9043a33f3e$export$ab85ecd77ce6a5cd;
var $28ee3a9043a33f3e$export$da39cf97e1eb7c91;
var $28ee3a9043a33f3e$export$52a9039d7177394f;
var $28ee3a9043a33f3e$export$f7201db400317331;
var $28ee3a9043a33f3e$export$448fa22aedc9dbca;
var $28ee3a9043a33f3e$export$b80c7ba289c8fa56;
var $28ee3a9043a33f3e$export$26e5786e8ac8e530;
var $28ee3a9043a33f3e$export$bdd223f16383713e;
var $28ee3a9043a33f3e$export$20533d26f07f1ee0;
var $28ee3a9043a33f3e$export$2f64596b8cbf08b4;
var $28ee3a9043a33f3e$export$2ce6d8d0e8b04e1a;
var $28ee3a9043a33f3e$export$12ada9414fbc594c;
var $28ee3a9043a33f3e$export$f5e7e39d57cd9700;
var $28ee3a9043a33f3e$export$36b6d6ef312eab39;
var $28ee3a9043a33f3e$export$58a258485f1e49f6;
var $28ee3a9043a33f3e$export$dedd8dc3dc62b370;
var $28ee3a9043a33f3e$export$971862a2fcb1bb40;
var $28ee3a9043a33f3e$export$c6ff6a88acbeaf40;
var $28ee3a9043a33f3e$export$fdc27893e98845cc;
var $28ee3a9043a33f3e$export$6671fb9a1323bed;
var $28ee3a9043a33f3e$export$d74daf141a551db;
var $28ee3a9043a33f3e$export$45df7cae684751af;
var $28ee3a9043a33f3e$export$1db683ad541682f6;
var $28ee3a9043a33f3e$export$6f65485f87568e37;
var $28ee3a9043a33f3e$export$91a8e56769aeb334;
var $28ee3a9043a33f3e$export$2d4117e99c2179e4;
var $28ee3a9043a33f3e$export$512823e338ddb1b7;
var $28ee3a9043a33f3e$export$9d0e0c0c4a8d30f3;
var $28ee3a9043a33f3e$export$b9d55ff329113abd;
var $28ee3a9043a33f3e$export$7efb24e2fddf99b9;
var $28ee3a9043a33f3e$export$bb1abf2ce84fc7e8;
var $28ee3a9043a33f3e$export$2f7171e78e524d5e;
var $28ee3a9043a33f3e$export$e1d879b482f37d98;
var $28ee3a9043a33f3e$export$1a988e7317c65621;
'use strict';

$28ee3a9043a33f3e$export$5f828d93ff035aa8 = $28ee3a9043a33f3e$export$cd94982b18c6332c = $28ee3a9043a33f3e$export$1d518568e4f529b0 = $28ee3a9043a33f3e$export$5285b6d41c912b41 = (parcelRequire("lv4cL"));

$28ee3a9043a33f3e$export$2fb37efbf6ae0c0e = $28ee3a9043a33f3e$export$ab85ecd77ce6a5cd = (parcelRequire("2vuiV"));

$28ee3a9043a33f3e$export$da39cf97e1eb7c91 = $28ee3a9043a33f3e$export$52a9039d7177394f = (parcelRequire("2xoxV"));

var $ackXK = parcelRequire("ackXK");
var $28ee3a9043a33f3e$var$algoKeys = Object.keys($ackXK);
var $28ee3a9043a33f3e$var$hashes = [
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    'md5',
    'rmd160'
].concat($28ee3a9043a33f3e$var$algoKeys);
$28ee3a9043a33f3e$export$f7201db400317331 = function() {
    return $28ee3a9043a33f3e$var$hashes;
};

var $7EEeb = parcelRequire("7EEeb");
$28ee3a9043a33f3e$export$448fa22aedc9dbca = $7EEeb.pbkdf2;
$28ee3a9043a33f3e$export$b80c7ba289c8fa56 = $7EEeb.pbkdf2Sync;

var $iMeTF = parcelRequire("iMeTF");
$28ee3a9043a33f3e$export$26e5786e8ac8e530 = $iMeTF.Cipher;
$28ee3a9043a33f3e$export$bdd223f16383713e = $iMeTF.createCipher;
$28ee3a9043a33f3e$export$20533d26f07f1ee0 = $iMeTF.Cipheriv;
$28ee3a9043a33f3e$export$2f64596b8cbf08b4 = $iMeTF.createCipheriv;
$28ee3a9043a33f3e$export$2ce6d8d0e8b04e1a = $iMeTF.Decipher;
$28ee3a9043a33f3e$export$12ada9414fbc594c = $iMeTF.createDecipher;
$28ee3a9043a33f3e$export$f5e7e39d57cd9700 = $iMeTF.Decipheriv;
$28ee3a9043a33f3e$export$36b6d6ef312eab39 = $iMeTF.createDecipheriv;
$28ee3a9043a33f3e$export$58a258485f1e49f6 = $iMeTF.getCiphers;
$28ee3a9043a33f3e$export$dedd8dc3dc62b370 = $iMeTF.listCiphers;

var $aSoxx = parcelRequire("aSoxx");
$28ee3a9043a33f3e$export$971862a2fcb1bb40 = $aSoxx.DiffieHellmanGroup;
$28ee3a9043a33f3e$export$c6ff6a88acbeaf40 = $aSoxx.createDiffieHellmanGroup;
$28ee3a9043a33f3e$export$fdc27893e98845cc = $aSoxx.getDiffieHellman;
$28ee3a9043a33f3e$export$6671fb9a1323bed = $aSoxx.createDiffieHellman;
$28ee3a9043a33f3e$export$d74daf141a551db = $aSoxx.DiffieHellman;

var $kd2RE = parcelRequire("kd2RE");
$28ee3a9043a33f3e$export$45df7cae684751af = $kd2RE.createSign;
$28ee3a9043a33f3e$export$1db683ad541682f6 = $kd2RE.Sign;
$28ee3a9043a33f3e$export$6f65485f87568e37 = $kd2RE.createVerify;
$28ee3a9043a33f3e$export$91a8e56769aeb334 = $kd2RE.Verify;

$28ee3a9043a33f3e$export$2d4117e99c2179e4 = (parcelRequire("oINKX"));

var $fAfe3 = parcelRequire("fAfe3");
$28ee3a9043a33f3e$export$512823e338ddb1b7 = $fAfe3.publicEncrypt;
$28ee3a9043a33f3e$export$9d0e0c0c4a8d30f3 = $fAfe3.privateEncrypt;
$28ee3a9043a33f3e$export$b9d55ff329113abd = $fAfe3.publicDecrypt;
$28ee3a9043a33f3e$export$7efb24e2fddf99b9 = $fAfe3.privateDecrypt;

var $ghiGi = parcelRequire("ghiGi");
$28ee3a9043a33f3e$export$bb1abf2ce84fc7e8 = $ghiGi.randomFill;
$28ee3a9043a33f3e$export$2f7171e78e524d5e = $ghiGi.randomFillSync;
$28ee3a9043a33f3e$export$e1d879b482f37d98 = function() {
    throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
};
$28ee3a9043a33f3e$export$1a988e7317c65621 = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
};

});
parcelRequire.register("lv4cL", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
'use strict';
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var $fa6fc13db6d255f2$var$MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var $fa6fc13db6d255f2$var$MAX_UINT32 = 4294967295;
function $fa6fc13db6d255f2$var$oldBrowser() {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}

var $ahmAR = parcelRequire("ahmAR");
var $fa6fc13db6d255f2$require$Buffer = $ahmAR.Buffer;
var $fa6fc13db6d255f2$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
if ($fa6fc13db6d255f2$var$crypto && $fa6fc13db6d255f2$var$crypto.getRandomValues) module.exports = $fa6fc13db6d255f2$var$randomBytes;
else module.exports = $fa6fc13db6d255f2$var$oldBrowser;
function $fa6fc13db6d255f2$var$randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > $fa6fc13db6d255f2$var$MAX_UINT32) throw new RangeError('requested too many random bytes');
    var bytes = $fa6fc13db6d255f2$require$Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > $fa6fc13db6d255f2$var$MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += $fa6fc13db6d255f2$var$MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        $fa6fc13db6d255f2$var$crypto.getRandomValues(bytes.slice(generated, generated + $fa6fc13db6d255f2$var$MAX_BYTES));
        else $fa6fc13db6d255f2$var$crypto.getRandomValues(bytes);
    }
    if (typeof cb === 'function') return $7pjJT.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

});
parcelRequire.register("7pjJT", function(module, exports) {
// shim for using process in browser
var $564a2e041d00d413$var$process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $564a2e041d00d413$var$cachedSetTimeout;
var $564a2e041d00d413$var$cachedClearTimeout;
function $564a2e041d00d413$var$defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function $564a2e041d00d413$var$defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') $564a2e041d00d413$var$cachedSetTimeout = setTimeout;
        else $564a2e041d00d413$var$cachedSetTimeout = $564a2e041d00d413$var$defaultSetTimout;
    } catch (e) {
        $564a2e041d00d413$var$cachedSetTimeout = $564a2e041d00d413$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') $564a2e041d00d413$var$cachedClearTimeout = clearTimeout;
        else $564a2e041d00d413$var$cachedClearTimeout = $564a2e041d00d413$var$defaultClearTimeout;
    } catch (e1) {
        $564a2e041d00d413$var$cachedClearTimeout = $564a2e041d00d413$var$defaultClearTimeout;
    }
})();
function $564a2e041d00d413$var$runTimeout(fun) {
    if ($564a2e041d00d413$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($564a2e041d00d413$var$cachedSetTimeout === $564a2e041d00d413$var$defaultSetTimout || !$564a2e041d00d413$var$cachedSetTimeout) && setTimeout) {
        $564a2e041d00d413$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $564a2e041d00d413$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $564a2e041d00d413$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $564a2e041d00d413$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $564a2e041d00d413$var$runClearTimeout(marker) {
    if ($564a2e041d00d413$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($564a2e041d00d413$var$cachedClearTimeout === $564a2e041d00d413$var$defaultClearTimeout || !$564a2e041d00d413$var$cachedClearTimeout) && clearTimeout) {
        $564a2e041d00d413$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $564a2e041d00d413$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $564a2e041d00d413$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $564a2e041d00d413$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $564a2e041d00d413$var$queue = [];
var $564a2e041d00d413$var$draining = false;
var $564a2e041d00d413$var$currentQueue;
var $564a2e041d00d413$var$queueIndex = -1;
function $564a2e041d00d413$var$cleanUpNextTick() {
    if (!$564a2e041d00d413$var$draining || !$564a2e041d00d413$var$currentQueue) return;
    $564a2e041d00d413$var$draining = false;
    if ($564a2e041d00d413$var$currentQueue.length) $564a2e041d00d413$var$queue = $564a2e041d00d413$var$currentQueue.concat($564a2e041d00d413$var$queue);
    else $564a2e041d00d413$var$queueIndex = -1;
    if ($564a2e041d00d413$var$queue.length) $564a2e041d00d413$var$drainQueue();
}
function $564a2e041d00d413$var$drainQueue() {
    if ($564a2e041d00d413$var$draining) return;
    var timeout = $564a2e041d00d413$var$runTimeout($564a2e041d00d413$var$cleanUpNextTick);
    $564a2e041d00d413$var$draining = true;
    var len = $564a2e041d00d413$var$queue.length;
    while(len){
        $564a2e041d00d413$var$currentQueue = $564a2e041d00d413$var$queue;
        $564a2e041d00d413$var$queue = [];
        while(++$564a2e041d00d413$var$queueIndex < len)if ($564a2e041d00d413$var$currentQueue) $564a2e041d00d413$var$currentQueue[$564a2e041d00d413$var$queueIndex].run();
        $564a2e041d00d413$var$queueIndex = -1;
        len = $564a2e041d00d413$var$queue.length;
    }
    $564a2e041d00d413$var$currentQueue = null;
    $564a2e041d00d413$var$draining = false;
    $564a2e041d00d413$var$runClearTimeout(timeout);
}
$564a2e041d00d413$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $564a2e041d00d413$var$queue.push(new $564a2e041d00d413$var$Item(fun, args));
    if ($564a2e041d00d413$var$queue.length === 1 && !$564a2e041d00d413$var$draining) $564a2e041d00d413$var$runTimeout($564a2e041d00d413$var$drainQueue);
};
// v8 likes predictible objects
function $564a2e041d00d413$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$564a2e041d00d413$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$564a2e041d00d413$var$process.title = 'browser';
$564a2e041d00d413$var$process.browser = true;
$564a2e041d00d413$var$process.env = {
};
$564a2e041d00d413$var$process.argv = [];
$564a2e041d00d413$var$process.version = ''; // empty string to avoid regexp issues
$564a2e041d00d413$var$process.versions = {
};
function $564a2e041d00d413$var$noop() {
}
$564a2e041d00d413$var$process.on = $564a2e041d00d413$var$noop;
$564a2e041d00d413$var$process.addListener = $564a2e041d00d413$var$noop;
$564a2e041d00d413$var$process.once = $564a2e041d00d413$var$noop;
$564a2e041d00d413$var$process.off = $564a2e041d00d413$var$noop;
$564a2e041d00d413$var$process.removeListener = $564a2e041d00d413$var$noop;
$564a2e041d00d413$var$process.removeAllListeners = $564a2e041d00d413$var$noop;
$564a2e041d00d413$var$process.emit = $564a2e041d00d413$var$noop;
$564a2e041d00d413$var$process.prependListener = $564a2e041d00d413$var$noop;
$564a2e041d00d413$var$process.prependOnceListener = $564a2e041d00d413$var$noop;
$564a2e041d00d413$var$process.listeners = function(name) {
    return [];
};
$564a2e041d00d413$var$process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
$564a2e041d00d413$var$process.cwd = function() {
    return '/';
};
$564a2e041d00d413$var$process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
$564a2e041d00d413$var$process.umask = function() {
    return 0;
};

});

parcelRequire.register("ahmAR", function(module, exports) {

var $fV0m8 = parcelRequire("fV0m8");
var $77bd047f32915262$var$Buffer = $fV0m8.Buffer;
// alternative to using Object.keys for old browsers
function $77bd047f32915262$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($77bd047f32915262$var$Buffer.from && $77bd047f32915262$var$Buffer.alloc && $77bd047f32915262$var$Buffer.allocUnsafe && $77bd047f32915262$var$Buffer.allocUnsafeSlow) module.exports = $fV0m8;
else {
    // Copy properties from require('buffer')
    $77bd047f32915262$var$copyProps($fV0m8, module.exports);
    module.exports.Buffer = $77bd047f32915262$var$SafeBuffer;
}
function $77bd047f32915262$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $77bd047f32915262$var$Buffer(arg, encodingOrOffset, length);
}
$77bd047f32915262$var$SafeBuffer.prototype = Object.create($77bd047f32915262$var$Buffer.prototype);
// Copy static methods from Buffer
$77bd047f32915262$var$copyProps($77bd047f32915262$var$Buffer, $77bd047f32915262$var$SafeBuffer);
$77bd047f32915262$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return $77bd047f32915262$var$Buffer(arg, encodingOrOffset, length);
};
$77bd047f32915262$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = $77bd047f32915262$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$77bd047f32915262$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $77bd047f32915262$var$Buffer(size);
};
$77bd047f32915262$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $fV0m8.SlowBuffer(size);
};

});
parcelRequire.register("fV0m8", function(module, exports) {

$parcel$export(module.exports, "Buffer", () => $b96c7494de0ababe$export$a143d493d941bafc, (v) => $b96c7494de0ababe$export$a143d493d941bafc = v);
$parcel$export(module.exports, "SlowBuffer", () => $b96c7494de0ababe$export$e4cf37d7f6fb9e0a, (v) => $b96c7494de0ababe$export$e4cf37d7f6fb9e0a = v);
$parcel$export(module.exports, "INSPECT_MAX_BYTES", () => $b96c7494de0ababe$export$f99ded8fe4b79145, (v) => $b96c7494de0ababe$export$f99ded8fe4b79145 = v);
$parcel$export(module.exports, "kMaxLength", () => $b96c7494de0ababe$export$599f31c3813fae4d, (v) => $b96c7494de0ababe$export$599f31c3813fae4d = v);
var $b96c7494de0ababe$export$a143d493d941bafc;
var $b96c7494de0ababe$export$e4cf37d7f6fb9e0a;
var $b96c7494de0ababe$export$f99ded8fe4b79145;
var $b96c7494de0ababe$export$599f31c3813fae4d;
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';

var $cbaBO = parcelRequire("cbaBO");

var $eDBwZ = parcelRequire("eDBwZ");
var $b96c7494de0ababe$var$customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
$b96c7494de0ababe$export$a143d493d941bafc = $b96c7494de0ababe$var$Buffer;
$b96c7494de0ababe$export$e4cf37d7f6fb9e0a = $b96c7494de0ababe$var$SlowBuffer;
$b96c7494de0ababe$export$f99ded8fe4b79145 = 50;
var $b96c7494de0ababe$var$K_MAX_LENGTH = 2147483647;
$b96c7494de0ababe$export$599f31c3813fae4d = $b96c7494de0ababe$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $b96c7494de0ababe$var$Buffer.TYPED_ARRAY_SUPPORT = $b96c7494de0ababe$var$typedArraySupport();
if (!$b96c7494de0ababe$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $b96c7494de0ababe$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($b96c7494de0ababe$var$Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!$b96c7494de0ababe$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($b96c7494de0ababe$var$Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!$b96c7494de0ababe$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $b96c7494de0ababe$var$createBuffer(length) {
    if (length > $b96c7494de0ababe$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $b96c7494de0ababe$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $b96c7494de0ababe$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return $b96c7494de0ababe$var$allocUnsafe(arg);
    }
    return $b96c7494de0ababe$var$from(arg, encodingOrOffset, length);
}
$b96c7494de0ababe$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $b96c7494de0ababe$var$from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return $b96c7494de0ababe$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $b96c7494de0ababe$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($b96c7494de0ababe$var$isInstance(value, ArrayBuffer) || value && $b96c7494de0ababe$var$isInstance(value.buffer, ArrayBuffer)) return $b96c7494de0ababe$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && ($b96c7494de0ababe$var$isInstance(value, SharedArrayBuffer) || value && $b96c7494de0ababe$var$isInstance(value.buffer, SharedArrayBuffer))) return $b96c7494de0ababe$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $b96c7494de0ababe$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $b96c7494de0ababe$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return $b96c7494de0ababe$var$Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $b96c7494de0ababe$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $b96c7494de0ababe$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($b96c7494de0ababe$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($b96c7494de0ababe$var$Buffer, Uint8Array);
function $b96c7494de0ababe$var$assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $b96c7494de0ababe$var$alloc(size, fill, encoding) {
    $b96c7494de0ababe$var$assertSize(size);
    if (size <= 0) return $b96c7494de0ababe$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? $b96c7494de0ababe$var$createBuffer(size).fill(fill, encoding) : $b96c7494de0ababe$var$createBuffer(size).fill(fill);
    return $b96c7494de0ababe$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $b96c7494de0ababe$var$Buffer.alloc = function(size, fill, encoding) {
    return $b96c7494de0ababe$var$alloc(size, fill, encoding);
};
function $b96c7494de0ababe$var$allocUnsafe(size) {
    $b96c7494de0ababe$var$assertSize(size);
    return $b96c7494de0ababe$var$createBuffer(size < 0 ? 0 : $b96c7494de0ababe$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $b96c7494de0ababe$var$Buffer.allocUnsafe = function(size) {
    return $b96c7494de0ababe$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $b96c7494de0ababe$var$Buffer.allocUnsafeSlow = function(size) {
    return $b96c7494de0ababe$var$allocUnsafe(size);
};
function $b96c7494de0ababe$var$fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!$b96c7494de0ababe$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = $b96c7494de0ababe$var$byteLength(string, encoding) | 0;
    var buf = $b96c7494de0ababe$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $b96c7494de0ababe$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $b96c7494de0ababe$var$checked(array.length) | 0;
    var buf = $b96c7494de0ababe$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $b96c7494de0ababe$var$fromArrayView(arrayView) {
    if ($b96c7494de0ababe$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $b96c7494de0ababe$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $b96c7494de0ababe$var$fromArrayLike(arrayView);
}
function $b96c7494de0ababe$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $b96c7494de0ababe$var$Buffer.prototype);
    return buf;
}
function $b96c7494de0ababe$var$fromObject(obj) {
    if ($b96c7494de0ababe$var$Buffer.isBuffer(obj)) {
        var len = $b96c7494de0ababe$var$checked(obj.length) | 0;
        var buf = $b96c7494de0ababe$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || $b96c7494de0ababe$var$numberIsNaN(obj.length)) return $b96c7494de0ababe$var$createBuffer(0);
        return $b96c7494de0ababe$var$fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return $b96c7494de0ababe$var$fromArrayLike(obj.data);
}
function $b96c7494de0ababe$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $b96c7494de0ababe$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $b96c7494de0ababe$var$K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function $b96c7494de0ababe$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $b96c7494de0ababe$var$Buffer.alloc(+length);
}
$b96c7494de0ababe$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $b96c7494de0ababe$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$b96c7494de0ababe$var$Buffer.compare = function compare(a, b) {
    if ($b96c7494de0ababe$var$isInstance(a, Uint8Array)) a = $b96c7494de0ababe$var$Buffer.from(a, a.offset, a.byteLength);
    if ($b96c7494de0ababe$var$isInstance(b, Uint8Array)) b = $b96c7494de0ababe$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$b96c7494de0ababe$var$Buffer.isBuffer(a) || !$b96c7494de0ababe$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$b96c7494de0ababe$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
$b96c7494de0ababe$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $b96c7494de0ababe$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $b96c7494de0ababe$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($b96c7494de0ababe$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) $b96c7494de0ababe$var$Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$b96c7494de0ababe$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $b96c7494de0ababe$var$byteLength(string, encoding) {
    if ($b96c7494de0ababe$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $b96c7494de0ababe$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return $b96c7494de0ababe$var$utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return $b96c7494de0ababe$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $b96c7494de0ababe$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
$b96c7494de0ababe$var$Buffer.byteLength = $b96c7494de0ababe$var$byteLength;
function $b96c7494de0ababe$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return $b96c7494de0ababe$var$hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return $b96c7494de0ababe$var$utf8Slice(this, start, end);
        case 'ascii':
            return $b96c7494de0ababe$var$asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return $b96c7494de0ababe$var$latin1Slice(this, start, end);
        case 'base64':
            return $b96c7494de0ababe$var$base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $b96c7494de0ababe$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$b96c7494de0ababe$var$Buffer.prototype._isBuffer = true;
function $b96c7494de0ababe$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$b96c7494de0ababe$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)$b96c7494de0ababe$var$swap(this, i, i + 1);
    return this;
};
$b96c7494de0ababe$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        $b96c7494de0ababe$var$swap(this, i, i + 3);
        $b96c7494de0ababe$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$b96c7494de0ababe$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        $b96c7494de0ababe$var$swap(this, i, i + 7);
        $b96c7494de0ababe$var$swap(this, i + 1, i + 6);
        $b96c7494de0ababe$var$swap(this, i + 2, i + 5);
        $b96c7494de0ababe$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$b96c7494de0ababe$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return $b96c7494de0ababe$var$utf8Slice(this, 0, length);
    return $b96c7494de0ababe$var$slowToString.apply(this, arguments);
};
$b96c7494de0ababe$var$Buffer.prototype.toLocaleString = $b96c7494de0ababe$var$Buffer.prototype.toString;
$b96c7494de0ababe$var$Buffer.prototype.equals = function equals(b) {
    if (!$b96c7494de0ababe$var$Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return $b96c7494de0ababe$var$Buffer.compare(this, b) === 0;
};
$b96c7494de0ababe$var$Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = $b96c7494de0ababe$export$f99ded8fe4b79145;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if ($b96c7494de0ababe$var$customInspectSymbol) $b96c7494de0ababe$var$Buffer.prototype[$b96c7494de0ababe$var$customInspectSymbol] = $b96c7494de0ababe$var$Buffer.prototype.inspect;
$b96c7494de0ababe$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($b96c7494de0ababe$var$isInstance(target, Uint8Array)) target = $b96c7494de0ababe$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$b96c7494de0ababe$var$Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $b96c7494de0ababe$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($b96c7494de0ababe$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = $b96c7494de0ababe$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($b96c7494de0ababe$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $b96c7494de0ababe$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $b96c7494de0ababe$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function $b96c7494de0ababe$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i1;
    if (dir) {
        var foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
$b96c7494de0ababe$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$b96c7494de0ababe$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $b96c7494de0ababe$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$b96c7494de0ababe$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $b96c7494de0ababe$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $b96c7494de0ababe$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($b96c7494de0ababe$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $b96c7494de0ababe$var$utf8Write(buf, string, offset, length) {
    return $b96c7494de0ababe$var$blitBuffer($b96c7494de0ababe$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $b96c7494de0ababe$var$asciiWrite(buf, string, offset, length) {
    return $b96c7494de0ababe$var$blitBuffer($b96c7494de0ababe$var$asciiToBytes(string), buf, offset, length);
}
function $b96c7494de0ababe$var$base64Write(buf, string, offset, length) {
    return $b96c7494de0ababe$var$blitBuffer($b96c7494de0ababe$var$base64ToBytes(string), buf, offset, length);
}
function $b96c7494de0ababe$var$ucs2Write(buf, string, offset, length) {
    return $b96c7494de0ababe$var$blitBuffer($b96c7494de0ababe$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$b96c7494de0ababe$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return $b96c7494de0ababe$var$hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return $b96c7494de0ababe$var$utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return $b96c7494de0ababe$var$asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return $b96c7494de0ababe$var$base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $b96c7494de0ababe$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
$b96c7494de0ababe$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $b96c7494de0ababe$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $cbaBO.fromByteArray(buf);
    else return $cbaBO.fromByteArray(buf.slice(start, end));
}
function $b96c7494de0ababe$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $b96c7494de0ababe$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $b96c7494de0ababe$var$MAX_ARGUMENTS_LENGTH = 4096;
function $b96c7494de0ababe$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $b96c7494de0ababe$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $b96c7494de0ababe$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $b96c7494de0ababe$var$asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function $b96c7494de0ababe$var$latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $b96c7494de0ababe$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += $b96c7494de0ababe$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $b96c7494de0ababe$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$b96c7494de0ababe$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $b96c7494de0ababe$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $b96c7494de0ababe$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
$b96c7494de0ababe$var$Buffer.prototype.readUintLE = $b96c7494de0ababe$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
$b96c7494de0ababe$var$Buffer.prototype.readUintBE = $b96c7494de0ababe$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 256))val += this[offset + --byteLength] * mul;
    return val;
};
$b96c7494de0ababe$var$Buffer.prototype.readUint8 = $b96c7494de0ababe$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$b96c7494de0ababe$var$Buffer.prototype.readUint16LE = $b96c7494de0ababe$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$b96c7494de0ababe$var$Buffer.prototype.readUint16BE = $b96c7494de0ababe$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$b96c7494de0ababe$var$Buffer.prototype.readUint32LE = $b96c7494de0ababe$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
$b96c7494de0ababe$var$Buffer.prototype.readUint32BE = $b96c7494de0ababe$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$b96c7494de0ababe$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$b96c7494de0ababe$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$b96c7494de0ababe$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
$b96c7494de0ababe$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$b96c7494de0ababe$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$b96c7494de0ababe$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$b96c7494de0ababe$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$b96c7494de0ababe$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 4, this.length);
    return $eDBwZ.read(this, offset, true, 23, 4);
};
$b96c7494de0ababe$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 4, this.length);
    return $eDBwZ.read(this, offset, false, 23, 4);
};
$b96c7494de0ababe$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 8, this.length);
    return $eDBwZ.read(this, offset, true, 52, 8);
};
$b96c7494de0ababe$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkOffset(offset, 8, this.length);
    return $eDBwZ.read(this, offset, false, 52, 8);
};
function $b96c7494de0ababe$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$b96c7494de0ababe$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
$b96c7494de0ababe$var$Buffer.prototype.writeUintLE = $b96c7494de0ababe$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $b96c7494de0ababe$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$b96c7494de0ababe$var$Buffer.prototype.writeUintBE = $b96c7494de0ababe$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $b96c7494de0ababe$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$b96c7494de0ababe$var$Buffer.prototype.writeUint8 = $b96c7494de0ababe$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
$b96c7494de0ababe$var$Buffer.prototype.writeUint16LE = $b96c7494de0ababe$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$b96c7494de0ababe$var$Buffer.prototype.writeUint16BE = $b96c7494de0ababe$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$b96c7494de0ababe$var$Buffer.prototype.writeUint32LE = $b96c7494de0ababe$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
$b96c7494de0ababe$var$Buffer.prototype.writeUint32BE = $b96c7494de0ababe$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
$b96c7494de0ababe$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $b96c7494de0ababe$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$b96c7494de0ababe$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $b96c7494de0ababe$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$b96c7494de0ababe$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
$b96c7494de0ababe$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$b96c7494de0ababe$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$b96c7494de0ababe$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$b96c7494de0ababe$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function $b96c7494de0ababe$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function $b96c7494de0ababe$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    $eDBwZ.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$b96c7494de0ababe$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $b96c7494de0ababe$var$writeFloat(this, value, offset, true, noAssert);
};
$b96c7494de0ababe$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $b96c7494de0ababe$var$writeFloat(this, value, offset, false, noAssert);
};
function $b96c7494de0ababe$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b96c7494de0ababe$var$checkIEEE754(buf, value, offset
    $eDBwZ.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$b96c7494de0ababe$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $b96c7494de0ababe$var$writeDouble(this, value, offset, true, noAssert);
};
$b96c7494de0ababe$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $b96c7494de0ababe$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$b96c7494de0ababe$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$b96c7494de0ababe$var$Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$b96c7494de0ababe$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !$b96c7494de0ababe$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $b96c7494de0ababe$var$Buffer.isBuffer(val) ? val : $b96c7494de0ababe$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var $b96c7494de0ababe$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $b96c7494de0ababe$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($b96c7494de0ababe$var$INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function $b96c7494de0ababe$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function $b96c7494de0ababe$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function $b96c7494de0ababe$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $b96c7494de0ababe$var$base64ToBytes(str) {
    return $cbaBO.toByteArray($b96c7494de0ababe$var$base64clean(str));
}
function $b96c7494de0ababe$var$blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $b96c7494de0ababe$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $b96c7494de0ababe$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $b96c7494de0ababe$var$hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

});
parcelRequire.register("cbaBO", function(module, exports) {

$parcel$export(module.exports, "toByteArray", () => $8ddebdcc344623dc$export$d622b2ad8d90c771, (v) => $8ddebdcc344623dc$export$d622b2ad8d90c771 = v);
$parcel$export(module.exports, "fromByteArray", () => $8ddebdcc344623dc$export$6100ba28696e12de, (v) => $8ddebdcc344623dc$export$6100ba28696e12de = v);
var $8ddebdcc344623dc$export$a48f0734ac7c2329;
var $8ddebdcc344623dc$export$d622b2ad8d90c771;
var $8ddebdcc344623dc$export$6100ba28696e12de;
'use strict';
$8ddebdcc344623dc$export$a48f0734ac7c2329 = $8ddebdcc344623dc$var$byteLength;
$8ddebdcc344623dc$export$d622b2ad8d90c771 = $8ddebdcc344623dc$var$toByteArray;
$8ddebdcc344623dc$export$6100ba28696e12de = $8ddebdcc344623dc$var$fromByteArray;
var $8ddebdcc344623dc$var$lookup = [];
var $8ddebdcc344623dc$var$revLookup = [];
var $8ddebdcc344623dc$var$Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var $8ddebdcc344623dc$var$code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var $8ddebdcc344623dc$var$i = 0, $8ddebdcc344623dc$var$len = $8ddebdcc344623dc$var$code.length; $8ddebdcc344623dc$var$i < $8ddebdcc344623dc$var$len; ++$8ddebdcc344623dc$var$i){
    $8ddebdcc344623dc$var$lookup[$8ddebdcc344623dc$var$i] = $8ddebdcc344623dc$var$code[$8ddebdcc344623dc$var$i];
    $8ddebdcc344623dc$var$revLookup[$8ddebdcc344623dc$var$code.charCodeAt($8ddebdcc344623dc$var$i)] = $8ddebdcc344623dc$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$8ddebdcc344623dc$var$revLookup['-'.charCodeAt(0)] = 62;
$8ddebdcc344623dc$var$revLookup['_'.charCodeAt(0)] = 63;
function $8ddebdcc344623dc$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $8ddebdcc344623dc$var$byteLength(b64) {
    var lens = $8ddebdcc344623dc$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $8ddebdcc344623dc$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $8ddebdcc344623dc$var$toByteArray(b64) {
    var tmp;
    var lens = $8ddebdcc344623dc$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $8ddebdcc344623dc$var$Arr($8ddebdcc344623dc$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $8ddebdcc344623dc$var$revLookup[b64.charCodeAt(i)] << 18 | $8ddebdcc344623dc$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $8ddebdcc344623dc$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $8ddebdcc344623dc$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = $8ddebdcc344623dc$var$revLookup[b64.charCodeAt(i)] << 2 | $8ddebdcc344623dc$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = $8ddebdcc344623dc$var$revLookup[b64.charCodeAt(i)] << 10 | $8ddebdcc344623dc$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $8ddebdcc344623dc$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function $8ddebdcc344623dc$var$tripletToBase64(num) {
    return $8ddebdcc344623dc$var$lookup[num >> 18 & 63] + $8ddebdcc344623dc$var$lookup[num >> 12 & 63] + $8ddebdcc344623dc$var$lookup[num >> 6 & 63] + $8ddebdcc344623dc$var$lookup[num & 63];
}
function $8ddebdcc344623dc$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
        output.push($8ddebdcc344623dc$var$tripletToBase64(tmp));
    }
    return output.join('');
}
function $8ddebdcc344623dc$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($8ddebdcc344623dc$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($8ddebdcc344623dc$var$lookup[tmp >> 2] + $8ddebdcc344623dc$var$lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($8ddebdcc344623dc$var$lookup[tmp >> 10] + $8ddebdcc344623dc$var$lookup[tmp >> 4 & 63] + $8ddebdcc344623dc$var$lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}

});

parcelRequire.register("eDBwZ", function(module, exports) {

$parcel$export(module.exports, "read", () => $aa81d215b0919bd0$export$aafa59e2e03f2942, (v) => $aa81d215b0919bd0$export$aafa59e2e03f2942 = v);
$parcel$export(module.exports, "write", () => $aa81d215b0919bd0$export$68d8715fc104d294, (v) => $aa81d215b0919bd0$export$68d8715fc104d294 = v);
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $aa81d215b0919bd0$export$aafa59e2e03f2942;
var $aa81d215b0919bd0$export$68d8715fc104d294;
$aa81d215b0919bd0$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$aa81d215b0919bd0$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

});




parcelRequire.register("2vuiV", function(module, exports) {
'use strict';

var $cvM26 = parcelRequire("cvM26");

var $iUqrN = parcelRequire("iUqrN");

var $62npl = parcelRequire("62npl");

var $iiXyM = parcelRequire("iiXyM");

var $lTHWE = parcelRequire("lTHWE");
function $1d35fbd305554326$var$Hash(hash) {
    $lTHWE.call(this, 'digest');
    this._hash = hash;
}
$cvM26($1d35fbd305554326$var$Hash, $lTHWE);
$1d35fbd305554326$var$Hash.prototype._update = function(data) {
    this._hash.update(data);
};
$1d35fbd305554326$var$Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new $iUqrN();
    if (alg === 'rmd160' || alg === 'ripemd160') return new $62npl();
    return new $1d35fbd305554326$var$Hash($iiXyM(alg));
};

});
parcelRequire.register("cvM26", function(module, exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

});

parcelRequire.register("iUqrN", function(module, exports) {
'use strict';

var $cvM26 = parcelRequire("cvM26");

var $lWdHY = parcelRequire("lWdHY");

var $ahmAR = parcelRequire("ahmAR");
var $dc41f8d37408069d$require$Buffer = $ahmAR.Buffer;
var $dc41f8d37408069d$var$ARRAY16 = new Array(16);
function $dc41f8d37408069d$var$MD5() {
    $lWdHY.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
}
$cvM26($dc41f8d37408069d$var$MD5, $lWdHY);
$dc41f8d37408069d$var$MD5.prototype._update = function() {
    var M = $dc41f8d37408069d$var$ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = $dc41f8d37408069d$var$fnF(a, b, c, d, M[0], 3614090360, 7);
    d = $dc41f8d37408069d$var$fnF(d, a, b, c, M[1], 3905402710, 12);
    c = $dc41f8d37408069d$var$fnF(c, d, a, b, M[2], 606105819, 17);
    b = $dc41f8d37408069d$var$fnF(b, c, d, a, M[3], 3250441966, 22);
    a = $dc41f8d37408069d$var$fnF(a, b, c, d, M[4], 4118548399, 7);
    d = $dc41f8d37408069d$var$fnF(d, a, b, c, M[5], 1200080426, 12);
    c = $dc41f8d37408069d$var$fnF(c, d, a, b, M[6], 2821735955, 17);
    b = $dc41f8d37408069d$var$fnF(b, c, d, a, M[7], 4249261313, 22);
    a = $dc41f8d37408069d$var$fnF(a, b, c, d, M[8], 1770035416, 7);
    d = $dc41f8d37408069d$var$fnF(d, a, b, c, M[9], 2336552879, 12);
    c = $dc41f8d37408069d$var$fnF(c, d, a, b, M[10], 4294925233, 17);
    b = $dc41f8d37408069d$var$fnF(b, c, d, a, M[11], 2304563134, 22);
    a = $dc41f8d37408069d$var$fnF(a, b, c, d, M[12], 1804603682, 7);
    d = $dc41f8d37408069d$var$fnF(d, a, b, c, M[13], 4254626195, 12);
    c = $dc41f8d37408069d$var$fnF(c, d, a, b, M[14], 2792965006, 17);
    b = $dc41f8d37408069d$var$fnF(b, c, d, a, M[15], 1236535329, 22);
    a = $dc41f8d37408069d$var$fnG(a, b, c, d, M[1], 4129170786, 5);
    d = $dc41f8d37408069d$var$fnG(d, a, b, c, M[6], 3225465664, 9);
    c = $dc41f8d37408069d$var$fnG(c, d, a, b, M[11], 643717713, 14);
    b = $dc41f8d37408069d$var$fnG(b, c, d, a, M[0], 3921069994, 20);
    a = $dc41f8d37408069d$var$fnG(a, b, c, d, M[5], 3593408605, 5);
    d = $dc41f8d37408069d$var$fnG(d, a, b, c, M[10], 38016083, 9);
    c = $dc41f8d37408069d$var$fnG(c, d, a, b, M[15], 3634488961, 14);
    b = $dc41f8d37408069d$var$fnG(b, c, d, a, M[4], 3889429448, 20);
    a = $dc41f8d37408069d$var$fnG(a, b, c, d, M[9], 568446438, 5);
    d = $dc41f8d37408069d$var$fnG(d, a, b, c, M[14], 3275163606, 9);
    c = $dc41f8d37408069d$var$fnG(c, d, a, b, M[3], 4107603335, 14);
    b = $dc41f8d37408069d$var$fnG(b, c, d, a, M[8], 1163531501, 20);
    a = $dc41f8d37408069d$var$fnG(a, b, c, d, M[13], 2850285829, 5);
    d = $dc41f8d37408069d$var$fnG(d, a, b, c, M[2], 4243563512, 9);
    c = $dc41f8d37408069d$var$fnG(c, d, a, b, M[7], 1735328473, 14);
    b = $dc41f8d37408069d$var$fnG(b, c, d, a, M[12], 2368359562, 20);
    a = $dc41f8d37408069d$var$fnH(a, b, c, d, M[5], 4294588738, 4);
    d = $dc41f8d37408069d$var$fnH(d, a, b, c, M[8], 2272392833, 11);
    c = $dc41f8d37408069d$var$fnH(c, d, a, b, M[11], 1839030562, 16);
    b = $dc41f8d37408069d$var$fnH(b, c, d, a, M[14], 4259657740, 23);
    a = $dc41f8d37408069d$var$fnH(a, b, c, d, M[1], 2763975236, 4);
    d = $dc41f8d37408069d$var$fnH(d, a, b, c, M[4], 1272893353, 11);
    c = $dc41f8d37408069d$var$fnH(c, d, a, b, M[7], 4139469664, 16);
    b = $dc41f8d37408069d$var$fnH(b, c, d, a, M[10], 3200236656, 23);
    a = $dc41f8d37408069d$var$fnH(a, b, c, d, M[13], 681279174, 4);
    d = $dc41f8d37408069d$var$fnH(d, a, b, c, M[0], 3936430074, 11);
    c = $dc41f8d37408069d$var$fnH(c, d, a, b, M[3], 3572445317, 16);
    b = $dc41f8d37408069d$var$fnH(b, c, d, a, M[6], 76029189, 23);
    a = $dc41f8d37408069d$var$fnH(a, b, c, d, M[9], 3654602809, 4);
    d = $dc41f8d37408069d$var$fnH(d, a, b, c, M[12], 3873151461, 11);
    c = $dc41f8d37408069d$var$fnH(c, d, a, b, M[15], 530742520, 16);
    b = $dc41f8d37408069d$var$fnH(b, c, d, a, M[2], 3299628645, 23);
    a = $dc41f8d37408069d$var$fnI(a, b, c, d, M[0], 4096336452, 6);
    d = $dc41f8d37408069d$var$fnI(d, a, b, c, M[7], 1126891415, 10);
    c = $dc41f8d37408069d$var$fnI(c, d, a, b, M[14], 2878612391, 15);
    b = $dc41f8d37408069d$var$fnI(b, c, d, a, M[5], 4237533241, 21);
    a = $dc41f8d37408069d$var$fnI(a, b, c, d, M[12], 1700485571, 6);
    d = $dc41f8d37408069d$var$fnI(d, a, b, c, M[3], 2399980690, 10);
    c = $dc41f8d37408069d$var$fnI(c, d, a, b, M[10], 4293915773, 15);
    b = $dc41f8d37408069d$var$fnI(b, c, d, a, M[1], 2240044497, 21);
    a = $dc41f8d37408069d$var$fnI(a, b, c, d, M[8], 1873313359, 6);
    d = $dc41f8d37408069d$var$fnI(d, a, b, c, M[15], 4264355552, 10);
    c = $dc41f8d37408069d$var$fnI(c, d, a, b, M[6], 2734768916, 15);
    b = $dc41f8d37408069d$var$fnI(b, c, d, a, M[13], 1309151649, 21);
    a = $dc41f8d37408069d$var$fnI(a, b, c, d, M[4], 4149444226, 6);
    d = $dc41f8d37408069d$var$fnI(d, a, b, c, M[11], 3174756917, 10);
    c = $dc41f8d37408069d$var$fnI(c, d, a, b, M[2], 718787259, 15);
    b = $dc41f8d37408069d$var$fnI(b, c, d, a, M[9], 3951481745, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
$dc41f8d37408069d$var$MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $dc41f8d37408069d$require$Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function $dc41f8d37408069d$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $dc41f8d37408069d$var$fnF(a, b, c, d, m, k, s) {
    return $dc41f8d37408069d$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function $dc41f8d37408069d$var$fnG(a, b, c, d, m, k, s) {
    return $dc41f8d37408069d$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function $dc41f8d37408069d$var$fnH(a, b, c, d, m, k, s) {
    return $dc41f8d37408069d$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function $dc41f8d37408069d$var$fnI(a, b, c, d, m, k, s) {
    return $dc41f8d37408069d$var$rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = $dc41f8d37408069d$var$MD5;

});
parcelRequire.register("lWdHY", function(module, exports) {
'use strict';

var $ahmAR = parcelRequire("ahmAR");
var $ff89a5e6cd58025f$require$Buffer = $ahmAR.Buffer;

var $i8UWA = parcelRequire("i8UWA");
var $ff89a5e6cd58025f$require$Transform = $i8UWA.Transform;

var $cvM26 = parcelRequire("cvM26");
function $ff89a5e6cd58025f$var$throwIfNotStringOrBuffer(val, prefix) {
    if (!$ff89a5e6cd58025f$require$Buffer.isBuffer(val) && typeof val !== 'string') throw new TypeError(prefix + ' must be a string or a buffer');
}
function $ff89a5e6cd58025f$var$HashBase(blockSize) {
    $ff89a5e6cd58025f$require$Transform.call(this);
    this._block = $ff89a5e6cd58025f$require$Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
$cvM26($ff89a5e6cd58025f$var$HashBase, $ff89a5e6cd58025f$require$Transform);
$ff89a5e6cd58025f$var$HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
$ff89a5e6cd58025f$var$HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
$ff89a5e6cd58025f$var$HashBase.prototype.update = function(data, encoding) {
    $ff89a5e6cd58025f$var$throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called');
    if (!$ff89a5e6cd58025f$require$Buffer.isBuffer(data)) data = $ff89a5e6cd58025f$require$Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
    }
    return this;
};
$ff89a5e6cd58025f$var$HashBase.prototype._update = function() {
    throw new Error('_update is not implemented');
};
$ff89a5e6cd58025f$var$HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error('Digest already called');
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
$ff89a5e6cd58025f$var$HashBase.prototype._digest = function() {
    throw new Error('_digest is not implemented');
};
module.exports = $ff89a5e6cd58025f$var$HashBase;

});
parcelRequire.register("i8UWA", function(module, exports) {

exports = module.exports = (parcelRequire("93Vl6"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("lg40f"));

exports.Duplex = (parcelRequire("3SHpa"));

exports.Transform = (parcelRequire("cbvNx"));

exports.PassThrough = (parcelRequire("g8hAF"));

exports.finished = (parcelRequire("ekicx"));

exports.pipeline = (parcelRequire("1Rq99"));

});
parcelRequire.register("93Vl6", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
module.exports = $6990df4a6b4a4897$var$Readable;
/*<replacement>*/ var $6990df4a6b4a4897$var$Duplex;
/*</replacement>*/ $6990df4a6b4a4897$var$Readable.ReadableState = $6990df4a6b4a4897$var$ReadableState;

var $is9nt = parcelRequire("is9nt");
var $6990df4a6b4a4897$require$EE = $is9nt.EventEmitter;
var $6990df4a6b4a4897$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $gYOQs = parcelRequire("gYOQs");

var $fV0m8 = parcelRequire("fV0m8");
var $6990df4a6b4a4897$require$Buffer = $fV0m8.Buffer;
var $6990df4a6b4a4897$var$OurUint8Array = $parcel$global.Uint8Array || function() {
};
function $6990df4a6b4a4897$var$_uint8ArrayToBuffer(chunk) {
    return $6990df4a6b4a4897$require$Buffer.from(chunk);
}
function $6990df4a6b4a4897$var$_isUint8Array(obj) {
    return $6990df4a6b4a4897$require$Buffer.isBuffer(obj) || obj instanceof $6990df4a6b4a4897$var$OurUint8Array;
}

var $cacXd = parcelRequire("cacXd");
var $6990df4a6b4a4897$var$debug;
if ($cacXd && $cacXd.debuglog) $6990df4a6b4a4897$var$debug = $cacXd.debuglog('stream');
else $6990df4a6b4a4897$var$debug = function debug() {
};

var $axnaQ = parcelRequire("axnaQ");

var $8DFir = parcelRequire("8DFir");

var $66gEk = parcelRequire("66gEk");
var $6990df4a6b4a4897$var$getHighWaterMark = $66gEk.getHighWaterMark;

var $2Vbms = parcelRequire("2Vbms");
var $6990df4a6b4a4897$require$_require$codes = $2Vbms.codes;
var $6990df4a6b4a4897$var$ERR_INVALID_ARG_TYPE = $6990df4a6b4a4897$require$_require$codes.ERR_INVALID_ARG_TYPE, $6990df4a6b4a4897$var$ERR_STREAM_PUSH_AFTER_EOF = $6990df4a6b4a4897$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $6990df4a6b4a4897$var$ERR_METHOD_NOT_IMPLEMENTED = $6990df4a6b4a4897$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $6990df4a6b4a4897$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $6990df4a6b4a4897$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var $6990df4a6b4a4897$var$StringDecoder;
var $6990df4a6b4a4897$var$createReadableStreamAsyncIterator;
var $6990df4a6b4a4897$var$from;

(parcelRequire("cvM26"))($6990df4a6b4a4897$var$Readable, $gYOQs);
var $6990df4a6b4a4897$var$errorOrDestroy = $8DFir.errorOrDestroy;
var $6990df4a6b4a4897$var$kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function $6990df4a6b4a4897$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $6990df4a6b4a4897$var$ReadableState(options, stream, isDuplex) {
    $6990df4a6b4a4897$var$Duplex = $6990df4a6b4a4897$var$Duplex || (parcelRequire("3SHpa"));
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $6990df4a6b4a4897$var$Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $6990df4a6b4a4897$var$getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $axnaQ();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$6990df4a6b4a4897$var$StringDecoder) $6990df4a6b4a4897$var$StringDecoder = (parcelRequire("kNIJ9")).StringDecoder;
        this.decoder = new $6990df4a6b4a4897$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $6990df4a6b4a4897$var$Readable(options) {
    $6990df4a6b4a4897$var$Duplex = $6990df4a6b4a4897$var$Duplex || (parcelRequire("3SHpa"));
    if (!(this instanceof $6990df4a6b4a4897$var$Readable)) return new $6990df4a6b4a4897$var$Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $6990df4a6b4a4897$var$Duplex;
    this._readableState = new $6990df4a6b4a4897$var$ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    $gYOQs.call(this);
}
Object.defineProperty($6990df4a6b4a4897$var$Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$6990df4a6b4a4897$var$Readable.prototype.destroy = $8DFir.destroy;
$6990df4a6b4a4897$var$Readable.prototype._undestroy = $8DFir.undestroy;
$6990df4a6b4a4897$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$6990df4a6b4a4897$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $6990df4a6b4a4897$require$Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $6990df4a6b4a4897$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
$6990df4a6b4a4897$var$Readable.prototype.unshift = function(chunk) {
    return $6990df4a6b4a4897$var$readableAddChunk(this, chunk, null, true, false);
};
function $6990df4a6b4a4897$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $6990df4a6b4a4897$var$debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $6990df4a6b4a4897$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $6990df4a6b4a4897$var$chunkInvalid(state, chunk);
        if (er) $6990df4a6b4a4897$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== $6990df4a6b4a4897$require$Buffer.prototype) chunk = $6990df4a6b4a4897$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $6990df4a6b4a4897$var$errorOrDestroy(stream, new $6990df4a6b4a4897$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $6990df4a6b4a4897$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $6990df4a6b4a4897$var$errorOrDestroy(stream, new $6990df4a6b4a4897$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $6990df4a6b4a4897$var$addChunk(stream, state, chunk, false);
                    else $6990df4a6b4a4897$var$maybeReadMore(stream, state);
                } else $6990df4a6b4a4897$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $6990df4a6b4a4897$var$maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $6990df4a6b4a4897$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $6990df4a6b4a4897$var$emitReadable(stream);
    }
    $6990df4a6b4a4897$var$maybeReadMore(stream, state);
}
function $6990df4a6b4a4897$var$chunkInvalid(state, chunk) {
    var er;
    if (!$6990df4a6b4a4897$var$_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new $6990df4a6b4a4897$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
$6990df4a6b4a4897$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.

$6990df4a6b4a4897$var$Readable.prototype.setEncoding = function(enc) {
    if (!$6990df4a6b4a4897$var$StringDecoder) $6990df4a6b4a4897$var$StringDecoder = (parcelRequire("kNIJ9")).StringDecoder;
    var decoder = new $6990df4a6b4a4897$var$StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var $6990df4a6b4a4897$var$MAX_HWM = 1073741824;
function $6990df4a6b4a4897$var$computeNewHighWaterMark(n) {
    if (n >= $6990df4a6b4a4897$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $6990df4a6b4a4897$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $6990df4a6b4a4897$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $6990df4a6b4a4897$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
$6990df4a6b4a4897$var$Readable.prototype.read = function(n) {
    $6990df4a6b4a4897$var$debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $6990df4a6b4a4897$var$debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) $6990df4a6b4a4897$var$endReadable(this);
        else $6990df4a6b4a4897$var$emitReadable(this);
        return null;
    }
    n = $6990df4a6b4a4897$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $6990df4a6b4a4897$var$endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $6990df4a6b4a4897$var$debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $6990df4a6b4a4897$var$debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $6990df4a6b4a4897$var$debug('reading or ended', doRead);
    } else if (doRead) {
        $6990df4a6b4a4897$var$debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $6990df4a6b4a4897$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $6990df4a6b4a4897$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $6990df4a6b4a4897$var$endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function $6990df4a6b4a4897$var$onEofChunk(stream, state) {
    $6990df4a6b4a4897$var$debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $6990df4a6b4a4897$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $6990df4a6b4a4897$var$emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $6990df4a6b4a4897$var$emitReadable(stream) {
    var state = stream._readableState;
    $6990df4a6b4a4897$var$debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $6990df4a6b4a4897$var$debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        $7pjJT.nextTick($6990df4a6b4a4897$var$emitReadable_, stream);
    }
}
function $6990df4a6b4a4897$var$emitReadable_(stream) {
    var state = stream._readableState;
    $6990df4a6b4a4897$var$debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $6990df4a6b4a4897$var$flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $6990df4a6b4a4897$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $7pjJT.nextTick($6990df4a6b4a4897$var$maybeReadMore_, stream, state);
    }
}
function $6990df4a6b4a4897$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $6990df4a6b4a4897$var$debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$6990df4a6b4a4897$var$Readable.prototype._read = function(n) {
    $6990df4a6b4a4897$var$errorOrDestroy(this, new $6990df4a6b4a4897$var$ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
$6990df4a6b4a4897$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $6990df4a6b4a4897$var$debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $7pjJT.stdout && dest !== $7pjJT.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $7pjJT.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $6990df4a6b4a4897$var$debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $6990df4a6b4a4897$var$debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $6990df4a6b4a4897$var$pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        $6990df4a6b4a4897$var$debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        $6990df4a6b4a4897$var$debug('ondata');
        var ret = dest.write(chunk);
        $6990df4a6b4a4897$var$debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $6990df4a6b4a4897$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $6990df4a6b4a4897$var$debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $6990df4a6b4a4897$var$debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if ($6990df4a6b4a4897$var$EElistenerCount(dest, 'error') === 0) $6990df4a6b4a4897$var$errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    $6990df4a6b4a4897$var$prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        $6990df4a6b4a4897$var$debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        $6990df4a6b4a4897$var$debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $6990df4a6b4a4897$var$debug('pipe resume');
        src.resume();
    }
    return dest;
};
function $6990df4a6b4a4897$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $6990df4a6b4a4897$var$debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $6990df4a6b4a4897$var$EElistenerCount(src, 'data')) {
            state.flowing = true;
            $6990df4a6b4a4897$var$flow(src);
        }
    };
}
$6990df4a6b4a4897$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = $6990df4a6b4a4897$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
$6990df4a6b4a4897$var$Readable.prototype.on = function(ev, fn) {
    var res = $gYOQs.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $6990df4a6b4a4897$var$debug('on readable', state.length, state.reading);
            if (state.length) $6990df4a6b4a4897$var$emitReadable(this);
            else if (!state.reading) $7pjJT.nextTick($6990df4a6b4a4897$var$nReadingNextTick, this);
        }
    }
    return res;
};
$6990df4a6b4a4897$var$Readable.prototype.addListener = $6990df4a6b4a4897$var$Readable.prototype.on;
$6990df4a6b4a4897$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $gYOQs.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $7pjJT.nextTick($6990df4a6b4a4897$var$updateReadableListening, this);
    return res;
};
$6990df4a6b4a4897$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $gYOQs.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $7pjJT.nextTick($6990df4a6b4a4897$var$updateReadableListening, this);
    return res;
};
function $6990df4a6b4a4897$var$updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function $6990df4a6b4a4897$var$nReadingNextTick(self) {
    $6990df4a6b4a4897$var$debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$6990df4a6b4a4897$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $6990df4a6b4a4897$var$debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $6990df4a6b4a4897$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $6990df4a6b4a4897$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $7pjJT.nextTick($6990df4a6b4a4897$var$resume_, stream, state);
    }
}
function $6990df4a6b4a4897$var$resume_(stream, state) {
    $6990df4a6b4a4897$var$debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    $6990df4a6b4a4897$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$6990df4a6b4a4897$var$Readable.prototype.pause = function() {
    $6990df4a6b4a4897$var$debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $6990df4a6b4a4897$var$debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function $6990df4a6b4a4897$var$flow(stream) {
    var state = stream._readableState;
    $6990df4a6b4a4897$var$debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$6990df4a6b4a4897$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        $6990df4a6b4a4897$var$debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        $6990df4a6b4a4897$var$debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < $6990df4a6b4a4897$var$kProxyEvents.length; n1++)stream.on($6990df4a6b4a4897$var$kProxyEvents[n1], this.emit.bind(this, $6990df4a6b4a4897$var$kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $6990df4a6b4a4897$var$debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === 'function') $6990df4a6b4a4897$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($6990df4a6b4a4897$var$createReadableStreamAsyncIterator === undefined) $6990df4a6b4a4897$var$createReadableStreamAsyncIterator = (parcelRequire("3g8qs"));
    return $6990df4a6b4a4897$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($6990df4a6b4a4897$var$Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($6990df4a6b4a4897$var$Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($6990df4a6b4a4897$var$Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
$6990df4a6b4a4897$var$Readable._fromList = $6990df4a6b4a4897$var$fromList;
Object.defineProperty($6990df4a6b4a4897$var$Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $6990df4a6b4a4897$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $6990df4a6b4a4897$var$endReadable(stream) {
    var state = stream._readableState;
    $6990df4a6b4a4897$var$debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $7pjJT.nextTick($6990df4a6b4a4897$var$endReadableNT, state, stream);
    }
}
function $6990df4a6b4a4897$var$endReadableNT(state, stream) {
    $6990df4a6b4a4897$var$debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === 'function') $6990df4a6b4a4897$var$Readable.from = function(iterable, opts) {
    if ($6990df4a6b4a4897$var$from === undefined) $6990df4a6b4a4897$var$from = (parcelRequire("B1Lpd"));
    return $6990df4a6b4a4897$var$from($6990df4a6b4a4897$var$Readable, iterable, opts);
};
function $6990df4a6b4a4897$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("is9nt", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var $d6f21db605273287$var$R = typeof Reflect === 'object' ? Reflect : null;
var $d6f21db605273287$var$ReflectApply = $d6f21db605273287$var$R && typeof $d6f21db605273287$var$R.apply === 'function' ? $d6f21db605273287$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $d6f21db605273287$var$ReflectOwnKeys;
if ($d6f21db605273287$var$R && typeof $d6f21db605273287$var$R.ownKeys === 'function') $d6f21db605273287$var$ReflectOwnKeys = $d6f21db605273287$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $d6f21db605273287$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $d6f21db605273287$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function $d6f21db605273287$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $d6f21db605273287$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $d6f21db605273287$var$EventEmitter() {
    $d6f21db605273287$var$EventEmitter.init.call(this);
}
module.exports = $d6f21db605273287$var$EventEmitter;
module.exports.once = $d6f21db605273287$var$once;
// Backwards-compat with node 0.10.x
$d6f21db605273287$var$EventEmitter.EventEmitter = $d6f21db605273287$var$EventEmitter;
$d6f21db605273287$var$EventEmitter.prototype._events = undefined;
$d6f21db605273287$var$EventEmitter.prototype._eventsCount = 0;
$d6f21db605273287$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $d6f21db605273287$var$defaultMaxListeners = 10;
function $d6f21db605273287$var$checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty($d6f21db605273287$var$EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return $d6f21db605273287$var$defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || $d6f21db605273287$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        $d6f21db605273287$var$defaultMaxListeners = arg;
    }
});
$d6f21db605273287$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$d6f21db605273287$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || $d6f21db605273287$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function $d6f21db605273287$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $d6f21db605273287$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$d6f21db605273287$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $d6f21db605273287$var$_getMaxListeners(this);
};
$d6f21db605273287$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') $d6f21db605273287$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $d6f21db605273287$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$d6f21db605273287$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $d6f21db605273287$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $d6f21db605273287$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $d6f21db605273287$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $d6f21db605273287$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$d6f21db605273287$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $d6f21db605273287$var$_addListener(this, type, listener, false);
};
$d6f21db605273287$var$EventEmitter.prototype.on = $d6f21db605273287$var$EventEmitter.prototype.addListener;
$d6f21db605273287$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $d6f21db605273287$var$_addListener(this, type, listener, true);
};
function $d6f21db605273287$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $d6f21db605273287$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $d6f21db605273287$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$d6f21db605273287$var$EventEmitter.prototype.once = function once(type, listener) {
    $d6f21db605273287$var$checkListener(listener);
    this.on(type, $d6f21db605273287$var$_onceWrap(this, type, listener));
    return this;
};
$d6f21db605273287$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $d6f21db605273287$var$checkListener(listener);
    this.prependListener(type, $d6f21db605273287$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$d6f21db605273287$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $d6f21db605273287$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $d6f21db605273287$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
$d6f21db605273287$var$EventEmitter.prototype.off = $d6f21db605273287$var$EventEmitter.prototype.removeListener;
$d6f21db605273287$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $d6f21db605273287$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $d6f21db605273287$var$unwrapListeners(evlistener) : $d6f21db605273287$var$arrayClone(evlistener, evlistener.length);
}
$d6f21db605273287$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $d6f21db605273287$var$_listeners(this, type, true);
};
$d6f21db605273287$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $d6f21db605273287$var$_listeners(this, type, false);
};
$d6f21db605273287$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return $d6f21db605273287$var$listenerCount.call(emitter, type);
};
$d6f21db605273287$var$EventEmitter.prototype.listenerCount = $d6f21db605273287$var$listenerCount;
function $d6f21db605273287$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$d6f21db605273287$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $d6f21db605273287$var$ReflectOwnKeys(this._events) : [];
};
function $d6f21db605273287$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $d6f21db605273287$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $d6f21db605273287$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $d6f21db605273287$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        $d6f21db605273287$var$eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') $d6f21db605273287$var$addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function $d6f21db605273287$var$addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') $d6f21db605273287$var$eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function $d6f21db605273287$var$eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

});

parcelRequire.register("gYOQs", function(module, exports) {

module.exports = (parcelRequire("is9nt")).EventEmitter;

});

parcelRequire.register("cacXd", function(module, exports) {
"use strict";

});

parcelRequire.register("axnaQ", function(module, exports) {
'use strict';
function $7abef6485fc29e77$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $7abef6485fc29e77$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) $7abef6485fc29e77$var$ownKeys(Object(source), true).forEach(function(key) {
            $7abef6485fc29e77$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $7abef6485fc29e77$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $7abef6485fc29e77$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $7abef6485fc29e77$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $7abef6485fc29e77$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $7abef6485fc29e77$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $7abef6485fc29e77$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $7abef6485fc29e77$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

var $fV0m8 = parcelRequire("fV0m8");
var $7abef6485fc29e77$var$Buffer = $fV0m8.Buffer;

var $cacXd = parcelRequire("cacXd");
var $7abef6485fc29e77$var$inspect = $cacXd.inspect;
var $7abef6485fc29e77$var$custom = $7abef6485fc29e77$var$inspect && $7abef6485fc29e77$var$inspect.custom || 'inspect';
function $7abef6485fc29e77$var$copyBuffer(src, target, offset) {
    $7abef6485fc29e77$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        $7abef6485fc29e77$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $7abef6485fc29e77$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $7abef6485fc29e77$var$Buffer.alloc(0);
                var ret = $7abef6485fc29e77$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $7abef6485fc29e77$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $7abef6485fc29e77$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: $7abef6485fc29e77$var$custom,
            value: function value(_, options) {
                return $7abef6485fc29e77$var$inspect(this, $7abef6485fc29e77$var$_objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

});

parcelRequire.register("8DFir", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
'use strict'; // undocumented cb() API, needed for core, not for public API
function $64a1ffdbc5206972$var$destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) $7pjJT.nextTick($64a1ffdbc5206972$var$emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $7pjJT.nextTick($64a1ffdbc5206972$var$emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $7pjJT.nextTick($64a1ffdbc5206972$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $7pjJT.nextTick($64a1ffdbc5206972$var$emitErrorAndCloseNT, _this, err);
            } else $7pjJT.nextTick($64a1ffdbc5206972$var$emitCloseNT, _this);
        } else if (cb) {
            $7pjJT.nextTick($64a1ffdbc5206972$var$emitCloseNT, _this);
            cb(err);
        } else $7pjJT.nextTick($64a1ffdbc5206972$var$emitCloseNT, _this);
    });
    return this;
}
function $64a1ffdbc5206972$var$emitErrorAndCloseNT(self, err) {
    $64a1ffdbc5206972$var$emitErrorNT(self, err);
    $64a1ffdbc5206972$var$emitCloseNT(self);
}
function $64a1ffdbc5206972$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function $64a1ffdbc5206972$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $64a1ffdbc5206972$var$emitErrorNT(self, err) {
    self.emit('error', err);
}
function $64a1ffdbc5206972$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: $64a1ffdbc5206972$var$destroy,
    undestroy: $64a1ffdbc5206972$var$undestroy,
    errorOrDestroy: $64a1ffdbc5206972$var$errorOrDestroy
};

});

parcelRequire.register("66gEk", function(module, exports) {
'use strict';

var $2Vbms = parcelRequire("2Vbms");
var $471037ddda553de0$var$ERR_INVALID_OPT_VALUE = $2Vbms.codes.ERR_INVALID_OPT_VALUE;
function $471037ddda553de0$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $471037ddda553de0$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $471037ddda553de0$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new $471037ddda553de0$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $471037ddda553de0$var$getHighWaterMark
};

});
parcelRequire.register("2Vbms", function(module, exports) {

$parcel$export(module.exports, "codes", () => $2209b7c0f6d7038a$export$e45cb6485273080e, (v) => $2209b7c0f6d7038a$export$e45cb6485273080e = v);
var $2209b7c0f6d7038a$export$e45cb6485273080e;
'use strict';
function $2209b7c0f6d7038a$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $2209b7c0f6d7038a$var$codes = {
};
function $2209b7c0f6d7038a$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        $2209b7c0f6d7038a$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    $2209b7c0f6d7038a$var$codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $2209b7c0f6d7038a$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $2209b7c0f6d7038a$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $2209b7c0f6d7038a$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $2209b7c0f6d7038a$var$includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$2209b7c0f6d7038a$var$createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$2209b7c0f6d7038a$var$createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && $2209b7c0f6d7038a$var$startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if ($2209b7c0f6d7038a$var$endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($2209b7c0f6d7038a$var$oneOf(expected, 'type'));
    else {
        var type = $2209b7c0f6d7038a$var$includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat($2209b7c0f6d7038a$var$oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$2209b7c0f6d7038a$var$createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
$2209b7c0f6d7038a$var$createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
$2209b7c0f6d7038a$var$createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
$2209b7c0f6d7038a$var$createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
$2209b7c0f6d7038a$var$createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
$2209b7c0f6d7038a$var$createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
$2209b7c0f6d7038a$var$createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
$2209b7c0f6d7038a$var$createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
$2209b7c0f6d7038a$var$createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
$2209b7c0f6d7038a$var$createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
$2209b7c0f6d7038a$export$e45cb6485273080e = $2209b7c0f6d7038a$var$codes;

});


parcelRequire.register("3SHpa", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/ var $2d381593f15d88e9$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $2d381593f15d88e9$var$Duplex;

var $93Vl6 = parcelRequire("93Vl6");

var $lg40f = parcelRequire("lg40f");

(parcelRequire("cvM26"))($2d381593f15d88e9$var$Duplex, $93Vl6);
// Allow the keys array to be GC'ed.
var $2d381593f15d88e9$var$keys = $2d381593f15d88e9$var$objectKeys($lg40f.prototype);
for(var $2d381593f15d88e9$var$v = 0; $2d381593f15d88e9$var$v < $2d381593f15d88e9$var$keys.length; $2d381593f15d88e9$var$v++){
    var $2d381593f15d88e9$var$method = $2d381593f15d88e9$var$keys[$2d381593f15d88e9$var$v];
    if (!$2d381593f15d88e9$var$Duplex.prototype[$2d381593f15d88e9$var$method]) $2d381593f15d88e9$var$Duplex.prototype[$2d381593f15d88e9$var$method] = $lg40f.prototype[$2d381593f15d88e9$var$method];
}
function $2d381593f15d88e9$var$Duplex(options) {
    if (!(this instanceof $2d381593f15d88e9$var$Duplex)) return new $2d381593f15d88e9$var$Duplex(options);
    $93Vl6.call(this, options);
    $lg40f.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', $2d381593f15d88e9$var$onend);
        }
    }
}
Object.defineProperty($2d381593f15d88e9$var$Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($2d381593f15d88e9$var$Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($2d381593f15d88e9$var$Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function $2d381593f15d88e9$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    $7pjJT.nextTick($2d381593f15d88e9$var$onEndNT, this);
}
function $2d381593f15d88e9$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($2d381593f15d88e9$var$Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("lg40f", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
module.exports = $f79e32824ab22ad9$var$Writable;
/* <replacement> */ function $f79e32824ab22ad9$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $f79e32824ab22ad9$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $f79e32824ab22ad9$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $f79e32824ab22ad9$var$Duplex;
/*</replacement>*/ $f79e32824ab22ad9$var$Writable.WritableState = $f79e32824ab22ad9$var$WritableState;

/*<replacement>*/ var $f79e32824ab22ad9$var$internalUtil = {
    deprecate: (parcelRequire("ecXVU"))
};

var $gYOQs = parcelRequire("gYOQs");

var $fV0m8 = parcelRequire("fV0m8");
var $f79e32824ab22ad9$require$Buffer = $fV0m8.Buffer;
var $f79e32824ab22ad9$var$OurUint8Array = $parcel$global.Uint8Array || function() {
};
function $f79e32824ab22ad9$var$_uint8ArrayToBuffer(chunk) {
    return $f79e32824ab22ad9$require$Buffer.from(chunk);
}
function $f79e32824ab22ad9$var$_isUint8Array(obj) {
    return $f79e32824ab22ad9$require$Buffer.isBuffer(obj) || obj instanceof $f79e32824ab22ad9$var$OurUint8Array;
}

var $8DFir = parcelRequire("8DFir");

var $66gEk = parcelRequire("66gEk");
var $f79e32824ab22ad9$var$getHighWaterMark = $66gEk.getHighWaterMark;

var $2Vbms = parcelRequire("2Vbms");
var $f79e32824ab22ad9$require$_require$codes = $2Vbms.codes;
var $f79e32824ab22ad9$var$ERR_INVALID_ARG_TYPE = $f79e32824ab22ad9$require$_require$codes.ERR_INVALID_ARG_TYPE, $f79e32824ab22ad9$var$ERR_METHOD_NOT_IMPLEMENTED = $f79e32824ab22ad9$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $f79e32824ab22ad9$var$ERR_MULTIPLE_CALLBACK = $f79e32824ab22ad9$require$_require$codes.ERR_MULTIPLE_CALLBACK, $f79e32824ab22ad9$var$ERR_STREAM_CANNOT_PIPE = $f79e32824ab22ad9$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $f79e32824ab22ad9$var$ERR_STREAM_DESTROYED = $f79e32824ab22ad9$require$_require$codes.ERR_STREAM_DESTROYED, $f79e32824ab22ad9$var$ERR_STREAM_NULL_VALUES = $f79e32824ab22ad9$require$_require$codes.ERR_STREAM_NULL_VALUES, $f79e32824ab22ad9$var$ERR_STREAM_WRITE_AFTER_END = $f79e32824ab22ad9$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $f79e32824ab22ad9$var$ERR_UNKNOWN_ENCODING = $f79e32824ab22ad9$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $f79e32824ab22ad9$var$errorOrDestroy = $8DFir.errorOrDestroy;

(parcelRequire("cvM26"))($f79e32824ab22ad9$var$Writable, $gYOQs);
function $f79e32824ab22ad9$var$nop() {
}

function $f79e32824ab22ad9$var$WritableState(options, stream, isDuplex) {
    $f79e32824ab22ad9$var$Duplex = $f79e32824ab22ad9$var$Duplex || (parcelRequire("3SHpa"));
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $f79e32824ab22ad9$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $f79e32824ab22ad9$var$getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $f79e32824ab22ad9$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $f79e32824ab22ad9$var$CorkedRequest(this);
}
$f79e32824ab22ad9$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($f79e32824ab22ad9$var$WritableState.prototype, 'buffer', {
            get: $f79e32824ab22ad9$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $f79e32824ab22ad9$var$realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    $f79e32824ab22ad9$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($f79e32824ab22ad9$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($f79e32824ab22ad9$var$realHasInstance.call(this, object)) return true;
            if (this !== $f79e32824ab22ad9$var$Writable) return false;
            return object && object._writableState instanceof $f79e32824ab22ad9$var$WritableState;
        }
    });
} else $f79e32824ab22ad9$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $f79e32824ab22ad9$var$Writable(options) {
    $f79e32824ab22ad9$var$Duplex = $f79e32824ab22ad9$var$Duplex || (parcelRequire("3SHpa")); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $f79e32824ab22ad9$var$Duplex;
    if (!isDuplex && !$f79e32824ab22ad9$var$realHasInstance.call($f79e32824ab22ad9$var$Writable, this)) return new $f79e32824ab22ad9$var$Writable(options);
    this._writableState = new $f79e32824ab22ad9$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    $gYOQs.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$f79e32824ab22ad9$var$Writable.prototype.pipe = function() {
    $f79e32824ab22ad9$var$errorOrDestroy(this, new $f79e32824ab22ad9$var$ERR_STREAM_CANNOT_PIPE());
};
function $f79e32824ab22ad9$var$writeAfterEnd(stream, cb) {
    var er = new $f79e32824ab22ad9$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $f79e32824ab22ad9$var$errorOrDestroy(stream, er);
    $7pjJT.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $f79e32824ab22ad9$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $f79e32824ab22ad9$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new $f79e32824ab22ad9$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        $f79e32824ab22ad9$var$errorOrDestroy(stream, er);
        $7pjJT.nextTick(cb, er);
        return false;
    }
    return true;
}
$f79e32824ab22ad9$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $f79e32824ab22ad9$var$_isUint8Array(chunk);
    if (isBuf && !$f79e32824ab22ad9$require$Buffer.isBuffer(chunk)) chunk = $f79e32824ab22ad9$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = $f79e32824ab22ad9$var$nop;
    if (state.ending) $f79e32824ab22ad9$var$writeAfterEnd(this, cb);
    else if (isBuf || $f79e32824ab22ad9$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $f79e32824ab22ad9$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$f79e32824ab22ad9$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$f79e32824ab22ad9$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $f79e32824ab22ad9$var$clearBuffer(this, state);
    }
};
$f79e32824ab22ad9$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new $f79e32824ab22ad9$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($f79e32824ab22ad9$var$Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $f79e32824ab22ad9$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = $f79e32824ab22ad9$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($f79e32824ab22ad9$var$Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $f79e32824ab22ad9$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $f79e32824ab22ad9$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $f79e32824ab22ad9$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $f79e32824ab22ad9$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $f79e32824ab22ad9$var$ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $f79e32824ab22ad9$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $7pjJT.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        $7pjJT.nextTick($f79e32824ab22ad9$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $f79e32824ab22ad9$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $f79e32824ab22ad9$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $f79e32824ab22ad9$var$finishMaybe(stream, state);
    }
}
function $f79e32824ab22ad9$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $f79e32824ab22ad9$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new $f79e32824ab22ad9$var$ERR_MULTIPLE_CALLBACK();
    $f79e32824ab22ad9$var$onwriteStateUpdate(state);
    if (er) $f79e32824ab22ad9$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $f79e32824ab22ad9$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $f79e32824ab22ad9$var$clearBuffer(stream, state);
        if (sync) $7pjJT.nextTick($f79e32824ab22ad9$var$afterWrite, stream, state, finished, cb);
        else $f79e32824ab22ad9$var$afterWrite(stream, state, finished, cb);
    }
}
function $f79e32824ab22ad9$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $f79e32824ab22ad9$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $f79e32824ab22ad9$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $f79e32824ab22ad9$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function $f79e32824ab22ad9$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $f79e32824ab22ad9$var$doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $f79e32824ab22ad9$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $f79e32824ab22ad9$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$f79e32824ab22ad9$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $f79e32824ab22ad9$var$ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
$f79e32824ab22ad9$var$Writable.prototype._writev = null;
$f79e32824ab22ad9$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $f79e32824ab22ad9$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($f79e32824ab22ad9$var$Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $f79e32824ab22ad9$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $f79e32824ab22ad9$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $f79e32824ab22ad9$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        $f79e32824ab22ad9$var$finishMaybe(stream, state);
    });
}
function $f79e32824ab22ad9$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $7pjJT.nextTick($f79e32824ab22ad9$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function $f79e32824ab22ad9$var$finishMaybe(stream, state) {
    var need = $f79e32824ab22ad9$var$needFinish(state);
    if (need) {
        $f79e32824ab22ad9$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $f79e32824ab22ad9$var$endWritable(stream, state, cb) {
    state.ending = true;
    $f79e32824ab22ad9$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $7pjJT.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $f79e32824ab22ad9$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($f79e32824ab22ad9$var$Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$f79e32824ab22ad9$var$Writable.prototype.destroy = $8DFir.destroy;
$f79e32824ab22ad9$var$Writable.prototype._undestroy = $8DFir.undestroy;
$f79e32824ab22ad9$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});
parcelRequire.register("ecXVU", function(module, exports) {
/**
 * Module exports.
 */ module.exports = $a580ad1d4f2ac25e$var$deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function $a580ad1d4f2ac25e$var$deprecate(fn, msg) {
    if ($a580ad1d4f2ac25e$var$config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($a580ad1d4f2ac25e$var$config('throwDeprecation')) throw new Error(msg);
            else if ($a580ad1d4f2ac25e$var$config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function $a580ad1d4f2ac25e$var$config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!$parcel$global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = $parcel$global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

});



parcelRequire.register("kNIJ9", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", () => $f24b142424f8e3ed$export$63a7aa211a91ed69, (v) => $f24b142424f8e3ed$export$63a7aa211a91ed69 = v);
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $f24b142424f8e3ed$export$63a7aa211a91ed69;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $ahmAR = parcelRequire("ahmAR");
var $f24b142424f8e3ed$require$Buffer = $ahmAR.Buffer;
/*</replacement>*/ var $f24b142424f8e3ed$var$isEncoding = $f24b142424f8e3ed$require$Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function $f24b142424f8e3ed$var$_normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $f24b142424f8e3ed$var$normalizeEncoding(enc) {
    var nenc = $f24b142424f8e3ed$var$_normalizeEncoding(enc);
    if (typeof nenc !== 'string' && ($f24b142424f8e3ed$require$Buffer.isEncoding === $f24b142424f8e3ed$var$isEncoding || !$f24b142424f8e3ed$var$isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
$f24b142424f8e3ed$export$63a7aa211a91ed69 = $f24b142424f8e3ed$var$StringDecoder;
function $f24b142424f8e3ed$var$StringDecoder(encoding) {
    this.encoding = $f24b142424f8e3ed$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = $f24b142424f8e3ed$var$utf16Text;
            this.end = $f24b142424f8e3ed$var$utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = $f24b142424f8e3ed$var$utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = $f24b142424f8e3ed$var$base64Text;
            this.end = $f24b142424f8e3ed$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $f24b142424f8e3ed$var$simpleWrite;
            this.end = $f24b142424f8e3ed$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $f24b142424f8e3ed$require$Buffer.allocUnsafe(nb);
}
$f24b142424f8e3ed$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
$f24b142424f8e3ed$var$StringDecoder.prototype.end = $f24b142424f8e3ed$var$utf8End;
// Returns only complete characters in a Buffer
$f24b142424f8e3ed$var$StringDecoder.prototype.text = $f24b142424f8e3ed$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$f24b142424f8e3ed$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $f24b142424f8e3ed$var$utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $f24b142424f8e3ed$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $f24b142424f8e3ed$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $f24b142424f8e3ed$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $f24b142424f8e3ed$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $f24b142424f8e3ed$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $f24b142424f8e3ed$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $f24b142424f8e3ed$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $f24b142424f8e3ed$var$utf8Text(buf, i) {
    var total = $f24b142424f8e3ed$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $f24b142424f8e3ed$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $f24b142424f8e3ed$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $f24b142424f8e3ed$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function $f24b142424f8e3ed$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function $f24b142424f8e3ed$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $f24b142424f8e3ed$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $f24b142424f8e3ed$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

});

parcelRequire.register("3g8qs", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
'use strict';
var $25f966e548749dfa$var$_Object$setPrototypeO;
function $25f966e548749dfa$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

var $ekicx = parcelRequire("ekicx");
var $25f966e548749dfa$var$kLastResolve = Symbol('lastResolve');
var $25f966e548749dfa$var$kLastReject = Symbol('lastReject');
var $25f966e548749dfa$var$kError = Symbol('error');
var $25f966e548749dfa$var$kEnded = Symbol('ended');
var $25f966e548749dfa$var$kLastPromise = Symbol('lastPromise');
var $25f966e548749dfa$var$kHandlePromise = Symbol('handlePromise');
var $25f966e548749dfa$var$kStream = Symbol('stream');
function $25f966e548749dfa$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $25f966e548749dfa$var$readAndResolve(iter) {
    var resolve = iter[$25f966e548749dfa$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$25f966e548749dfa$var$kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$25f966e548749dfa$var$kLastPromise] = null;
            iter[$25f966e548749dfa$var$kLastResolve] = null;
            iter[$25f966e548749dfa$var$kLastReject] = null;
            resolve($25f966e548749dfa$var$createIterResult(data, false));
        }
    }
}
function $25f966e548749dfa$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $7pjJT.nextTick($25f966e548749dfa$var$readAndResolve, iter);
}
function $25f966e548749dfa$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$25f966e548749dfa$var$kEnded]) {
                resolve($25f966e548749dfa$var$createIterResult(undefined, true));
                return;
            }
            iter[$25f966e548749dfa$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $25f966e548749dfa$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var $25f966e548749dfa$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($25f966e548749dfa$var$_Object$setPrototypeO = {
    get stream () {
        return this[$25f966e548749dfa$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$25f966e548749dfa$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$25f966e548749dfa$var$kEnded]) return Promise.resolve($25f966e548749dfa$var$createIterResult(undefined, true));
        if (this[$25f966e548749dfa$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $7pjJT.nextTick(function() {
                if (_this[$25f966e548749dfa$var$kError]) reject(_this[$25f966e548749dfa$var$kError]);
                else resolve($25f966e548749dfa$var$createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$25f966e548749dfa$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($25f966e548749dfa$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$25f966e548749dfa$var$kStream].read();
            if (data !== null) return Promise.resolve($25f966e548749dfa$var$createIterResult(data, false));
            promise = new Promise(this[$25f966e548749dfa$var$kHandlePromise]);
        }
        this[$25f966e548749dfa$var$kLastPromise] = promise;
        return promise;
    }
}, $25f966e548749dfa$var$_defineProperty($25f966e548749dfa$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $25f966e548749dfa$var$_defineProperty($25f966e548749dfa$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$25f966e548749dfa$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($25f966e548749dfa$var$createIterResult(undefined, true));
        });
    });
}), $25f966e548749dfa$var$_Object$setPrototypeO), $25f966e548749dfa$var$AsyncIteratorPrototype);
var $25f966e548749dfa$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($25f966e548749dfa$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, $25f966e548749dfa$var$_defineProperty(_Object$create, $25f966e548749dfa$var$kStream, {
        value: stream,
        writable: true
    }), $25f966e548749dfa$var$_defineProperty(_Object$create, $25f966e548749dfa$var$kLastResolve, {
        value: null,
        writable: true
    }), $25f966e548749dfa$var$_defineProperty(_Object$create, $25f966e548749dfa$var$kLastReject, {
        value: null,
        writable: true
    }), $25f966e548749dfa$var$_defineProperty(_Object$create, $25f966e548749dfa$var$kError, {
        value: null,
        writable: true
    }), $25f966e548749dfa$var$_defineProperty(_Object$create, $25f966e548749dfa$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $25f966e548749dfa$var$_defineProperty(_Object$create, $25f966e548749dfa$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$25f966e548749dfa$var$kStream].read();
            if (data) {
                iterator[$25f966e548749dfa$var$kLastPromise] = null;
                iterator[$25f966e548749dfa$var$kLastResolve] = null;
                iterator[$25f966e548749dfa$var$kLastReject] = null;
                resolve($25f966e548749dfa$var$createIterResult(data, false));
            } else {
                iterator[$25f966e548749dfa$var$kLastResolve] = resolve;
                iterator[$25f966e548749dfa$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$25f966e548749dfa$var$kLastPromise] = null;
    $ekicx(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[$25f966e548749dfa$var$kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$25f966e548749dfa$var$kLastPromise] = null;
                iterator[$25f966e548749dfa$var$kLastResolve] = null;
                iterator[$25f966e548749dfa$var$kLastReject] = null;
                reject(err);
            }
            iterator[$25f966e548749dfa$var$kError] = err;
            return;
        }
        var resolve = iterator[$25f966e548749dfa$var$kLastResolve];
        if (resolve !== null) {
            iterator[$25f966e548749dfa$var$kLastPromise] = null;
            iterator[$25f966e548749dfa$var$kLastResolve] = null;
            iterator[$25f966e548749dfa$var$kLastReject] = null;
            resolve($25f966e548749dfa$var$createIterResult(undefined, true));
        }
        iterator[$25f966e548749dfa$var$kEnded] = true;
    });
    stream.on('readable', $25f966e548749dfa$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $25f966e548749dfa$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("ekicx", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var $2Vbms = parcelRequire("2Vbms");
var $a6e10d5973675d34$var$ERR_STREAM_PREMATURE_CLOSE = $2Vbms.codes.ERR_STREAM_PREMATURE_CLOSE;
function $a6e10d5973675d34$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $a6e10d5973675d34$var$noop() {
}
function $a6e10d5973675d34$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function $a6e10d5973675d34$var$eos(stream, opts, callback) {
    if (typeof opts === 'function') return $a6e10d5973675d34$var$eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = $a6e10d5973675d34$var$once(callback || $a6e10d5973675d34$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $a6e10d5973675d34$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $a6e10d5973675d34$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if ($a6e10d5973675d34$var$isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = $a6e10d5973675d34$var$eos;

});


parcelRequire.register("B1Lpd", function(module, exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

});


parcelRequire.register("cbvNx", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = $8def2d85ac5d2729$var$Transform;

var $2Vbms = parcelRequire("2Vbms");
var $8def2d85ac5d2729$require$_require$codes = $2Vbms.codes;
var $8def2d85ac5d2729$var$ERR_METHOD_NOT_IMPLEMENTED = $8def2d85ac5d2729$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $8def2d85ac5d2729$var$ERR_MULTIPLE_CALLBACK = $8def2d85ac5d2729$require$_require$codes.ERR_MULTIPLE_CALLBACK, $8def2d85ac5d2729$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $8def2d85ac5d2729$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $8def2d85ac5d2729$var$ERR_TRANSFORM_WITH_LENGTH_0 = $8def2d85ac5d2729$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $3SHpa = parcelRequire("3SHpa");

(parcelRequire("cvM26"))($8def2d85ac5d2729$var$Transform, $3SHpa);
function $8def2d85ac5d2729$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new $8def2d85ac5d2729$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $8def2d85ac5d2729$var$Transform(options) {
    if (!(this instanceof $8def2d85ac5d2729$var$Transform)) return new $8def2d85ac5d2729$var$Transform(options);
    $3SHpa.call(this, options);
    this._transformState = {
        afterTransform: $8def2d85ac5d2729$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', $8def2d85ac5d2729$var$prefinish);
}
function $8def2d85ac5d2729$var$prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        $8def2d85ac5d2729$var$done(_this, er, data);
    });
    else $8def2d85ac5d2729$var$done(this, null, null);
}
$8def2d85ac5d2729$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $3SHpa.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$8def2d85ac5d2729$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $8def2d85ac5d2729$var$ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
$8def2d85ac5d2729$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$8def2d85ac5d2729$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$8def2d85ac5d2729$var$Transform.prototype._destroy = function(err, cb) {
    $3SHpa.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $8def2d85ac5d2729$var$done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $8def2d85ac5d2729$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $8def2d85ac5d2729$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("g8hAF", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = $bbeb09cf3842bc6e$var$PassThrough;

var $cbvNx = parcelRequire("cbvNx");

(parcelRequire("cvM26"))($bbeb09cf3842bc6e$var$PassThrough, $cbvNx);
function $bbeb09cf3842bc6e$var$PassThrough(options) {
    if (!(this instanceof $bbeb09cf3842bc6e$var$PassThrough)) return new $bbeb09cf3842bc6e$var$PassThrough(options);
    $cbvNx.call(this, options);
}
$bbeb09cf3842bc6e$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("1Rq99", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var $15af05d5bfeeeef2$var$eos;
function $15af05d5bfeeeef2$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $2Vbms = parcelRequire("2Vbms");
var $15af05d5bfeeeef2$require$_require$codes = $2Vbms.codes;
var $15af05d5bfeeeef2$var$ERR_MISSING_ARGS = $15af05d5bfeeeef2$require$_require$codes.ERR_MISSING_ARGS, $15af05d5bfeeeef2$var$ERR_STREAM_DESTROYED = $15af05d5bfeeeef2$require$_require$codes.ERR_STREAM_DESTROYED;
function $15af05d5bfeeeef2$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $15af05d5bfeeeef2$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}

function $15af05d5bfeeeef2$var$destroyer(stream, reading, writing, callback) {
    callback = $15af05d5bfeeeef2$var$once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if ($15af05d5bfeeeef2$var$eos === undefined) $15af05d5bfeeeef2$var$eos = (parcelRequire("ekicx"));
    $15af05d5bfeeeef2$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($15af05d5bfeeeef2$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new $15af05d5bfeeeef2$var$ERR_STREAM_DESTROYED('pipe'));
    };
}
function $15af05d5bfeeeef2$var$call(fn) {
    fn();
}
function $15af05d5bfeeeef2$var$pipe(from, to) {
    return from.pipe(to);
}
function $15af05d5bfeeeef2$var$popCallback(streams) {
    if (!streams.length) return $15af05d5bfeeeef2$var$noop;
    if (typeof streams[streams.length - 1] !== 'function') return $15af05d5bfeeeef2$var$noop;
    return streams.pop();
}
function $15af05d5bfeeeef2$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $15af05d5bfeeeef2$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $15af05d5bfeeeef2$var$ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $15af05d5bfeeeef2$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($15af05d5bfeeeef2$var$call);
            if (reading) return;
            destroys.forEach($15af05d5bfeeeef2$var$call);
            callback(error);
        });
    });
    return streams.reduce($15af05d5bfeeeef2$var$pipe);
}
module.exports = $15af05d5bfeeeef2$var$pipeline;

});




parcelRequire.register("62npl", function(module, exports) {
'use strict';

var $fV0m8 = parcelRequire("fV0m8");
var $4655164218ae94b2$require$Buffer = $fV0m8.Buffer;

var $cvM26 = parcelRequire("cvM26");

var $lWdHY = parcelRequire("lWdHY");
var $4655164218ae94b2$var$ARRAY16 = new Array(16);
var $4655164218ae94b2$var$zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $4655164218ae94b2$var$zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $4655164218ae94b2$var$sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $4655164218ae94b2$var$sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var $4655164218ae94b2$var$hl = [
    0,
    1518500249,
    1859775393,
    2400959708,
    2840853838
];
var $4655164218ae94b2$var$hr = [
    1352829926,
    1548603684,
    1836072691,
    2053994217,
    0
];
function $4655164218ae94b2$var$RIPEMD160() {
    $lWdHY.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
}
$cvM26($4655164218ae94b2$var$RIPEMD160, $lWdHY);
$4655164218ae94b2$var$RIPEMD160.prototype._update = function() {
    var words = $4655164218ae94b2$var$ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = $4655164218ae94b2$var$fn1(al, bl, cl, dl, el, words[$4655164218ae94b2$var$zl[i]], $4655164218ae94b2$var$hl[0], $4655164218ae94b2$var$sl[i]);
            tr = $4655164218ae94b2$var$fn5(ar, br, cr, dr, er, words[$4655164218ae94b2$var$zr[i]], $4655164218ae94b2$var$hr[0], $4655164218ae94b2$var$sr[i]);
        } else if (i < 32) {
            tl = $4655164218ae94b2$var$fn2(al, bl, cl, dl, el, words[$4655164218ae94b2$var$zl[i]], $4655164218ae94b2$var$hl[1], $4655164218ae94b2$var$sl[i]);
            tr = $4655164218ae94b2$var$fn4(ar, br, cr, dr, er, words[$4655164218ae94b2$var$zr[i]], $4655164218ae94b2$var$hr[1], $4655164218ae94b2$var$sr[i]);
        } else if (i < 48) {
            tl = $4655164218ae94b2$var$fn3(al, bl, cl, dl, el, words[$4655164218ae94b2$var$zl[i]], $4655164218ae94b2$var$hl[2], $4655164218ae94b2$var$sl[i]);
            tr = $4655164218ae94b2$var$fn3(ar, br, cr, dr, er, words[$4655164218ae94b2$var$zr[i]], $4655164218ae94b2$var$hr[2], $4655164218ae94b2$var$sr[i]);
        } else if (i < 64) {
            tl = $4655164218ae94b2$var$fn4(al, bl, cl, dl, el, words[$4655164218ae94b2$var$zl[i]], $4655164218ae94b2$var$hl[3], $4655164218ae94b2$var$sl[i]);
            tr = $4655164218ae94b2$var$fn2(ar, br, cr, dr, er, words[$4655164218ae94b2$var$zr[i]], $4655164218ae94b2$var$hr[3], $4655164218ae94b2$var$sr[i]);
        } else {
            tl = $4655164218ae94b2$var$fn5(al, bl, cl, dl, el, words[$4655164218ae94b2$var$zl[i]], $4655164218ae94b2$var$hl[4], $4655164218ae94b2$var$sl[i]);
            tr = $4655164218ae94b2$var$fn1(ar, br, cr, dr, er, words[$4655164218ae94b2$var$zr[i]], $4655164218ae94b2$var$hr[4], $4655164218ae94b2$var$sr[i]);
        }
        al = el;
        el = dl;
        dl = $4655164218ae94b2$var$rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = $4655164218ae94b2$var$rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
$4655164218ae94b2$var$RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $4655164218ae94b2$require$Buffer.alloc ? $4655164218ae94b2$require$Buffer.alloc(20) : new $4655164218ae94b2$require$Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function $4655164218ae94b2$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $4655164218ae94b2$var$fn1(a, b, c, d, e, m, k, s) {
    return $4655164218ae94b2$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function $4655164218ae94b2$var$fn2(a, b, c, d, e, m, k, s) {
    return $4655164218ae94b2$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function $4655164218ae94b2$var$fn3(a, b, c, d, e, m, k, s) {
    return $4655164218ae94b2$var$rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function $4655164218ae94b2$var$fn4(a, b, c, d, e, m, k, s) {
    return $4655164218ae94b2$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function $4655164218ae94b2$var$fn5(a, b, c, d, e, m, k, s) {
    return $4655164218ae94b2$var$rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = $4655164218ae94b2$var$RIPEMD160;

});

parcelRequire.register("iiXyM", function(module, exports) {
var $d5381bccd3c9452a$var$exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = $d5381bccd3c9452a$var$exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
};

$d5381bccd3c9452a$var$exports.sha = (parcelRequire("jMxqX"));

$d5381bccd3c9452a$var$exports.sha1 = (parcelRequire("8Li7J"));

$d5381bccd3c9452a$var$exports.sha224 = (parcelRequire("1lWe5"));

$d5381bccd3c9452a$var$exports.sha256 = (parcelRequire("7s8Rn"));

$d5381bccd3c9452a$var$exports.sha384 = (parcelRequire("g1PED"));

$d5381bccd3c9452a$var$exports.sha512 = (parcelRequire("1414W"));

});
parcelRequire.register("jMxqX", function(module, exports) {

var $cvM26 = parcelRequire("cvM26");

var $4qPM8 = parcelRequire("4qPM8");

var $ahmAR = parcelRequire("ahmAR");
var $e66c6f3f7653e634$require$Buffer = $ahmAR.Buffer;
var $e66c6f3f7653e634$var$K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var $e66c6f3f7653e634$var$W = new Array(80);
function $e66c6f3f7653e634$var$Sha() {
    this.init();
    this._w = $e66c6f3f7653e634$var$W;
    $4qPM8.call(this, 64, 56);
}
$cvM26($e66c6f3f7653e634$var$Sha, $4qPM8);
$e66c6f3f7653e634$var$Sha.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function $e66c6f3f7653e634$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $e66c6f3f7653e634$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $e66c6f3f7653e634$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$e66c6f3f7653e634$var$Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $e66c6f3f7653e634$var$rotl5(a) + $e66c6f3f7653e634$var$ft(s, b, c, d) + e + W[j] + $e66c6f3f7653e634$var$K[s] | 0;
        e = d;
        d = c;
        c = $e66c6f3f7653e634$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$e66c6f3f7653e634$var$Sha.prototype._hash = function() {
    var H = $e66c6f3f7653e634$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $e66c6f3f7653e634$var$Sha;

});
parcelRequire.register("4qPM8", function(module, exports) {

var $ahmAR = parcelRequire("ahmAR");
var $33a1c0a9e1b15f8d$require$Buffer = $ahmAR.Buffer;
// prototype class for hash functions
function $33a1c0a9e1b15f8d$var$Hash(blockSize, finalSize) {
    this._block = $33a1c0a9e1b15f8d$require$Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
$33a1c0a9e1b15f8d$var$Hash.prototype.update = function(data, enc) {
    if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = $33a1c0a9e1b15f8d$require$Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
$33a1c0a9e1b15f8d$var$Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 128;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 4294967295) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
$33a1c0a9e1b15f8d$var$Hash.prototype._update = function() {
    throw new Error('_update must be implemented by subclass');
};
module.exports = $33a1c0a9e1b15f8d$var$Hash;

});


parcelRequire.register("8Li7J", function(module, exports) {

var $cvM26 = parcelRequire("cvM26");

var $4qPM8 = parcelRequire("4qPM8");

var $ahmAR = parcelRequire("ahmAR");
var $6610c582356dddeb$require$Buffer = $ahmAR.Buffer;
var $6610c582356dddeb$var$K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var $6610c582356dddeb$var$W = new Array(80);
function $6610c582356dddeb$var$Sha1() {
    this.init();
    this._w = $6610c582356dddeb$var$W;
    $4qPM8.call(this, 64, 56);
}
$cvM26($6610c582356dddeb$var$Sha1, $4qPM8);
$6610c582356dddeb$var$Sha1.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function $6610c582356dddeb$var$rotl1(num) {
    return num << 1 | num >>> 31;
}
function $6610c582356dddeb$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $6610c582356dddeb$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $6610c582356dddeb$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$6610c582356dddeb$var$Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = $6610c582356dddeb$var$rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $6610c582356dddeb$var$rotl5(a) + $6610c582356dddeb$var$ft(s, b, c, d) + e + W[j] + $6610c582356dddeb$var$K[s] | 0;
        e = d;
        d = c;
        c = $6610c582356dddeb$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$6610c582356dddeb$var$Sha1.prototype._hash = function() {
    var H = $6610c582356dddeb$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $6610c582356dddeb$var$Sha1;

});

parcelRequire.register("1lWe5", function(module, exports) {

var $cvM26 = parcelRequire("cvM26");

var $7s8Rn = parcelRequire("7s8Rn");

var $4qPM8 = parcelRequire("4qPM8");

var $ahmAR = parcelRequire("ahmAR");
var $0fc4eb1fa8d03313$require$Buffer = $ahmAR.Buffer;
var $0fc4eb1fa8d03313$var$W = new Array(64);
function $0fc4eb1fa8d03313$var$Sha224() {
    this.init();
    this._w = $0fc4eb1fa8d03313$var$W // new Array(64)
    ;
    $4qPM8.call(this, 64, 56);
}
$cvM26($0fc4eb1fa8d03313$var$Sha224, $7s8Rn);
$0fc4eb1fa8d03313$var$Sha224.prototype.init = function() {
    this._a = 3238371032;
    this._b = 914150663;
    this._c = 812702999;
    this._d = 4144912697;
    this._e = 4290775857;
    this._f = 1750603025;
    this._g = 1694076839;
    this._h = 3204075428;
    return this;
};
$0fc4eb1fa8d03313$var$Sha224.prototype._hash = function() {
    var H = $0fc4eb1fa8d03313$require$Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = $0fc4eb1fa8d03313$var$Sha224;

});
parcelRequire.register("7s8Rn", function(module, exports) {

var $cvM26 = parcelRequire("cvM26");

var $4qPM8 = parcelRequire("4qPM8");

var $ahmAR = parcelRequire("ahmAR");
var $56d2054e61c53ae7$require$Buffer = $ahmAR.Buffer;
var $56d2054e61c53ae7$var$K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
var $56d2054e61c53ae7$var$W = new Array(64);
function $56d2054e61c53ae7$var$Sha256() {
    this.init();
    this._w = $56d2054e61c53ae7$var$W // new Array(64)
    ;
    $4qPM8.call(this, 64, 56);
}
$cvM26($56d2054e61c53ae7$var$Sha256, $4qPM8);
$56d2054e61c53ae7$var$Sha256.prototype.init = function() {
    this._a = 1779033703;
    this._b = 3144134277;
    this._c = 1013904242;
    this._d = 2773480762;
    this._e = 1359893119;
    this._f = 2600822924;
    this._g = 528734635;
    this._h = 1541459225;
    return this;
};
function $56d2054e61c53ae7$var$ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $56d2054e61c53ae7$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $56d2054e61c53ae7$var$sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function $56d2054e61c53ae7$var$sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function $56d2054e61c53ae7$var$gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function $56d2054e61c53ae7$var$gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
$56d2054e61c53ae7$var$Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = $56d2054e61c53ae7$var$gamma1(W[i - 2]) + W[i - 7] + $56d2054e61c53ae7$var$gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + $56d2054e61c53ae7$var$sigma1(e) + $56d2054e61c53ae7$var$ch(e, f, g) + $56d2054e61c53ae7$var$K[j] + W[j] | 0;
        var T2 = $56d2054e61c53ae7$var$sigma0(a) + $56d2054e61c53ae7$var$maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
$56d2054e61c53ae7$var$Sha256.prototype._hash = function() {
    var H = $56d2054e61c53ae7$require$Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = $56d2054e61c53ae7$var$Sha256;

});


parcelRequire.register("g1PED", function(module, exports) {

var $cvM26 = parcelRequire("cvM26");

var $1414W = parcelRequire("1414W");

var $4qPM8 = parcelRequire("4qPM8");

var $ahmAR = parcelRequire("ahmAR");
var $bab4ceccc5e3a129$require$Buffer = $ahmAR.Buffer;
var $bab4ceccc5e3a129$var$W = new Array(160);
function $bab4ceccc5e3a129$var$Sha384() {
    this.init();
    this._w = $bab4ceccc5e3a129$var$W;
    $4qPM8.call(this, 128, 112);
}
$cvM26($bab4ceccc5e3a129$var$Sha384, $1414W);
$bab4ceccc5e3a129$var$Sha384.prototype.init = function() {
    this._ah = 3418070365;
    this._bh = 1654270250;
    this._ch = 2438529370;
    this._dh = 355462360;
    this._eh = 1731405415;
    this._fh = 2394180231;
    this._gh = 3675008525;
    this._hh = 1203062813;
    this._al = 3238371032;
    this._bl = 914150663;
    this._cl = 812702999;
    this._dl = 4144912697;
    this._el = 4290775857;
    this._fl = 1750603025;
    this._gl = 1694076839;
    this._hl = 3204075428;
    return this;
};
$bab4ceccc5e3a129$var$Sha384.prototype._hash = function() {
    var H = $bab4ceccc5e3a129$require$Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = $bab4ceccc5e3a129$var$Sha384;

});
parcelRequire.register("1414W", function(module, exports) {

var $cvM26 = parcelRequire("cvM26");

var $4qPM8 = parcelRequire("4qPM8");

var $ahmAR = parcelRequire("ahmAR");
var $0c67005fccd22bcd$require$Buffer = $ahmAR.Buffer;
var $0c67005fccd22bcd$var$K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
var $0c67005fccd22bcd$var$W = new Array(160);
function $0c67005fccd22bcd$var$Sha512() {
    this.init();
    this._w = $0c67005fccd22bcd$var$W;
    $4qPM8.call(this, 128, 112);
}
$cvM26($0c67005fccd22bcd$var$Sha512, $4qPM8);
$0c67005fccd22bcd$var$Sha512.prototype.init = function() {
    this._ah = 1779033703;
    this._bh = 3144134277;
    this._ch = 1013904242;
    this._dh = 2773480762;
    this._eh = 1359893119;
    this._fh = 2600822924;
    this._gh = 528734635;
    this._hh = 1541459225;
    this._al = 4089235720;
    this._bl = 2227873595;
    this._cl = 4271175723;
    this._dl = 1595750129;
    this._el = 2917565137;
    this._fl = 725511199;
    this._gl = 4215389547;
    this._hl = 327033209;
    return this;
};
function $0c67005fccd22bcd$var$Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $0c67005fccd22bcd$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $0c67005fccd22bcd$var$sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function $0c67005fccd22bcd$var$sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function $0c67005fccd22bcd$var$Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function $0c67005fccd22bcd$var$Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function $0c67005fccd22bcd$var$Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function $0c67005fccd22bcd$var$Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function $0c67005fccd22bcd$var$getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
$0c67005fccd22bcd$var$Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = $0c67005fccd22bcd$var$Gamma0(xh, xl);
        var gamma0l = $0c67005fccd22bcd$var$Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = $0c67005fccd22bcd$var$Gamma1(xh, xl);
        var gamma1l = $0c67005fccd22bcd$var$Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + $0c67005fccd22bcd$var$getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + $0c67005fccd22bcd$var$getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + $0c67005fccd22bcd$var$getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = $0c67005fccd22bcd$var$maj(ah, bh, ch);
        var majl = $0c67005fccd22bcd$var$maj(al, bl, cl);
        var sigma0h = $0c67005fccd22bcd$var$sigma0(ah, al);
        var sigma0l = $0c67005fccd22bcd$var$sigma0(al, ah);
        var sigma1h = $0c67005fccd22bcd$var$sigma1(eh, el);
        var sigma1l = $0c67005fccd22bcd$var$sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = $0c67005fccd22bcd$var$K[j];
        var Kil = $0c67005fccd22bcd$var$K[j + 1];
        var chh = $0c67005fccd22bcd$var$Ch(eh, fh, gh);
        var chl = $0c67005fccd22bcd$var$Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + $0c67005fccd22bcd$var$getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + $0c67005fccd22bcd$var$getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + $0c67005fccd22bcd$var$getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + $0c67005fccd22bcd$var$getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + $0c67005fccd22bcd$var$getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + $0c67005fccd22bcd$var$getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + $0c67005fccd22bcd$var$getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + $0c67005fccd22bcd$var$getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + $0c67005fccd22bcd$var$getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + $0c67005fccd22bcd$var$getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + $0c67005fccd22bcd$var$getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + $0c67005fccd22bcd$var$getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + $0c67005fccd22bcd$var$getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + $0c67005fccd22bcd$var$getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + $0c67005fccd22bcd$var$getCarry(this._hl, hl) | 0;
};
$0c67005fccd22bcd$var$Sha512.prototype._hash = function() {
    var H = $0c67005fccd22bcd$require$Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = $0c67005fccd22bcd$var$Sha512;

});



parcelRequire.register("lTHWE", function(module, exports) {

var $ahmAR = parcelRequire("ahmAR");
var $ff10d291c9665daf$require$Buffer = $ahmAR.Buffer;

var $4o0yP = parcelRequire("4o0yP");
var $ff10d291c9665daf$require$Transform = $4o0yP.Transform;

var $koxtS = parcelRequire("koxtS");
var $ff10d291c9665daf$require$StringDecoder = $koxtS.StringDecoder;

var $cvM26 = parcelRequire("cvM26");
function $ff10d291c9665daf$var$CipherBase(hashMode) {
    $ff10d291c9665daf$require$Transform.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
$cvM26($ff10d291c9665daf$var$CipherBase, $ff10d291c9665daf$require$Transform);
$ff10d291c9665daf$var$CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === 'string') data = $ff10d291c9665daf$require$Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
$ff10d291c9665daf$var$CipherBase.prototype.setAutoPadding = function() {
};
$ff10d291c9665daf$var$CipherBase.prototype.getAuthTag = function() {
    throw new Error('trying to get auth tag in unsupported state');
};
$ff10d291c9665daf$var$CipherBase.prototype.setAuthTag = function() {
    throw new Error('trying to set auth tag in unsupported state');
};
$ff10d291c9665daf$var$CipherBase.prototype.setAAD = function() {
    throw new Error('trying to set aad in unsupported state');
};
$ff10d291c9665daf$var$CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
$ff10d291c9665daf$var$CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
$ff10d291c9665daf$var$CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || $ff10d291c9665daf$require$Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
$ff10d291c9665daf$var$CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new $ff10d291c9665daf$require$StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error('can\'t switch encodings');
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = $ff10d291c9665daf$var$CipherBase;

});
parcelRequire.register("4o0yP", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = $3319d6a5464b2855$var$Stream;

var $is9nt = parcelRequire("is9nt");
var $3319d6a5464b2855$require$EE = $is9nt.EventEmitter;

var $cvM26 = parcelRequire("cvM26");
$cvM26($3319d6a5464b2855$var$Stream, $3319d6a5464b2855$require$EE);

$3319d6a5464b2855$var$Stream.Readable = (parcelRequire("9iA4K"));

$3319d6a5464b2855$var$Stream.Writable = (parcelRequire("71oRY"));

$3319d6a5464b2855$var$Stream.Duplex = (parcelRequire("8BycO"));

$3319d6a5464b2855$var$Stream.Transform = (parcelRequire("4w4hj"));

$3319d6a5464b2855$var$Stream.PassThrough = (parcelRequire("hx2sL"));

$3319d6a5464b2855$var$Stream.finished = (parcelRequire("aMwrW"));

$3319d6a5464b2855$var$Stream.pipeline = (parcelRequire("3PLxT"));
// Backwards-compat with node 0.4.x
$3319d6a5464b2855$var$Stream.Stream = $3319d6a5464b2855$var$Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function $3319d6a5464b2855$var$Stream() {
    $3319d6a5464b2855$require$EE.call(this);
}
$3319d6a5464b2855$var$Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on('data', ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on('drain', ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === 'function') dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if ($3319d6a5464b2855$require$EE.listenerCount(this, 'error') === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on('error', onerror);
    dest.on('error', onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
        dest.removeListener('close', cleanup);
    }
    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

});
parcelRequire.register("9iA4K", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
module.exports = $6c51c75d9c16c701$var$Readable;
/*<replacement>*/ var $6c51c75d9c16c701$var$Duplex;
/*</replacement>*/ $6c51c75d9c16c701$var$Readable.ReadableState = $6c51c75d9c16c701$var$ReadableState;

var $is9nt = parcelRequire("is9nt");
var $6c51c75d9c16c701$require$EE = $is9nt.EventEmitter;
var $6c51c75d9c16c701$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $b6SnL = parcelRequire("b6SnL");

var $fV0m8 = parcelRequire("fV0m8");
var $6c51c75d9c16c701$require$Buffer = $fV0m8.Buffer;
var $6c51c75d9c16c701$var$OurUint8Array = $parcel$global.Uint8Array || function() {
};
function $6c51c75d9c16c701$var$_uint8ArrayToBuffer(chunk) {
    return $6c51c75d9c16c701$require$Buffer.from(chunk);
}
function $6c51c75d9c16c701$var$_isUint8Array(obj) {
    return $6c51c75d9c16c701$require$Buffer.isBuffer(obj) || obj instanceof $6c51c75d9c16c701$var$OurUint8Array;
}

var $cacXd = parcelRequire("cacXd");
var $6c51c75d9c16c701$var$debug;
if ($cacXd && $cacXd.debuglog) $6c51c75d9c16c701$var$debug = $cacXd.debuglog('stream');
else $6c51c75d9c16c701$var$debug = function debug() {
};

var $hqm4w = parcelRequire("hqm4w");

var $eFlnS = parcelRequire("eFlnS");

var $fFNHC = parcelRequire("fFNHC");
var $6c51c75d9c16c701$var$getHighWaterMark = $fFNHC.getHighWaterMark;

var $4lo2c = parcelRequire("4lo2c");
var $6c51c75d9c16c701$require$_require$codes = $4lo2c.codes;
var $6c51c75d9c16c701$var$ERR_INVALID_ARG_TYPE = $6c51c75d9c16c701$require$_require$codes.ERR_INVALID_ARG_TYPE, $6c51c75d9c16c701$var$ERR_STREAM_PUSH_AFTER_EOF = $6c51c75d9c16c701$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $6c51c75d9c16c701$var$ERR_METHOD_NOT_IMPLEMENTED = $6c51c75d9c16c701$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $6c51c75d9c16c701$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $6c51c75d9c16c701$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var $6c51c75d9c16c701$var$StringDecoder;
var $6c51c75d9c16c701$var$createReadableStreamAsyncIterator;
var $6c51c75d9c16c701$var$from;

(parcelRequire("cvM26"))($6c51c75d9c16c701$var$Readable, $b6SnL);
var $6c51c75d9c16c701$var$errorOrDestroy = $eFlnS.errorOrDestroy;
var $6c51c75d9c16c701$var$kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function $6c51c75d9c16c701$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $6c51c75d9c16c701$var$ReadableState(options, stream, isDuplex) {
    $6c51c75d9c16c701$var$Duplex = $6c51c75d9c16c701$var$Duplex || (parcelRequire("8BycO"));
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $6c51c75d9c16c701$var$Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $6c51c75d9c16c701$var$getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $hqm4w();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$6c51c75d9c16c701$var$StringDecoder) $6c51c75d9c16c701$var$StringDecoder = (parcelRequire("koxtS")).StringDecoder;
        this.decoder = new $6c51c75d9c16c701$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $6c51c75d9c16c701$var$Readable(options) {
    $6c51c75d9c16c701$var$Duplex = $6c51c75d9c16c701$var$Duplex || (parcelRequire("8BycO"));
    if (!(this instanceof $6c51c75d9c16c701$var$Readable)) return new $6c51c75d9c16c701$var$Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $6c51c75d9c16c701$var$Duplex;
    this._readableState = new $6c51c75d9c16c701$var$ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    $b6SnL.call(this);
}
Object.defineProperty($6c51c75d9c16c701$var$Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$6c51c75d9c16c701$var$Readable.prototype.destroy = $eFlnS.destroy;
$6c51c75d9c16c701$var$Readable.prototype._undestroy = $eFlnS.undestroy;
$6c51c75d9c16c701$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$6c51c75d9c16c701$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $6c51c75d9c16c701$require$Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $6c51c75d9c16c701$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
$6c51c75d9c16c701$var$Readable.prototype.unshift = function(chunk) {
    return $6c51c75d9c16c701$var$readableAddChunk(this, chunk, null, true, false);
};
function $6c51c75d9c16c701$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $6c51c75d9c16c701$var$debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $6c51c75d9c16c701$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $6c51c75d9c16c701$var$chunkInvalid(state, chunk);
        if (er) $6c51c75d9c16c701$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== $6c51c75d9c16c701$require$Buffer.prototype) chunk = $6c51c75d9c16c701$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $6c51c75d9c16c701$var$errorOrDestroy(stream, new $6c51c75d9c16c701$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $6c51c75d9c16c701$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $6c51c75d9c16c701$var$errorOrDestroy(stream, new $6c51c75d9c16c701$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $6c51c75d9c16c701$var$addChunk(stream, state, chunk, false);
                    else $6c51c75d9c16c701$var$maybeReadMore(stream, state);
                } else $6c51c75d9c16c701$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $6c51c75d9c16c701$var$maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $6c51c75d9c16c701$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $6c51c75d9c16c701$var$emitReadable(stream);
    }
    $6c51c75d9c16c701$var$maybeReadMore(stream, state);
}
function $6c51c75d9c16c701$var$chunkInvalid(state, chunk) {
    var er;
    if (!$6c51c75d9c16c701$var$_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new $6c51c75d9c16c701$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
$6c51c75d9c16c701$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.

$6c51c75d9c16c701$var$Readable.prototype.setEncoding = function(enc) {
    if (!$6c51c75d9c16c701$var$StringDecoder) $6c51c75d9c16c701$var$StringDecoder = (parcelRequire("koxtS")).StringDecoder;
    var decoder = new $6c51c75d9c16c701$var$StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var $6c51c75d9c16c701$var$MAX_HWM = 1073741824;
function $6c51c75d9c16c701$var$computeNewHighWaterMark(n) {
    if (n >= $6c51c75d9c16c701$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $6c51c75d9c16c701$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $6c51c75d9c16c701$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $6c51c75d9c16c701$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
$6c51c75d9c16c701$var$Readable.prototype.read = function(n) {
    $6c51c75d9c16c701$var$debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $6c51c75d9c16c701$var$debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) $6c51c75d9c16c701$var$endReadable(this);
        else $6c51c75d9c16c701$var$emitReadable(this);
        return null;
    }
    n = $6c51c75d9c16c701$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $6c51c75d9c16c701$var$endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $6c51c75d9c16c701$var$debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $6c51c75d9c16c701$var$debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $6c51c75d9c16c701$var$debug('reading or ended', doRead);
    } else if (doRead) {
        $6c51c75d9c16c701$var$debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $6c51c75d9c16c701$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $6c51c75d9c16c701$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $6c51c75d9c16c701$var$endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function $6c51c75d9c16c701$var$onEofChunk(stream, state) {
    $6c51c75d9c16c701$var$debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $6c51c75d9c16c701$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $6c51c75d9c16c701$var$emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $6c51c75d9c16c701$var$emitReadable(stream) {
    var state = stream._readableState;
    $6c51c75d9c16c701$var$debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $6c51c75d9c16c701$var$debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        $7pjJT.nextTick($6c51c75d9c16c701$var$emitReadable_, stream);
    }
}
function $6c51c75d9c16c701$var$emitReadable_(stream) {
    var state = stream._readableState;
    $6c51c75d9c16c701$var$debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $6c51c75d9c16c701$var$flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $6c51c75d9c16c701$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $7pjJT.nextTick($6c51c75d9c16c701$var$maybeReadMore_, stream, state);
    }
}
function $6c51c75d9c16c701$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $6c51c75d9c16c701$var$debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$6c51c75d9c16c701$var$Readable.prototype._read = function(n) {
    $6c51c75d9c16c701$var$errorOrDestroy(this, new $6c51c75d9c16c701$var$ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
$6c51c75d9c16c701$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $6c51c75d9c16c701$var$debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $7pjJT.stdout && dest !== $7pjJT.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $7pjJT.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $6c51c75d9c16c701$var$debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $6c51c75d9c16c701$var$debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $6c51c75d9c16c701$var$pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        $6c51c75d9c16c701$var$debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        $6c51c75d9c16c701$var$debug('ondata');
        var ret = dest.write(chunk);
        $6c51c75d9c16c701$var$debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $6c51c75d9c16c701$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $6c51c75d9c16c701$var$debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $6c51c75d9c16c701$var$debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if ($6c51c75d9c16c701$var$EElistenerCount(dest, 'error') === 0) $6c51c75d9c16c701$var$errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    $6c51c75d9c16c701$var$prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        $6c51c75d9c16c701$var$debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        $6c51c75d9c16c701$var$debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $6c51c75d9c16c701$var$debug('pipe resume');
        src.resume();
    }
    return dest;
};
function $6c51c75d9c16c701$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $6c51c75d9c16c701$var$debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $6c51c75d9c16c701$var$EElistenerCount(src, 'data')) {
            state.flowing = true;
            $6c51c75d9c16c701$var$flow(src);
        }
    };
}
$6c51c75d9c16c701$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = $6c51c75d9c16c701$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
$6c51c75d9c16c701$var$Readable.prototype.on = function(ev, fn) {
    var res = $b6SnL.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $6c51c75d9c16c701$var$debug('on readable', state.length, state.reading);
            if (state.length) $6c51c75d9c16c701$var$emitReadable(this);
            else if (!state.reading) $7pjJT.nextTick($6c51c75d9c16c701$var$nReadingNextTick, this);
        }
    }
    return res;
};
$6c51c75d9c16c701$var$Readable.prototype.addListener = $6c51c75d9c16c701$var$Readable.prototype.on;
$6c51c75d9c16c701$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $b6SnL.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $7pjJT.nextTick($6c51c75d9c16c701$var$updateReadableListening, this);
    return res;
};
$6c51c75d9c16c701$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $b6SnL.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $7pjJT.nextTick($6c51c75d9c16c701$var$updateReadableListening, this);
    return res;
};
function $6c51c75d9c16c701$var$updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function $6c51c75d9c16c701$var$nReadingNextTick(self) {
    $6c51c75d9c16c701$var$debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$6c51c75d9c16c701$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $6c51c75d9c16c701$var$debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $6c51c75d9c16c701$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $6c51c75d9c16c701$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $7pjJT.nextTick($6c51c75d9c16c701$var$resume_, stream, state);
    }
}
function $6c51c75d9c16c701$var$resume_(stream, state) {
    $6c51c75d9c16c701$var$debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    $6c51c75d9c16c701$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$6c51c75d9c16c701$var$Readable.prototype.pause = function() {
    $6c51c75d9c16c701$var$debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $6c51c75d9c16c701$var$debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function $6c51c75d9c16c701$var$flow(stream) {
    var state = stream._readableState;
    $6c51c75d9c16c701$var$debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$6c51c75d9c16c701$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        $6c51c75d9c16c701$var$debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        $6c51c75d9c16c701$var$debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < $6c51c75d9c16c701$var$kProxyEvents.length; n1++)stream.on($6c51c75d9c16c701$var$kProxyEvents[n1], this.emit.bind(this, $6c51c75d9c16c701$var$kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $6c51c75d9c16c701$var$debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === 'function') $6c51c75d9c16c701$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($6c51c75d9c16c701$var$createReadableStreamAsyncIterator === undefined) $6c51c75d9c16c701$var$createReadableStreamAsyncIterator = (parcelRequire("57zcP"));
    return $6c51c75d9c16c701$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($6c51c75d9c16c701$var$Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($6c51c75d9c16c701$var$Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($6c51c75d9c16c701$var$Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
$6c51c75d9c16c701$var$Readable._fromList = $6c51c75d9c16c701$var$fromList;
Object.defineProperty($6c51c75d9c16c701$var$Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $6c51c75d9c16c701$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $6c51c75d9c16c701$var$endReadable(stream) {
    var state = stream._readableState;
    $6c51c75d9c16c701$var$debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $7pjJT.nextTick($6c51c75d9c16c701$var$endReadableNT, state, stream);
    }
}
function $6c51c75d9c16c701$var$endReadableNT(state, stream) {
    $6c51c75d9c16c701$var$debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === 'function') $6c51c75d9c16c701$var$Readable.from = function(iterable, opts) {
    if ($6c51c75d9c16c701$var$from === undefined) $6c51c75d9c16c701$var$from = (parcelRequire("31mgl"));
    return $6c51c75d9c16c701$var$from($6c51c75d9c16c701$var$Readable, iterable, opts);
};
function $6c51c75d9c16c701$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("b6SnL", function(module, exports) {

module.exports = (parcelRequire("is9nt")).EventEmitter;

});

parcelRequire.register("hqm4w", function(module, exports) {
'use strict';
function $caf5fc65f69d80cb$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $caf5fc65f69d80cb$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) $caf5fc65f69d80cb$var$ownKeys(Object(source), true).forEach(function(key) {
            $caf5fc65f69d80cb$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $caf5fc65f69d80cb$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $caf5fc65f69d80cb$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $caf5fc65f69d80cb$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $caf5fc65f69d80cb$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $caf5fc65f69d80cb$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $caf5fc65f69d80cb$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $caf5fc65f69d80cb$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

var $fV0m8 = parcelRequire("fV0m8");
var $caf5fc65f69d80cb$var$Buffer = $fV0m8.Buffer;

var $cacXd = parcelRequire("cacXd");
var $caf5fc65f69d80cb$var$inspect = $cacXd.inspect;
var $caf5fc65f69d80cb$var$custom = $caf5fc65f69d80cb$var$inspect && $caf5fc65f69d80cb$var$inspect.custom || 'inspect';
function $caf5fc65f69d80cb$var$copyBuffer(src, target, offset) {
    $caf5fc65f69d80cb$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        $caf5fc65f69d80cb$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $caf5fc65f69d80cb$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $caf5fc65f69d80cb$var$Buffer.alloc(0);
                var ret = $caf5fc65f69d80cb$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $caf5fc65f69d80cb$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $caf5fc65f69d80cb$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: $caf5fc65f69d80cb$var$custom,
            value: function value(_, options) {
                return $caf5fc65f69d80cb$var$inspect(this, $caf5fc65f69d80cb$var$_objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

});

parcelRequire.register("eFlnS", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
'use strict'; // undocumented cb() API, needed for core, not for public API
function $aad57b7a9a9cac65$var$destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) $7pjJT.nextTick($aad57b7a9a9cac65$var$emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $7pjJT.nextTick($aad57b7a9a9cac65$var$emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $7pjJT.nextTick($aad57b7a9a9cac65$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $7pjJT.nextTick($aad57b7a9a9cac65$var$emitErrorAndCloseNT, _this, err);
            } else $7pjJT.nextTick($aad57b7a9a9cac65$var$emitCloseNT, _this);
        } else if (cb) {
            $7pjJT.nextTick($aad57b7a9a9cac65$var$emitCloseNT, _this);
            cb(err);
        } else $7pjJT.nextTick($aad57b7a9a9cac65$var$emitCloseNT, _this);
    });
    return this;
}
function $aad57b7a9a9cac65$var$emitErrorAndCloseNT(self, err) {
    $aad57b7a9a9cac65$var$emitErrorNT(self, err);
    $aad57b7a9a9cac65$var$emitCloseNT(self);
}
function $aad57b7a9a9cac65$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function $aad57b7a9a9cac65$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $aad57b7a9a9cac65$var$emitErrorNT(self, err) {
    self.emit('error', err);
}
function $aad57b7a9a9cac65$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: $aad57b7a9a9cac65$var$destroy,
    undestroy: $aad57b7a9a9cac65$var$undestroy,
    errorOrDestroy: $aad57b7a9a9cac65$var$errorOrDestroy
};

});

parcelRequire.register("fFNHC", function(module, exports) {
'use strict';

var $4lo2c = parcelRequire("4lo2c");
var $b6913d3e40a60d5d$var$ERR_INVALID_OPT_VALUE = $4lo2c.codes.ERR_INVALID_OPT_VALUE;
function $b6913d3e40a60d5d$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $b6913d3e40a60d5d$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $b6913d3e40a60d5d$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new $b6913d3e40a60d5d$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $b6913d3e40a60d5d$var$getHighWaterMark
};

});
parcelRequire.register("4lo2c", function(module, exports) {

$parcel$export(module.exports, "codes", () => $329bc45ba48bc9ec$export$e45cb6485273080e, (v) => $329bc45ba48bc9ec$export$e45cb6485273080e = v);
var $329bc45ba48bc9ec$export$e45cb6485273080e;
'use strict';
function $329bc45ba48bc9ec$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $329bc45ba48bc9ec$var$codes = {
};
function $329bc45ba48bc9ec$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        $329bc45ba48bc9ec$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    $329bc45ba48bc9ec$var$codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $329bc45ba48bc9ec$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $329bc45ba48bc9ec$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $329bc45ba48bc9ec$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $329bc45ba48bc9ec$var$includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$329bc45ba48bc9ec$var$createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$329bc45ba48bc9ec$var$createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && $329bc45ba48bc9ec$var$startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if ($329bc45ba48bc9ec$var$endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($329bc45ba48bc9ec$var$oneOf(expected, 'type'));
    else {
        var type = $329bc45ba48bc9ec$var$includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat($329bc45ba48bc9ec$var$oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$329bc45ba48bc9ec$var$createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
$329bc45ba48bc9ec$var$createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
$329bc45ba48bc9ec$var$createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
$329bc45ba48bc9ec$var$createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
$329bc45ba48bc9ec$var$createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
$329bc45ba48bc9ec$var$createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
$329bc45ba48bc9ec$var$createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
$329bc45ba48bc9ec$var$createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
$329bc45ba48bc9ec$var$createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
$329bc45ba48bc9ec$var$createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
$329bc45ba48bc9ec$export$e45cb6485273080e = $329bc45ba48bc9ec$var$codes;

});


parcelRequire.register("8BycO", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/ var $643c4ff15a6bc907$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $643c4ff15a6bc907$var$Duplex;

var $9iA4K = parcelRequire("9iA4K");

var $71oRY = parcelRequire("71oRY");

(parcelRequire("cvM26"))($643c4ff15a6bc907$var$Duplex, $9iA4K);
// Allow the keys array to be GC'ed.
var $643c4ff15a6bc907$var$keys = $643c4ff15a6bc907$var$objectKeys($71oRY.prototype);
for(var $643c4ff15a6bc907$var$v = 0; $643c4ff15a6bc907$var$v < $643c4ff15a6bc907$var$keys.length; $643c4ff15a6bc907$var$v++){
    var $643c4ff15a6bc907$var$method = $643c4ff15a6bc907$var$keys[$643c4ff15a6bc907$var$v];
    if (!$643c4ff15a6bc907$var$Duplex.prototype[$643c4ff15a6bc907$var$method]) $643c4ff15a6bc907$var$Duplex.prototype[$643c4ff15a6bc907$var$method] = $71oRY.prototype[$643c4ff15a6bc907$var$method];
}
function $643c4ff15a6bc907$var$Duplex(options) {
    if (!(this instanceof $643c4ff15a6bc907$var$Duplex)) return new $643c4ff15a6bc907$var$Duplex(options);
    $9iA4K.call(this, options);
    $71oRY.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', $643c4ff15a6bc907$var$onend);
        }
    }
}
Object.defineProperty($643c4ff15a6bc907$var$Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($643c4ff15a6bc907$var$Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($643c4ff15a6bc907$var$Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function $643c4ff15a6bc907$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    $7pjJT.nextTick($643c4ff15a6bc907$var$onEndNT, this);
}
function $643c4ff15a6bc907$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($643c4ff15a6bc907$var$Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("71oRY", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
module.exports = $51cbeaf959e3b07d$var$Writable;
/* <replacement> */ function $51cbeaf959e3b07d$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $51cbeaf959e3b07d$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $51cbeaf959e3b07d$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $51cbeaf959e3b07d$var$Duplex;
/*</replacement>*/ $51cbeaf959e3b07d$var$Writable.WritableState = $51cbeaf959e3b07d$var$WritableState;

/*<replacement>*/ var $51cbeaf959e3b07d$var$internalUtil = {
    deprecate: (parcelRequire("ecXVU"))
};

var $b6SnL = parcelRequire("b6SnL");

var $fV0m8 = parcelRequire("fV0m8");
var $51cbeaf959e3b07d$require$Buffer = $fV0m8.Buffer;
var $51cbeaf959e3b07d$var$OurUint8Array = $parcel$global.Uint8Array || function() {
};
function $51cbeaf959e3b07d$var$_uint8ArrayToBuffer(chunk) {
    return $51cbeaf959e3b07d$require$Buffer.from(chunk);
}
function $51cbeaf959e3b07d$var$_isUint8Array(obj) {
    return $51cbeaf959e3b07d$require$Buffer.isBuffer(obj) || obj instanceof $51cbeaf959e3b07d$var$OurUint8Array;
}

var $eFlnS = parcelRequire("eFlnS");

var $fFNHC = parcelRequire("fFNHC");
var $51cbeaf959e3b07d$var$getHighWaterMark = $fFNHC.getHighWaterMark;

var $4lo2c = parcelRequire("4lo2c");
var $51cbeaf959e3b07d$require$_require$codes = $4lo2c.codes;
var $51cbeaf959e3b07d$var$ERR_INVALID_ARG_TYPE = $51cbeaf959e3b07d$require$_require$codes.ERR_INVALID_ARG_TYPE, $51cbeaf959e3b07d$var$ERR_METHOD_NOT_IMPLEMENTED = $51cbeaf959e3b07d$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $51cbeaf959e3b07d$var$ERR_MULTIPLE_CALLBACK = $51cbeaf959e3b07d$require$_require$codes.ERR_MULTIPLE_CALLBACK, $51cbeaf959e3b07d$var$ERR_STREAM_CANNOT_PIPE = $51cbeaf959e3b07d$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $51cbeaf959e3b07d$var$ERR_STREAM_DESTROYED = $51cbeaf959e3b07d$require$_require$codes.ERR_STREAM_DESTROYED, $51cbeaf959e3b07d$var$ERR_STREAM_NULL_VALUES = $51cbeaf959e3b07d$require$_require$codes.ERR_STREAM_NULL_VALUES, $51cbeaf959e3b07d$var$ERR_STREAM_WRITE_AFTER_END = $51cbeaf959e3b07d$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $51cbeaf959e3b07d$var$ERR_UNKNOWN_ENCODING = $51cbeaf959e3b07d$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $51cbeaf959e3b07d$var$errorOrDestroy = $eFlnS.errorOrDestroy;

(parcelRequire("cvM26"))($51cbeaf959e3b07d$var$Writable, $b6SnL);
function $51cbeaf959e3b07d$var$nop() {
}

function $51cbeaf959e3b07d$var$WritableState(options, stream, isDuplex) {
    $51cbeaf959e3b07d$var$Duplex = $51cbeaf959e3b07d$var$Duplex || (parcelRequire("8BycO"));
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $51cbeaf959e3b07d$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $51cbeaf959e3b07d$var$getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $51cbeaf959e3b07d$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $51cbeaf959e3b07d$var$CorkedRequest(this);
}
$51cbeaf959e3b07d$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($51cbeaf959e3b07d$var$WritableState.prototype, 'buffer', {
            get: $51cbeaf959e3b07d$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $51cbeaf959e3b07d$var$realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    $51cbeaf959e3b07d$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($51cbeaf959e3b07d$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($51cbeaf959e3b07d$var$realHasInstance.call(this, object)) return true;
            if (this !== $51cbeaf959e3b07d$var$Writable) return false;
            return object && object._writableState instanceof $51cbeaf959e3b07d$var$WritableState;
        }
    });
} else $51cbeaf959e3b07d$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $51cbeaf959e3b07d$var$Writable(options) {
    $51cbeaf959e3b07d$var$Duplex = $51cbeaf959e3b07d$var$Duplex || (parcelRequire("8BycO")); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $51cbeaf959e3b07d$var$Duplex;
    if (!isDuplex && !$51cbeaf959e3b07d$var$realHasInstance.call($51cbeaf959e3b07d$var$Writable, this)) return new $51cbeaf959e3b07d$var$Writable(options);
    this._writableState = new $51cbeaf959e3b07d$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    $b6SnL.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$51cbeaf959e3b07d$var$Writable.prototype.pipe = function() {
    $51cbeaf959e3b07d$var$errorOrDestroy(this, new $51cbeaf959e3b07d$var$ERR_STREAM_CANNOT_PIPE());
};
function $51cbeaf959e3b07d$var$writeAfterEnd(stream, cb) {
    var er = new $51cbeaf959e3b07d$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $51cbeaf959e3b07d$var$errorOrDestroy(stream, er);
    $7pjJT.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $51cbeaf959e3b07d$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $51cbeaf959e3b07d$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new $51cbeaf959e3b07d$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        $51cbeaf959e3b07d$var$errorOrDestroy(stream, er);
        $7pjJT.nextTick(cb, er);
        return false;
    }
    return true;
}
$51cbeaf959e3b07d$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $51cbeaf959e3b07d$var$_isUint8Array(chunk);
    if (isBuf && !$51cbeaf959e3b07d$require$Buffer.isBuffer(chunk)) chunk = $51cbeaf959e3b07d$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = $51cbeaf959e3b07d$var$nop;
    if (state.ending) $51cbeaf959e3b07d$var$writeAfterEnd(this, cb);
    else if (isBuf || $51cbeaf959e3b07d$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $51cbeaf959e3b07d$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$51cbeaf959e3b07d$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$51cbeaf959e3b07d$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $51cbeaf959e3b07d$var$clearBuffer(this, state);
    }
};
$51cbeaf959e3b07d$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new $51cbeaf959e3b07d$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($51cbeaf959e3b07d$var$Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $51cbeaf959e3b07d$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = $51cbeaf959e3b07d$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($51cbeaf959e3b07d$var$Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $51cbeaf959e3b07d$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $51cbeaf959e3b07d$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $51cbeaf959e3b07d$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $51cbeaf959e3b07d$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $51cbeaf959e3b07d$var$ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $51cbeaf959e3b07d$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $7pjJT.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        $7pjJT.nextTick($51cbeaf959e3b07d$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $51cbeaf959e3b07d$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $51cbeaf959e3b07d$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $51cbeaf959e3b07d$var$finishMaybe(stream, state);
    }
}
function $51cbeaf959e3b07d$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $51cbeaf959e3b07d$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new $51cbeaf959e3b07d$var$ERR_MULTIPLE_CALLBACK();
    $51cbeaf959e3b07d$var$onwriteStateUpdate(state);
    if (er) $51cbeaf959e3b07d$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $51cbeaf959e3b07d$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $51cbeaf959e3b07d$var$clearBuffer(stream, state);
        if (sync) $7pjJT.nextTick($51cbeaf959e3b07d$var$afterWrite, stream, state, finished, cb);
        else $51cbeaf959e3b07d$var$afterWrite(stream, state, finished, cb);
    }
}
function $51cbeaf959e3b07d$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $51cbeaf959e3b07d$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $51cbeaf959e3b07d$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $51cbeaf959e3b07d$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function $51cbeaf959e3b07d$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $51cbeaf959e3b07d$var$doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $51cbeaf959e3b07d$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $51cbeaf959e3b07d$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$51cbeaf959e3b07d$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $51cbeaf959e3b07d$var$ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
$51cbeaf959e3b07d$var$Writable.prototype._writev = null;
$51cbeaf959e3b07d$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $51cbeaf959e3b07d$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($51cbeaf959e3b07d$var$Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $51cbeaf959e3b07d$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $51cbeaf959e3b07d$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $51cbeaf959e3b07d$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        $51cbeaf959e3b07d$var$finishMaybe(stream, state);
    });
}
function $51cbeaf959e3b07d$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $7pjJT.nextTick($51cbeaf959e3b07d$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function $51cbeaf959e3b07d$var$finishMaybe(stream, state) {
    var need = $51cbeaf959e3b07d$var$needFinish(state);
    if (need) {
        $51cbeaf959e3b07d$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $51cbeaf959e3b07d$var$endWritable(stream, state, cb) {
    state.ending = true;
    $51cbeaf959e3b07d$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $7pjJT.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $51cbeaf959e3b07d$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($51cbeaf959e3b07d$var$Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$51cbeaf959e3b07d$var$Writable.prototype.destroy = $eFlnS.destroy;
$51cbeaf959e3b07d$var$Writable.prototype._undestroy = $eFlnS.undestroy;
$51cbeaf959e3b07d$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});


parcelRequire.register("koxtS", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", () => $ed900529af403456$export$63a7aa211a91ed69, (v) => $ed900529af403456$export$63a7aa211a91ed69 = v);
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $ed900529af403456$export$63a7aa211a91ed69;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $ahmAR = parcelRequire("ahmAR");
var $ed900529af403456$require$Buffer = $ahmAR.Buffer;
/*</replacement>*/ var $ed900529af403456$var$isEncoding = $ed900529af403456$require$Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function $ed900529af403456$var$_normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $ed900529af403456$var$normalizeEncoding(enc) {
    var nenc = $ed900529af403456$var$_normalizeEncoding(enc);
    if (typeof nenc !== 'string' && ($ed900529af403456$require$Buffer.isEncoding === $ed900529af403456$var$isEncoding || !$ed900529af403456$var$isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
$ed900529af403456$export$63a7aa211a91ed69 = $ed900529af403456$var$StringDecoder;
function $ed900529af403456$var$StringDecoder(encoding) {
    this.encoding = $ed900529af403456$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = $ed900529af403456$var$utf16Text;
            this.end = $ed900529af403456$var$utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = $ed900529af403456$var$utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = $ed900529af403456$var$base64Text;
            this.end = $ed900529af403456$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $ed900529af403456$var$simpleWrite;
            this.end = $ed900529af403456$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $ed900529af403456$require$Buffer.allocUnsafe(nb);
}
$ed900529af403456$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
$ed900529af403456$var$StringDecoder.prototype.end = $ed900529af403456$var$utf8End;
// Returns only complete characters in a Buffer
$ed900529af403456$var$StringDecoder.prototype.text = $ed900529af403456$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$ed900529af403456$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $ed900529af403456$var$utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $ed900529af403456$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $ed900529af403456$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $ed900529af403456$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $ed900529af403456$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $ed900529af403456$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $ed900529af403456$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $ed900529af403456$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $ed900529af403456$var$utf8Text(buf, i) {
    var total = $ed900529af403456$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $ed900529af403456$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $ed900529af403456$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $ed900529af403456$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function $ed900529af403456$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function $ed900529af403456$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $ed900529af403456$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $ed900529af403456$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

});

parcelRequire.register("57zcP", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
'use strict';
var $3ba8ea5bd596980e$var$_Object$setPrototypeO;
function $3ba8ea5bd596980e$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

var $aMwrW = parcelRequire("aMwrW");
var $3ba8ea5bd596980e$var$kLastResolve = Symbol('lastResolve');
var $3ba8ea5bd596980e$var$kLastReject = Symbol('lastReject');
var $3ba8ea5bd596980e$var$kError = Symbol('error');
var $3ba8ea5bd596980e$var$kEnded = Symbol('ended');
var $3ba8ea5bd596980e$var$kLastPromise = Symbol('lastPromise');
var $3ba8ea5bd596980e$var$kHandlePromise = Symbol('handlePromise');
var $3ba8ea5bd596980e$var$kStream = Symbol('stream');
function $3ba8ea5bd596980e$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $3ba8ea5bd596980e$var$readAndResolve(iter) {
    var resolve = iter[$3ba8ea5bd596980e$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$3ba8ea5bd596980e$var$kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$3ba8ea5bd596980e$var$kLastPromise] = null;
            iter[$3ba8ea5bd596980e$var$kLastResolve] = null;
            iter[$3ba8ea5bd596980e$var$kLastReject] = null;
            resolve($3ba8ea5bd596980e$var$createIterResult(data, false));
        }
    }
}
function $3ba8ea5bd596980e$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $7pjJT.nextTick($3ba8ea5bd596980e$var$readAndResolve, iter);
}
function $3ba8ea5bd596980e$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$3ba8ea5bd596980e$var$kEnded]) {
                resolve($3ba8ea5bd596980e$var$createIterResult(undefined, true));
                return;
            }
            iter[$3ba8ea5bd596980e$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $3ba8ea5bd596980e$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var $3ba8ea5bd596980e$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($3ba8ea5bd596980e$var$_Object$setPrototypeO = {
    get stream () {
        return this[$3ba8ea5bd596980e$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$3ba8ea5bd596980e$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$3ba8ea5bd596980e$var$kEnded]) return Promise.resolve($3ba8ea5bd596980e$var$createIterResult(undefined, true));
        if (this[$3ba8ea5bd596980e$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $7pjJT.nextTick(function() {
                if (_this[$3ba8ea5bd596980e$var$kError]) reject(_this[$3ba8ea5bd596980e$var$kError]);
                else resolve($3ba8ea5bd596980e$var$createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$3ba8ea5bd596980e$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($3ba8ea5bd596980e$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$3ba8ea5bd596980e$var$kStream].read();
            if (data !== null) return Promise.resolve($3ba8ea5bd596980e$var$createIterResult(data, false));
            promise = new Promise(this[$3ba8ea5bd596980e$var$kHandlePromise]);
        }
        this[$3ba8ea5bd596980e$var$kLastPromise] = promise;
        return promise;
    }
}, $3ba8ea5bd596980e$var$_defineProperty($3ba8ea5bd596980e$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $3ba8ea5bd596980e$var$_defineProperty($3ba8ea5bd596980e$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$3ba8ea5bd596980e$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($3ba8ea5bd596980e$var$createIterResult(undefined, true));
        });
    });
}), $3ba8ea5bd596980e$var$_Object$setPrototypeO), $3ba8ea5bd596980e$var$AsyncIteratorPrototype);
var $3ba8ea5bd596980e$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($3ba8ea5bd596980e$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, $3ba8ea5bd596980e$var$_defineProperty(_Object$create, $3ba8ea5bd596980e$var$kStream, {
        value: stream,
        writable: true
    }), $3ba8ea5bd596980e$var$_defineProperty(_Object$create, $3ba8ea5bd596980e$var$kLastResolve, {
        value: null,
        writable: true
    }), $3ba8ea5bd596980e$var$_defineProperty(_Object$create, $3ba8ea5bd596980e$var$kLastReject, {
        value: null,
        writable: true
    }), $3ba8ea5bd596980e$var$_defineProperty(_Object$create, $3ba8ea5bd596980e$var$kError, {
        value: null,
        writable: true
    }), $3ba8ea5bd596980e$var$_defineProperty(_Object$create, $3ba8ea5bd596980e$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $3ba8ea5bd596980e$var$_defineProperty(_Object$create, $3ba8ea5bd596980e$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$3ba8ea5bd596980e$var$kStream].read();
            if (data) {
                iterator[$3ba8ea5bd596980e$var$kLastPromise] = null;
                iterator[$3ba8ea5bd596980e$var$kLastResolve] = null;
                iterator[$3ba8ea5bd596980e$var$kLastReject] = null;
                resolve($3ba8ea5bd596980e$var$createIterResult(data, false));
            } else {
                iterator[$3ba8ea5bd596980e$var$kLastResolve] = resolve;
                iterator[$3ba8ea5bd596980e$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$3ba8ea5bd596980e$var$kLastPromise] = null;
    $aMwrW(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[$3ba8ea5bd596980e$var$kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$3ba8ea5bd596980e$var$kLastPromise] = null;
                iterator[$3ba8ea5bd596980e$var$kLastResolve] = null;
                iterator[$3ba8ea5bd596980e$var$kLastReject] = null;
                reject(err);
            }
            iterator[$3ba8ea5bd596980e$var$kError] = err;
            return;
        }
        var resolve = iterator[$3ba8ea5bd596980e$var$kLastResolve];
        if (resolve !== null) {
            iterator[$3ba8ea5bd596980e$var$kLastPromise] = null;
            iterator[$3ba8ea5bd596980e$var$kLastResolve] = null;
            iterator[$3ba8ea5bd596980e$var$kLastReject] = null;
            resolve($3ba8ea5bd596980e$var$createIterResult(undefined, true));
        }
        iterator[$3ba8ea5bd596980e$var$kEnded] = true;
    });
    stream.on('readable', $3ba8ea5bd596980e$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $3ba8ea5bd596980e$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("aMwrW", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var $4lo2c = parcelRequire("4lo2c");
var $7d978ee89158cf93$var$ERR_STREAM_PREMATURE_CLOSE = $4lo2c.codes.ERR_STREAM_PREMATURE_CLOSE;
function $7d978ee89158cf93$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $7d978ee89158cf93$var$noop() {
}
function $7d978ee89158cf93$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function $7d978ee89158cf93$var$eos(stream, opts, callback) {
    if (typeof opts === 'function') return $7d978ee89158cf93$var$eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = $7d978ee89158cf93$var$once(callback || $7d978ee89158cf93$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $7d978ee89158cf93$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $7d978ee89158cf93$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if ($7d978ee89158cf93$var$isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = $7d978ee89158cf93$var$eos;

});


parcelRequire.register("31mgl", function(module, exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

});


parcelRequire.register("4w4hj", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = $349d7822dc1dc8e4$var$Transform;

var $4lo2c = parcelRequire("4lo2c");
var $349d7822dc1dc8e4$require$_require$codes = $4lo2c.codes;
var $349d7822dc1dc8e4$var$ERR_METHOD_NOT_IMPLEMENTED = $349d7822dc1dc8e4$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $349d7822dc1dc8e4$var$ERR_MULTIPLE_CALLBACK = $349d7822dc1dc8e4$require$_require$codes.ERR_MULTIPLE_CALLBACK, $349d7822dc1dc8e4$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $349d7822dc1dc8e4$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $349d7822dc1dc8e4$var$ERR_TRANSFORM_WITH_LENGTH_0 = $349d7822dc1dc8e4$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $8BycO = parcelRequire("8BycO");

(parcelRequire("cvM26"))($349d7822dc1dc8e4$var$Transform, $8BycO);
function $349d7822dc1dc8e4$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new $349d7822dc1dc8e4$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $349d7822dc1dc8e4$var$Transform(options) {
    if (!(this instanceof $349d7822dc1dc8e4$var$Transform)) return new $349d7822dc1dc8e4$var$Transform(options);
    $8BycO.call(this, options);
    this._transformState = {
        afterTransform: $349d7822dc1dc8e4$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', $349d7822dc1dc8e4$var$prefinish);
}
function $349d7822dc1dc8e4$var$prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        $349d7822dc1dc8e4$var$done(_this, er, data);
    });
    else $349d7822dc1dc8e4$var$done(this, null, null);
}
$349d7822dc1dc8e4$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $8BycO.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$349d7822dc1dc8e4$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $349d7822dc1dc8e4$var$ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
$349d7822dc1dc8e4$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$349d7822dc1dc8e4$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$349d7822dc1dc8e4$var$Transform.prototype._destroy = function(err, cb) {
    $8BycO.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $349d7822dc1dc8e4$var$done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $349d7822dc1dc8e4$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $349d7822dc1dc8e4$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("hx2sL", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = $cc376dd1ff708305$var$PassThrough;

var $4w4hj = parcelRequire("4w4hj");

(parcelRequire("cvM26"))($cc376dd1ff708305$var$PassThrough, $4w4hj);
function $cc376dd1ff708305$var$PassThrough(options) {
    if (!(this instanceof $cc376dd1ff708305$var$PassThrough)) return new $cc376dd1ff708305$var$PassThrough(options);
    $4w4hj.call(this, options);
}
$cc376dd1ff708305$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("3PLxT", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var $2cab041a36f9bd5c$var$eos;
function $2cab041a36f9bd5c$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $4lo2c = parcelRequire("4lo2c");
var $2cab041a36f9bd5c$require$_require$codes = $4lo2c.codes;
var $2cab041a36f9bd5c$var$ERR_MISSING_ARGS = $2cab041a36f9bd5c$require$_require$codes.ERR_MISSING_ARGS, $2cab041a36f9bd5c$var$ERR_STREAM_DESTROYED = $2cab041a36f9bd5c$require$_require$codes.ERR_STREAM_DESTROYED;
function $2cab041a36f9bd5c$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $2cab041a36f9bd5c$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}

function $2cab041a36f9bd5c$var$destroyer(stream, reading, writing, callback) {
    callback = $2cab041a36f9bd5c$var$once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if ($2cab041a36f9bd5c$var$eos === undefined) $2cab041a36f9bd5c$var$eos = (parcelRequire("aMwrW"));
    $2cab041a36f9bd5c$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($2cab041a36f9bd5c$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new $2cab041a36f9bd5c$var$ERR_STREAM_DESTROYED('pipe'));
    };
}
function $2cab041a36f9bd5c$var$call(fn) {
    fn();
}
function $2cab041a36f9bd5c$var$pipe(from, to) {
    return from.pipe(to);
}
function $2cab041a36f9bd5c$var$popCallback(streams) {
    if (!streams.length) return $2cab041a36f9bd5c$var$noop;
    if (typeof streams[streams.length - 1] !== 'function') return $2cab041a36f9bd5c$var$noop;
    return streams.pop();
}
function $2cab041a36f9bd5c$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $2cab041a36f9bd5c$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $2cab041a36f9bd5c$var$ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $2cab041a36f9bd5c$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($2cab041a36f9bd5c$var$call);
            if (reading) return;
            destroys.forEach($2cab041a36f9bd5c$var$call);
            callback(error);
        });
    });
    return streams.reduce($2cab041a36f9bd5c$var$pipe);
}
module.exports = $2cab041a36f9bd5c$var$pipeline;

});




parcelRequire.register("2xoxV", function(module, exports) {
'use strict';

var $cvM26 = parcelRequire("cvM26");

var $6C4qD = parcelRequire("6C4qD");

var $lTHWE = parcelRequire("lTHWE");

var $ahmAR = parcelRequire("ahmAR");
var $1d91b436f20acdb0$require$Buffer = $ahmAR.Buffer;

var $hQ9AB = parcelRequire("hQ9AB");

var $62npl = parcelRequire("62npl");

var $iiXyM = parcelRequire("iiXyM");
var $1d91b436f20acdb0$var$ZEROS = $1d91b436f20acdb0$require$Buffer.alloc(128);
function $1d91b436f20acdb0$var$Hmac(alg, key) {
    $lTHWE.call(this, 'digest');
    if (typeof key === 'string') key = $1d91b436f20acdb0$require$Buffer.from(key);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new $62npl() : $iiXyM(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = $1d91b436f20acdb0$require$Buffer.concat([
        key,
        $1d91b436f20acdb0$var$ZEROS
    ], blocksize);
    var ipad = this._ipad = $1d91b436f20acdb0$require$Buffer.allocUnsafe(blocksize);
    var opad = this._opad = $1d91b436f20acdb0$require$Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = alg === 'rmd160' ? new $62npl() : $iiXyM(alg);
    this._hash.update(ipad);
}
$cvM26($1d91b436f20acdb0$var$Hmac, $lTHWE);
$1d91b436f20acdb0$var$Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
$1d91b436f20acdb0$var$Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === 'rmd160' ? new $62npl() : $iiXyM(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === 'rmd160' || alg === 'ripemd160') return new $1d91b436f20acdb0$var$Hmac('rmd160', key);
    if (alg === 'md5') return new $6C4qD($hQ9AB, key);
    return new $1d91b436f20acdb0$var$Hmac(alg, key);
};

});
parcelRequire.register("6C4qD", function(module, exports) {
'use strict';

var $cvM26 = parcelRequire("cvM26");

var $ahmAR = parcelRequire("ahmAR");
var $4d09ba1fda6e3f5b$require$Buffer = $ahmAR.Buffer;

var $lTHWE = parcelRequire("lTHWE");
var $4d09ba1fda6e3f5b$var$ZEROS = $4d09ba1fda6e3f5b$require$Buffer.alloc(128);
var $4d09ba1fda6e3f5b$var$blocksize = 64;
function $4d09ba1fda6e3f5b$var$Hmac(alg, key) {
    $lTHWE.call(this, 'digest');
    if (typeof key === 'string') key = $4d09ba1fda6e3f5b$require$Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > $4d09ba1fda6e3f5b$var$blocksize) key = alg(key);
    else if (key.length < $4d09ba1fda6e3f5b$var$blocksize) key = $4d09ba1fda6e3f5b$require$Buffer.concat([
        key,
        $4d09ba1fda6e3f5b$var$ZEROS
    ], $4d09ba1fda6e3f5b$var$blocksize);
    var ipad = this._ipad = $4d09ba1fda6e3f5b$require$Buffer.allocUnsafe($4d09ba1fda6e3f5b$var$blocksize);
    var opad = this._opad = $4d09ba1fda6e3f5b$require$Buffer.allocUnsafe($4d09ba1fda6e3f5b$var$blocksize);
    for(var i = 0; i < $4d09ba1fda6e3f5b$var$blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = [
        ipad
    ];
}
$cvM26($4d09ba1fda6e3f5b$var$Hmac, $lTHWE);
$4d09ba1fda6e3f5b$var$Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
$4d09ba1fda6e3f5b$var$Hmac.prototype._final = function() {
    var h = this._alg($4d09ba1fda6e3f5b$require$Buffer.concat(this._hash));
    return this._alg($4d09ba1fda6e3f5b$require$Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = $4d09ba1fda6e3f5b$var$Hmac;

});

parcelRequire.register("hQ9AB", function(module, exports) {

var $iUqrN = parcelRequire("iUqrN");
module.exports = function(buffer) {
    return new $iUqrN().update(buffer).digest();
};

});


parcelRequire.register("ackXK", function(module, exports) {

module.exports = (parcelRequire("8O42a"));

});
parcelRequire.register("8O42a", function(module, exports) {
module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

});


parcelRequire.register("7EEeb", function(module, exports) {

$parcel$export(module.exports, "pbkdf2", () => $592b7934b1edf628$export$448fa22aedc9dbca, (v) => $592b7934b1edf628$export$448fa22aedc9dbca = v);
$parcel$export(module.exports, "pbkdf2Sync", () => $592b7934b1edf628$export$b80c7ba289c8fa56, (v) => $592b7934b1edf628$export$b80c7ba289c8fa56 = v);
var $592b7934b1edf628$export$448fa22aedc9dbca;
var $592b7934b1edf628$export$b80c7ba289c8fa56;

$592b7934b1edf628$export$448fa22aedc9dbca = (parcelRequire("88caV"));

$592b7934b1edf628$export$b80c7ba289c8fa56 = (parcelRequire("lMy84"));

});
parcelRequire.register("88caV", function(module, exports) {

var $ahmAR = parcelRequire("ahmAR");
var $5eb883d67b04fdc5$require$Buffer = $ahmAR.Buffer;

var $erffZ = parcelRequire("erffZ");

var $gIT8O = parcelRequire("gIT8O");

var $lMy84 = parcelRequire("lMy84");

var $8DF2t = parcelRequire("8DF2t");
var $5eb883d67b04fdc5$var$ZERO_BUF;
var $5eb883d67b04fdc5$var$subtle = $parcel$global.crypto && $parcel$global.crypto.subtle;
var $5eb883d67b04fdc5$var$toBrowser = {
    sha: 'SHA-1',
    'sha-1': 'SHA-1',
    sha1: 'SHA-1',
    sha256: 'SHA-256',
    'sha-256': 'SHA-256',
    sha384: 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    sha512: 'SHA-512'
};
var $5eb883d67b04fdc5$var$checks = [];
function $5eb883d67b04fdc5$var$checkNative(algo) {
    if ($parcel$global.process && !$parcel$global.process.browser) return Promise.resolve(false);
    if (!$5eb883d67b04fdc5$var$subtle || !$5eb883d67b04fdc5$var$subtle.importKey || !$5eb883d67b04fdc5$var$subtle.deriveBits) return Promise.resolve(false);
    if ($5eb883d67b04fdc5$var$checks[algo] !== undefined) return $5eb883d67b04fdc5$var$checks[algo];
    $5eb883d67b04fdc5$var$ZERO_BUF = $5eb883d67b04fdc5$var$ZERO_BUF || $5eb883d67b04fdc5$require$Buffer.alloc(8);
    var prom = $5eb883d67b04fdc5$var$browserPbkdf2($5eb883d67b04fdc5$var$ZERO_BUF, $5eb883d67b04fdc5$var$ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    $5eb883d67b04fdc5$var$checks[algo] = prom;
    return prom;
}
var $5eb883d67b04fdc5$var$nextTick;
function $5eb883d67b04fdc5$var$getNextTick() {
    if ($5eb883d67b04fdc5$var$nextTick) return $5eb883d67b04fdc5$var$nextTick;
    if ($parcel$global.process && $parcel$global.process.nextTick) $5eb883d67b04fdc5$var$nextTick = $parcel$global.process.nextTick;
    else if ($parcel$global.queueMicrotask) $5eb883d67b04fdc5$var$nextTick = $parcel$global.queueMicrotask;
    else if ($parcel$global.setImmediate) $5eb883d67b04fdc5$var$nextTick = $parcel$global.setImmediate;
    else $5eb883d67b04fdc5$var$nextTick = $parcel$global.setTimeout;
    return $5eb883d67b04fdc5$var$nextTick;
}
function $5eb883d67b04fdc5$var$browserPbkdf2(password, salt, iterations, length, algo) {
    return $5eb883d67b04fdc5$var$subtle.importKey('raw', password, {
        name: 'PBKDF2'
    }, false, [
        'deriveBits'
    ]).then(function(key) {
        return $5eb883d67b04fdc5$var$subtle.deriveBits({
            name: 'PBKDF2',
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return $5eb883d67b04fdc5$require$Buffer.from(res);
    });
}
function $5eb883d67b04fdc5$var$resolvePromise(promise, callback) {
    promise.then(function(out) {
        $5eb883d67b04fdc5$var$getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        $5eb883d67b04fdc5$var$getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
    }
    digest = digest || 'sha1';
    var algo = $5eb883d67b04fdc5$var$toBrowser[digest.toLowerCase()];
    if (!algo || typeof $parcel$global.Promise !== 'function') {
        $5eb883d67b04fdc5$var$getNextTick()(function() {
            var out;
            try {
                out = $lMy84(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    $erffZ(iterations, keylen);
    password = $8DF2t(password, $gIT8O, 'Password');
    salt = $8DF2t(salt, $gIT8O, 'Salt');
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    $5eb883d67b04fdc5$var$resolvePromise($5eb883d67b04fdc5$var$checkNative(algo).then(function(resp) {
        if (resp) return $5eb883d67b04fdc5$var$browserPbkdf2(password, salt, iterations, keylen, algo);
        return $lMy84(password, salt, iterations, keylen, digest);
    }), callback);
};

});
parcelRequire.register("erffZ", function(module, exports) {
var $a82f6c081d5661b4$var$MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== 'number') throw new TypeError('Iterations not a number');
    if (iterations < 0) throw new TypeError('Bad iterations');
    if (typeof keylen !== 'number') throw new TypeError('Key length not a number');
    if (keylen < 0 || keylen > $a82f6c081d5661b4$var$MAX_ALLOC || keylen !== keylen) throw new TypeError('Bad key length');
};

});

parcelRequire.register("gIT8O", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
var $c2cb874e7d555087$var$defaultEncoding;
/* istanbul ignore next */ if ($parcel$global.process && $parcel$global.process.browser) $c2cb874e7d555087$var$defaultEncoding = 'utf-8';
else if ($parcel$global.process && $parcel$global.process.version) {
    var $c2cb874e7d555087$var$pVersionMajor = parseInt($7pjJT.version.split('.')[0].slice(1), 10);
    $c2cb874e7d555087$var$defaultEncoding = $c2cb874e7d555087$var$pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else $c2cb874e7d555087$var$defaultEncoding = 'utf-8';
module.exports = $c2cb874e7d555087$var$defaultEncoding;

});

parcelRequire.register("lMy84", function(module, exports) {

var $hQ9AB = parcelRequire("hQ9AB");

var $62npl = parcelRequire("62npl");

var $iiXyM = parcelRequire("iiXyM");

var $ahmAR = parcelRequire("ahmAR");
var $fdb88e0120389ef9$require$Buffer = $ahmAR.Buffer;

var $erffZ = parcelRequire("erffZ");

var $gIT8O = parcelRequire("gIT8O");

var $8DF2t = parcelRequire("8DF2t");
var $fdb88e0120389ef9$var$ZEROS = $fdb88e0120389ef9$require$Buffer.alloc(128);
var $fdb88e0120389ef9$var$sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function $fdb88e0120389ef9$var$Hmac(alg, key, saltLen) {
    var hash = $fdb88e0120389ef9$var$getDigest(alg);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = $fdb88e0120389ef9$require$Buffer.concat([
        key,
        $fdb88e0120389ef9$var$ZEROS
    ], blocksize);
    var ipad = $fdb88e0120389ef9$require$Buffer.allocUnsafe(blocksize + $fdb88e0120389ef9$var$sizes[alg]);
    var opad = $fdb88e0120389ef9$require$Buffer.allocUnsafe(blocksize + $fdb88e0120389ef9$var$sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    var ipad1 = $fdb88e0120389ef9$require$Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = $fdb88e0120389ef9$var$sizes[alg];
}
$fdb88e0120389ef9$var$Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function $fdb88e0120389ef9$var$getDigest(alg) {
    function shaFunc(data) {
        return $iiXyM(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new $62npl().update(data).digest();
    }
    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
    if (alg === 'md5') return $hQ9AB;
    return shaFunc;
}
function $fdb88e0120389ef9$var$pbkdf2(password, salt, iterations, keylen, digest) {
    $erffZ(iterations, keylen);
    password = $8DF2t(password, $gIT8O, 'Password');
    salt = $8DF2t(salt, $gIT8O, 'Salt');
    digest = digest || 'sha1';
    var hmac = new $fdb88e0120389ef9$var$Hmac(digest, password, salt.length);
    var DK = $fdb88e0120389ef9$require$Buffer.allocUnsafe(keylen);
    var block1 = $fdb88e0120389ef9$require$Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = $fdb88e0120389ef9$var$sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = $fdb88e0120389ef9$var$pbkdf2;

});
parcelRequire.register("8DF2t", function(module, exports) {

var $ahmAR = parcelRequire("ahmAR");
var $64a1ccb3c863aed6$require$Buffer = $ahmAR.Buffer;
module.exports = function(thing, encoding, name) {
    if ($64a1ccb3c863aed6$require$Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === 'string') return $64a1ccb3c863aed6$require$Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return $64a1ccb3c863aed6$require$Buffer.from(thing.buffer);
    else throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
};

});




parcelRequire.register("iMeTF", function(module, exports) {

$parcel$export(module.exports, "createCipher", () => $dab843e5d8f4731a$export$bdd223f16383713e, (v) => $dab843e5d8f4731a$export$bdd223f16383713e = v);
$parcel$export(module.exports, "Cipher", () => $dab843e5d8f4731a$export$26e5786e8ac8e530, (v) => $dab843e5d8f4731a$export$26e5786e8ac8e530 = v);
$parcel$export(module.exports, "createCipheriv", () => $dab843e5d8f4731a$export$2f64596b8cbf08b4, (v) => $dab843e5d8f4731a$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "Cipheriv", () => $dab843e5d8f4731a$export$20533d26f07f1ee0, (v) => $dab843e5d8f4731a$export$20533d26f07f1ee0 = v);
$parcel$export(module.exports, "createDecipher", () => $dab843e5d8f4731a$export$12ada9414fbc594c, (v) => $dab843e5d8f4731a$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "Decipher", () => $dab843e5d8f4731a$export$2ce6d8d0e8b04e1a, (v) => $dab843e5d8f4731a$export$2ce6d8d0e8b04e1a = v);
$parcel$export(module.exports, "createDecipheriv", () => $dab843e5d8f4731a$export$36b6d6ef312eab39, (v) => $dab843e5d8f4731a$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "Decipheriv", () => $dab843e5d8f4731a$export$f5e7e39d57cd9700, (v) => $dab843e5d8f4731a$export$f5e7e39d57cd9700 = v);
$parcel$export(module.exports, "listCiphers", () => $dab843e5d8f4731a$export$dedd8dc3dc62b370, (v) => $dab843e5d8f4731a$export$dedd8dc3dc62b370 = v);
$parcel$export(module.exports, "getCiphers", () => $dab843e5d8f4731a$export$58a258485f1e49f6, (v) => $dab843e5d8f4731a$export$58a258485f1e49f6 = v);
var $dab843e5d8f4731a$export$bdd223f16383713e;
var $dab843e5d8f4731a$export$26e5786e8ac8e530;
var $dab843e5d8f4731a$export$2f64596b8cbf08b4;
var $dab843e5d8f4731a$export$20533d26f07f1ee0;
var $dab843e5d8f4731a$export$12ada9414fbc594c;
var $dab843e5d8f4731a$export$2ce6d8d0e8b04e1a;
var $dab843e5d8f4731a$export$36b6d6ef312eab39;
var $dab843e5d8f4731a$export$f5e7e39d57cd9700;
var $dab843e5d8f4731a$export$dedd8dc3dc62b370;
var $dab843e5d8f4731a$export$58a258485f1e49f6;

var $iDkG4 = parcelRequire("iDkG4");

var $aRUH2 = parcelRequire("aRUH2");

var $kRniL = parcelRequire("kRniL");

var $1FTph = parcelRequire("1FTph");

var $pLjxr = parcelRequire("pLjxr");
function $dab843e5d8f4731a$var$createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($kRniL[suite]) {
        keyLen = $kRniL[suite].key;
        ivLen = $kRniL[suite].iv;
    } else if ($1FTph[suite]) {
        keyLen = $1FTph[suite].key * 8;
        ivLen = $1FTph[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = $pLjxr(password, false, keyLen, ivLen);
    return $dab843e5d8f4731a$var$createCipheriv(suite, keys.key, keys.iv);
}
function $dab843e5d8f4731a$var$createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($kRniL[suite]) {
        keyLen = $kRniL[suite].key;
        ivLen = $kRniL[suite].iv;
    } else if ($1FTph[suite]) {
        keyLen = $1FTph[suite].key * 8;
        ivLen = $1FTph[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = $pLjxr(password, false, keyLen, ivLen);
    return $dab843e5d8f4731a$var$createDecipheriv(suite, keys.key, keys.iv);
}
function $dab843e5d8f4731a$var$createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($kRniL[suite]) return $aRUH2.createCipheriv(suite, key, iv);
    if ($1FTph[suite]) return new $iDkG4({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError('invalid suite type');
}
function $dab843e5d8f4731a$var$createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($kRniL[suite]) return $aRUH2.createDecipheriv(suite, key, iv);
    if ($1FTph[suite]) return new $iDkG4({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError('invalid suite type');
}
function $dab843e5d8f4731a$var$getCiphers() {
    return Object.keys($1FTph).concat($aRUH2.getCiphers());
}
$dab843e5d8f4731a$export$bdd223f16383713e = $dab843e5d8f4731a$export$26e5786e8ac8e530 = $dab843e5d8f4731a$var$createCipher;
$dab843e5d8f4731a$export$2f64596b8cbf08b4 = $dab843e5d8f4731a$export$20533d26f07f1ee0 = $dab843e5d8f4731a$var$createCipheriv;
$dab843e5d8f4731a$export$12ada9414fbc594c = $dab843e5d8f4731a$export$2ce6d8d0e8b04e1a = $dab843e5d8f4731a$var$createDecipher;
$dab843e5d8f4731a$export$36b6d6ef312eab39 = $dab843e5d8f4731a$export$f5e7e39d57cd9700 = $dab843e5d8f4731a$var$createDecipheriv;
$dab843e5d8f4731a$export$dedd8dc3dc62b370 = $dab843e5d8f4731a$export$58a258485f1e49f6 = $dab843e5d8f4731a$var$getCiphers;

});
parcelRequire.register("iDkG4", function(module, exports) {

var $lTHWE = parcelRequire("lTHWE");

var $fKjC3 = parcelRequire("fKjC3");

var $cvM26 = parcelRequire("cvM26");

var $ahmAR = parcelRequire("ahmAR");
var $d90be8ab3adc5e4a$require$Buffer = $ahmAR.Buffer;
var $d90be8ab3adc5e4a$var$modes = {
    'des-ede3-cbc': $fKjC3.CBC.instantiate($fKjC3.EDE),
    'des-ede3': $fKjC3.EDE,
    'des-ede-cbc': $fKjC3.CBC.instantiate($fKjC3.EDE),
    'des-ede': $fKjC3.EDE,
    'des-cbc': $fKjC3.CBC.instantiate($fKjC3.DES),
    'des-ecb': $fKjC3.DES
};
$d90be8ab3adc5e4a$var$modes.des = $d90be8ab3adc5e4a$var$modes['des-cbc'];
$d90be8ab3adc5e4a$var$modes.des3 = $d90be8ab3adc5e4a$var$modes['des-ede3-cbc'];
module.exports = $d90be8ab3adc5e4a$var$DES;
$cvM26($d90be8ab3adc5e4a$var$DES, $lTHWE);
function $d90be8ab3adc5e4a$var$DES(opts) {
    $lTHWE.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = $d90be8ab3adc5e4a$var$modes[modeName];
    var type;
    if (opts.decrypt) type = 'decrypt';
    else type = 'encrypt';
    var key = opts.key;
    if (!$d90be8ab3adc5e4a$require$Buffer.isBuffer(key)) key = $d90be8ab3adc5e4a$require$Buffer.from(key);
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') key = $d90be8ab3adc5e4a$require$Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!$d90be8ab3adc5e4a$require$Buffer.isBuffer(iv)) iv = $d90be8ab3adc5e4a$require$Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
$d90be8ab3adc5e4a$var$DES.prototype._update = function(data) {
    return $d90be8ab3adc5e4a$require$Buffer.from(this._des.update(data));
};
$d90be8ab3adc5e4a$var$DES.prototype._final = function() {
    return $d90be8ab3adc5e4a$require$Buffer.from(this._des.final());
};

});
parcelRequire.register("fKjC3", function(module, exports) {

$parcel$export(module.exports, "DES", () => $b76a5d90f19137d5$export$cc8859615686b300, (v) => $b76a5d90f19137d5$export$cc8859615686b300 = v);
$parcel$export(module.exports, "CBC", () => $b76a5d90f19137d5$export$8ad3f227af08fcc5, (v) => $b76a5d90f19137d5$export$8ad3f227af08fcc5 = v);
$parcel$export(module.exports, "EDE", () => $b76a5d90f19137d5$export$947646e34766044f, (v) => $b76a5d90f19137d5$export$947646e34766044f = v);
var $b76a5d90f19137d5$export$eab97d15b1788b8d;
var $b76a5d90f19137d5$export$26e5786e8ac8e530;
var $b76a5d90f19137d5$export$cc8859615686b300;
var $b76a5d90f19137d5$export$8ad3f227af08fcc5;
var $b76a5d90f19137d5$export$947646e34766044f;
'use strict';

$b76a5d90f19137d5$export$eab97d15b1788b8d = (parcelRequire("eXJYY"));

$b76a5d90f19137d5$export$26e5786e8ac8e530 = (parcelRequire("3zDDi"));

$b76a5d90f19137d5$export$cc8859615686b300 = (parcelRequire("jOCcq"));

$b76a5d90f19137d5$export$8ad3f227af08fcc5 = (parcelRequire("5y0Q0"));

$b76a5d90f19137d5$export$947646e34766044f = (parcelRequire("8ktgT"));

});
parcelRequire.register("eXJYY", function(module, exports) {

$parcel$export(module.exports, "readUInt32BE", () => $ae4a3e82e813a1f6$export$cfaef8ed399428b0, (v) => $ae4a3e82e813a1f6$export$cfaef8ed399428b0 = v);
$parcel$export(module.exports, "writeUInt32BE", () => $ae4a3e82e813a1f6$export$a80c7deaea7cbd80, (v) => $ae4a3e82e813a1f6$export$a80c7deaea7cbd80 = v);
$parcel$export(module.exports, "ip", () => $ae4a3e82e813a1f6$export$ed7577ae6e1cd0ef, (v) => $ae4a3e82e813a1f6$export$ed7577ae6e1cd0ef = v);
$parcel$export(module.exports, "rip", () => $ae4a3e82e813a1f6$export$5dcbef3aa594f567, (v) => $ae4a3e82e813a1f6$export$5dcbef3aa594f567 = v);
$parcel$export(module.exports, "pc1", () => $ae4a3e82e813a1f6$export$5bc8001ca71ed9c5, (v) => $ae4a3e82e813a1f6$export$5bc8001ca71ed9c5 = v);
$parcel$export(module.exports, "r28shl", () => $ae4a3e82e813a1f6$export$3e714e2c5d5d8cb2, (v) => $ae4a3e82e813a1f6$export$3e714e2c5d5d8cb2 = v);
$parcel$export(module.exports, "pc2", () => $ae4a3e82e813a1f6$export$94c3e544fd062b7f, (v) => $ae4a3e82e813a1f6$export$94c3e544fd062b7f = v);
$parcel$export(module.exports, "expand", () => $ae4a3e82e813a1f6$export$9f77e0932fb78f72, (v) => $ae4a3e82e813a1f6$export$9f77e0932fb78f72 = v);
$parcel$export(module.exports, "substitute", () => $ae4a3e82e813a1f6$export$d865ce2836f5927f, (v) => $ae4a3e82e813a1f6$export$d865ce2836f5927f = v);
$parcel$export(module.exports, "permute", () => $ae4a3e82e813a1f6$export$95e62ad65da8b7d2, (v) => $ae4a3e82e813a1f6$export$95e62ad65da8b7d2 = v);
$parcel$export(module.exports, "padSplit", () => $ae4a3e82e813a1f6$export$209139ff098c441a, (v) => $ae4a3e82e813a1f6$export$209139ff098c441a = v);
var $ae4a3e82e813a1f6$export$cfaef8ed399428b0;
var $ae4a3e82e813a1f6$export$a80c7deaea7cbd80;
var $ae4a3e82e813a1f6$export$ed7577ae6e1cd0ef;
var $ae4a3e82e813a1f6$export$5dcbef3aa594f567;
var $ae4a3e82e813a1f6$export$5bc8001ca71ed9c5;
var $ae4a3e82e813a1f6$export$3e714e2c5d5d8cb2;
var $ae4a3e82e813a1f6$export$94c3e544fd062b7f;
var $ae4a3e82e813a1f6$export$9f77e0932fb78f72;
var $ae4a3e82e813a1f6$export$d865ce2836f5927f;
var $ae4a3e82e813a1f6$export$95e62ad65da8b7d2;
var $ae4a3e82e813a1f6$export$209139ff098c441a;
'use strict';
$ae4a3e82e813a1f6$export$cfaef8ed399428b0 = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
$ae4a3e82e813a1f6$export$a80c7deaea7cbd80 = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 255;
    bytes[2 + off] = value >>> 8 & 255;
    bytes[3 + off] = value & 255;
};
$ae4a3e82e813a1f6$export$ed7577ae6e1cd0ef = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$ae4a3e82e813a1f6$export$5dcbef3aa594f567 = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$ae4a3e82e813a1f6$export$5bc8001ca71ed9c5 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$ae4a3e82e813a1f6$export$3e714e2c5d5d8cb2 = function r28shl(num, shift) {
    return num << shift & 268435455 | num >>> 28 - shift;
};
var $ae4a3e82e813a1f6$var$pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
$ae4a3e82e813a1f6$export$94c3e544fd062b7f = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = $ae4a3e82e813a1f6$var$pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> $ae4a3e82e813a1f6$var$pc2table[i] & 1;
    }
    for(var i = len; i < $ae4a3e82e813a1f6$var$pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> $ae4a3e82e813a1f6$var$pc2table[i] & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$ae4a3e82e813a1f6$export$9f77e0932fb78f72 = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 63;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 63;
        outR <<= 6;
    }
    outR |= (r & 31) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var $ae4a3e82e813a1f6$var$sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
$ae4a3e82e813a1f6$export$d865ce2836f5927f = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 63;
        var sb = $ae4a3e82e813a1f6$var$sTable[i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 63;
        var sb = $ae4a3e82e813a1f6$var$sTable[256 + i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var $ae4a3e82e813a1f6$var$permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
$ae4a3e82e813a1f6$export$95e62ad65da8b7d2 = function permute(num) {
    var out = 0;
    for(var i = 0; i < $ae4a3e82e813a1f6$var$permuteTable.length; i++){
        out <<= 1;
        out |= num >>> $ae4a3e82e813a1f6$var$permuteTable[i] & 1;
    }
    return out >>> 0;
};
$ae4a3e82e813a1f6$export$209139ff098c441a = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = '0' + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(' ');
};

});

parcelRequire.register("3zDDi", function(module, exports) {
'use strict';

var $ifIvd = parcelRequire("ifIvd");
function $29a3623607dec173$var$Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
}
module.exports = $29a3623607dec173$var$Cipher;
$29a3623607dec173$var$Cipher.prototype._init = function _init() {
// Might be overrided
};
$29a3623607dec173$var$Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === 'decrypt') return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
$29a3623607dec173$var$Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
$29a3623607dec173$var$Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
$29a3623607dec173$var$Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
$29a3623607dec173$var$Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
$29a3623607dec173$var$Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === 'encrypt') last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
$29a3623607dec173$var$Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
$29a3623607dec173$var$Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
$29a3623607dec173$var$Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
$29a3623607dec173$var$Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    $ifIvd.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

});
parcelRequire.register("ifIvd", function(module, exports) {
module.exports = $d49c25fb24feba82$var$assert;
function $d49c25fb24feba82$var$assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
}
$d49c25fb24feba82$var$assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

});


parcelRequire.register("jOCcq", function(module, exports) {
'use strict';

var $ifIvd = parcelRequire("ifIvd");

var $cvM26 = parcelRequire("cvM26");

var $eXJYY = parcelRequire("eXJYY");

var $3zDDi = parcelRequire("3zDDi");
function $e6d05171f7bf232c$var$DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function $e6d05171f7bf232c$var$DES(options) {
    $3zDDi.call(this, options);
    var state = new $e6d05171f7bf232c$var$DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
$cvM26($e6d05171f7bf232c$var$DES, $3zDDi);
module.exports = $e6d05171f7bf232c$var$DES;
$e6d05171f7bf232c$var$DES.create = function create(options) {
    return new $e6d05171f7bf232c$var$DES(options);
};
var $e6d05171f7bf232c$var$shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
$e6d05171f7bf232c$var$DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    $ifIvd.equal(key.length, this.blockSize, 'Invalid key length');
    var kL = $eXJYY.readUInt32BE(key, 0);
    var kR = $eXJYY.readUInt32BE(key, 4);
    $eXJYY.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = $e6d05171f7bf232c$var$shiftTable[i >>> 1];
        kL = $eXJYY.r28shl(kL, shift);
        kR = $eXJYY.r28shl(kR, shift);
        $eXJYY.pc2(kL, kR, state.keys, i);
    }
};
$e6d05171f7bf232c$var$DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = $eXJYY.readUInt32BE(inp, inOff);
    var r = $eXJYY.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    $eXJYY.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    $eXJYY.writeUInt32BE(out, l, outOff);
    $eXJYY.writeUInt32BE(out, r, outOff + 4);
};
$e6d05171f7bf232c$var$DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
$e6d05171f7bf232c$var$DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)$ifIvd.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
$e6d05171f7bf232c$var$DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $eXJYY.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $eXJYY.substitute(keyL, keyR);
        var f = $eXJYY.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    $eXJYY.rip(r, l, out, off);
};
$e6d05171f7bf232c$var$DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $eXJYY.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $eXJYY.substitute(keyL, keyR);
        var f = $eXJYY.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    $eXJYY.rip(l, r, out, off);
};

});

parcelRequire.register("5y0Q0", function(module, exports) {

$parcel$export(module.exports, "instantiate", () => $40a0c713280dbea7$export$f9bb8d20ccc7477a, (v) => $40a0c713280dbea7$export$f9bb8d20ccc7477a = v);
var $40a0c713280dbea7$export$f9bb8d20ccc7477a;
'use strict';

var $ifIvd = parcelRequire("ifIvd");

var $cvM26 = parcelRequire("cvM26");
var $40a0c713280dbea7$var$proto = {
};
function $40a0c713280dbea7$var$CBCState(iv) {
    $ifIvd.equal(iv.length, 8, 'Invalid IV length');
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function $40a0c713280dbea7$var$instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    $cvM26(CBC, Base);
    var keys = Object.keys($40a0c713280dbea7$var$proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = $40a0c713280dbea7$var$proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
$40a0c713280dbea7$export$f9bb8d20ccc7477a = $40a0c713280dbea7$var$instantiate;
$40a0c713280dbea7$var$proto._cbcInit = function _cbcInit() {
    var state = new $40a0c713280dbea7$var$CBCState(this.options.iv);
    this._cbcState = state;
};
$40a0c713280dbea7$var$proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === 'encrypt') {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

});

parcelRequire.register("8ktgT", function(module, exports) {
'use strict';

var $ifIvd = parcelRequire("ifIvd");

var $cvM26 = parcelRequire("cvM26");

var $3zDDi = parcelRequire("3zDDi");

var $jOCcq = parcelRequire("jOCcq");
function $6106e5ae093d6fa2$var$EDEState(type, key) {
    $ifIvd.equal(key.length, 24, 'Invalid key length');
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === 'encrypt') this.ciphers = [
        $jOCcq.create({
            type: 'encrypt',
            key: k1
        }),
        $jOCcq.create({
            type: 'decrypt',
            key: k2
        }),
        $jOCcq.create({
            type: 'encrypt',
            key: k3
        })
    ];
    else this.ciphers = [
        $jOCcq.create({
            type: 'decrypt',
            key: k3
        }),
        $jOCcq.create({
            type: 'encrypt',
            key: k2
        }),
        $jOCcq.create({
            type: 'decrypt',
            key: k1
        })
    ];
}
function $6106e5ae093d6fa2$var$EDE(options) {
    $3zDDi.call(this, options);
    var state = new $6106e5ae093d6fa2$var$EDEState(this.type, this.options.key);
    this._edeState = state;
}
$cvM26($6106e5ae093d6fa2$var$EDE, $3zDDi);
module.exports = $6106e5ae093d6fa2$var$EDE;
$6106e5ae093d6fa2$var$EDE.create = function create(options) {
    return new $6106e5ae093d6fa2$var$EDE(options);
};
$6106e5ae093d6fa2$var$EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
$6106e5ae093d6fa2$var$EDE.prototype._pad = $jOCcq.prototype._pad;
$6106e5ae093d6fa2$var$EDE.prototype._unpad = $jOCcq.prototype._unpad;

});



parcelRequire.register("aRUH2", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", () => $7e9ad4aee760e076$export$2f64596b8cbf08b4, (v) => $7e9ad4aee760e076$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "createDecipheriv", () => $7e9ad4aee760e076$export$36b6d6ef312eab39, (v) => $7e9ad4aee760e076$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "getCiphers", () => $7e9ad4aee760e076$export$58a258485f1e49f6, (v) => $7e9ad4aee760e076$export$58a258485f1e49f6 = v);
var $7e9ad4aee760e076$export$bdd223f16383713e;
var $7e9ad4aee760e076$export$26e5786e8ac8e530;
var $7e9ad4aee760e076$export$2f64596b8cbf08b4;
var $7e9ad4aee760e076$export$20533d26f07f1ee0;
var $7e9ad4aee760e076$export$12ada9414fbc594c;
var $7e9ad4aee760e076$export$2ce6d8d0e8b04e1a;
var $7e9ad4aee760e076$export$36b6d6ef312eab39;
var $7e9ad4aee760e076$export$f5e7e39d57cd9700;
var $7e9ad4aee760e076$export$dedd8dc3dc62b370;
var $7e9ad4aee760e076$export$58a258485f1e49f6;

var $6mSpI = parcelRequire("6mSpI");

var $8nPjw = parcelRequire("8nPjw");

var $c9wNL = parcelRequire("c9wNL");
function $7e9ad4aee760e076$var$getCiphers() {
    return Object.keys($c9wNL);
}
$7e9ad4aee760e076$export$bdd223f16383713e = $7e9ad4aee760e076$export$26e5786e8ac8e530 = $6mSpI.createCipher;
$7e9ad4aee760e076$export$2f64596b8cbf08b4 = $7e9ad4aee760e076$export$20533d26f07f1ee0 = $6mSpI.createCipheriv;
$7e9ad4aee760e076$export$12ada9414fbc594c = $7e9ad4aee760e076$export$2ce6d8d0e8b04e1a = $8nPjw.createDecipher;
$7e9ad4aee760e076$export$36b6d6ef312eab39 = $7e9ad4aee760e076$export$f5e7e39d57cd9700 = $8nPjw.createDecipheriv;
$7e9ad4aee760e076$export$dedd8dc3dc62b370 = $7e9ad4aee760e076$export$58a258485f1e49f6 = $7e9ad4aee760e076$var$getCiphers;

});
parcelRequire.register("6mSpI", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", () => $4a2f019287bf6b9c$export$2f64596b8cbf08b4, (v) => $4a2f019287bf6b9c$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "createCipher", () => $4a2f019287bf6b9c$export$bdd223f16383713e, (v) => $4a2f019287bf6b9c$export$bdd223f16383713e = v);
var $4a2f019287bf6b9c$export$2f64596b8cbf08b4;
var $4a2f019287bf6b9c$export$bdd223f16383713e;

var $kRniL = parcelRequire("kRniL");

var $81AZS = parcelRequire("81AZS");

var $ahmAR = parcelRequire("ahmAR");
var $4a2f019287bf6b9c$require$Buffer = $ahmAR.Buffer;

var $40pI3 = parcelRequire("40pI3");

var $lTHWE = parcelRequire("lTHWE");

var $hGchr = parcelRequire("hGchr");

var $pLjxr = parcelRequire("pLjxr");

var $cvM26 = parcelRequire("cvM26");
function $4a2f019287bf6b9c$var$Cipher(mode, key, iv) {
    $lTHWE.call(this);
    this._cache = new $4a2f019287bf6b9c$var$Splitter();
    this._cipher = new $hGchr.AES(key);
    this._prev = $4a2f019287bf6b9c$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$cvM26($4a2f019287bf6b9c$var$Cipher, $lTHWE);
$4a2f019287bf6b9c$var$Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return $4a2f019287bf6b9c$require$Buffer.concat(out);
};
var $4a2f019287bf6b9c$var$PADDING = $4a2f019287bf6b9c$require$Buffer.alloc(16, 16);
$4a2f019287bf6b9c$var$Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals($4a2f019287bf6b9c$var$PADDING)) {
        this._cipher.scrub();
        throw new Error('data not multiple of block length');
    }
};
$4a2f019287bf6b9c$var$Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $4a2f019287bf6b9c$var$Splitter() {
    this.cache = $4a2f019287bf6b9c$require$Buffer.allocUnsafe(0);
}
$4a2f019287bf6b9c$var$Splitter.prototype.add = function(data) {
    this.cache = $4a2f019287bf6b9c$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$4a2f019287bf6b9c$var$Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$4a2f019287bf6b9c$var$Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = $4a2f019287bf6b9c$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return $4a2f019287bf6b9c$require$Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function $4a2f019287bf6b9c$var$createCipheriv(suite, password, iv) {
    var config = $kRniL[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof password === 'string') password = $4a2f019287bf6b9c$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (typeof iv === 'string') iv = $4a2f019287bf6b9c$require$Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (config.type === 'stream') return new $40pI3(config.module, password, iv);
    else if (config.type === 'auth') return new $81AZS(config.module, password, iv);
    return new $4a2f019287bf6b9c$var$Cipher(config.module, password, iv);
}
function $4a2f019287bf6b9c$var$createCipher(suite, password) {
    var config = $kRniL[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = $pLjxr(password, false, config.key, config.iv);
    return $4a2f019287bf6b9c$var$createCipheriv(suite, keys.key, keys.iv);
}
$4a2f019287bf6b9c$export$2f64596b8cbf08b4 = $4a2f019287bf6b9c$var$createCipheriv;
$4a2f019287bf6b9c$export$bdd223f16383713e = $4a2f019287bf6b9c$var$createCipher;

});
parcelRequire.register("kRniL", function(module, exports) {








var $f2fad5149289f5e7$var$modeModules = {
    ECB: (parcelRequire("eoOa2")),
    CBC: (parcelRequire("2ikNU")),
    CFB: (parcelRequire("3O2QB")),
    CFB8: (parcelRequire("3TChs")),
    CFB1: (parcelRequire("5P7Bc")),
    OFB: (parcelRequire("ghjq9")),
    CTR: (parcelRequire("j3v6y")),
    GCM: (parcelRequire("j3v6y"))
};

var $c9wNL = parcelRequire("c9wNL");
for(var $f2fad5149289f5e7$var$key in $c9wNL)$c9wNL[$f2fad5149289f5e7$var$key].module = $f2fad5149289f5e7$var$modeModules[$c9wNL[$f2fad5149289f5e7$var$key].mode];
module.exports = $c9wNL;

});
parcelRequire.register("eoOa2", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $a7ba37816d354812$export$5b0f6292f11d1d18, (v) => $a7ba37816d354812$export$5b0f6292f11d1d18 = v);
$parcel$export(module.exports, "decrypt", () => $a7ba37816d354812$export$e85a0c9a1067c5d3, (v) => $a7ba37816d354812$export$e85a0c9a1067c5d3 = v);
var $a7ba37816d354812$export$5b0f6292f11d1d18;
var $a7ba37816d354812$export$e85a0c9a1067c5d3;
$a7ba37816d354812$export$5b0f6292f11d1d18 = function(self, block) {
    return self._cipher.encryptBlock(block);
};
$a7ba37816d354812$export$e85a0c9a1067c5d3 = function(self, block) {
    return self._cipher.decryptBlock(block);
};

});

parcelRequire.register("2ikNU", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $1abd667332c8b26d$export$5b0f6292f11d1d18, (v) => $1abd667332c8b26d$export$5b0f6292f11d1d18 = v);
$parcel$export(module.exports, "decrypt", () => $1abd667332c8b26d$export$e85a0c9a1067c5d3, (v) => $1abd667332c8b26d$export$e85a0c9a1067c5d3 = v);
var $1abd667332c8b26d$export$5b0f6292f11d1d18;
var $1abd667332c8b26d$export$e85a0c9a1067c5d3;

var $jC9G9 = parcelRequire("jC9G9");
$1abd667332c8b26d$export$5b0f6292f11d1d18 = function(self, block) {
    var data = $jC9G9(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
$1abd667332c8b26d$export$e85a0c9a1067c5d3 = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return $jC9G9(out, pad);
};

});
parcelRequire.register("jC9G9", function(module, exports) {

var $fV0m8 = parcelRequire("fV0m8");
var $e47912f1c1ca56ec$require$Buffer = $fV0m8.Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new $e47912f1c1ca56ec$require$Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

});


parcelRequire.register("3O2QB", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $2c584010c4972cf9$export$5b0f6292f11d1d18, (v) => $2c584010c4972cf9$export$5b0f6292f11d1d18 = v);
var $2c584010c4972cf9$export$5b0f6292f11d1d18;

var $ahmAR = parcelRequire("ahmAR");
var $2c584010c4972cf9$require$Buffer = $ahmAR.Buffer;

var $jC9G9 = parcelRequire("jC9G9");
function $2c584010c4972cf9$var$encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = $jC9G9(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = $2c584010c4972cf9$require$Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
$2c584010c4972cf9$export$5b0f6292f11d1d18 = function(self, data, decrypt) {
    var out = $2c584010c4972cf9$require$Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = $2c584010c4972cf9$require$Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = $2c584010c4972cf9$require$Buffer.concat([
                out,
                $2c584010c4972cf9$var$encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = $2c584010c4972cf9$require$Buffer.concat([
                out,
                $2c584010c4972cf9$var$encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

});

parcelRequire.register("3TChs", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $2d6433e4f286c365$export$5b0f6292f11d1d18, (v) => $2d6433e4f286c365$export$5b0f6292f11d1d18 = v);
var $2d6433e4f286c365$export$5b0f6292f11d1d18;

var $ahmAR = parcelRequire("ahmAR");
var $2d6433e4f286c365$require$Buffer = $ahmAR.Buffer;
function $2d6433e4f286c365$var$encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = $2d6433e4f286c365$require$Buffer.concat([
        self._prev.slice(1),
        $2d6433e4f286c365$require$Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
$2d6433e4f286c365$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $2d6433e4f286c365$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $2d6433e4f286c365$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("5P7Bc", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $43d79c31434a190f$export$5b0f6292f11d1d18, (v) => $43d79c31434a190f$export$5b0f6292f11d1d18 = v);
var $43d79c31434a190f$export$5b0f6292f11d1d18;

var $ahmAR = parcelRequire("ahmAR");
var $43d79c31434a190f$require$Buffer = $ahmAR.Buffer;
function $43d79c31434a190f$var$encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 128 : 0;
        value = pad[0] ^ bit;
        out += (value & 128) >> i % 8;
        self._prev = $43d79c31434a190f$var$shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function $43d79c31434a190f$var$shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = $43d79c31434a190f$require$Buffer.allocUnsafe(buffer.length);
    buffer = $43d79c31434a190f$require$Buffer.concat([
        buffer,
        $43d79c31434a190f$require$Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
$43d79c31434a190f$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $43d79c31434a190f$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $43d79c31434a190f$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("ghjq9", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $bd9d4c6c86fde935$export$5b0f6292f11d1d18, (v) => $bd9d4c6c86fde935$export$5b0f6292f11d1d18 = v);
var $bd9d4c6c86fde935$export$5b0f6292f11d1d18;

var $fV0m8 = parcelRequire("fV0m8");
var $bd9d4c6c86fde935$require$Buffer = $fV0m8.Buffer;

var $jC9G9 = parcelRequire("jC9G9");
function $bd9d4c6c86fde935$var$getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
$bd9d4c6c86fde935$export$5b0f6292f11d1d18 = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = $bd9d4c6c86fde935$require$Buffer.concat([
        self._cache,
        $bd9d4c6c86fde935$var$getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $jC9G9(chunk, pad);
};

});

parcelRequire.register("j3v6y", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $ddf66ce3a42246d6$export$5b0f6292f11d1d18, (v) => $ddf66ce3a42246d6$export$5b0f6292f11d1d18 = v);
var $ddf66ce3a42246d6$export$5b0f6292f11d1d18;

var $jC9G9 = parcelRequire("jC9G9");

var $ahmAR = parcelRequire("ahmAR");
var $ddf66ce3a42246d6$require$Buffer = $ahmAR.Buffer;

var $bf8am = parcelRequire("bf8am");
function $ddf66ce3a42246d6$var$getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    $bf8am(self._prev);
    return out;
}
var $ddf66ce3a42246d6$var$blockSize = 16;
$ddf66ce3a42246d6$export$5b0f6292f11d1d18 = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / $ddf66ce3a42246d6$var$blockSize);
    var start = self._cache.length;
    self._cache = $ddf66ce3a42246d6$require$Buffer.concat([
        self._cache,
        $ddf66ce3a42246d6$require$Buffer.allocUnsafe(chunkNum * $ddf66ce3a42246d6$var$blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = $ddf66ce3a42246d6$var$getBlock(self);
        var offset = start + i * $ddf66ce3a42246d6$var$blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $jC9G9(chunk, pad);
};

});
parcelRequire.register("bf8am", function(module, exports) {
function $82f76e0558c8b5a7$var$incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = $82f76e0558c8b5a7$var$incr32;

});


parcelRequire.register("c9wNL", function(module, exports) {
module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

});


parcelRequire.register("81AZS", function(module, exports) {

var $hGchr = parcelRequire("hGchr");

var $ahmAR = parcelRequire("ahmAR");
var $5d7b1d8e28370067$require$Buffer = $ahmAR.Buffer;

var $lTHWE = parcelRequire("lTHWE");

var $cvM26 = parcelRequire("cvM26");

var $43wHN = parcelRequire("43wHN");

var $jC9G9 = parcelRequire("jC9G9");

var $bf8am = parcelRequire("bf8am");
function $5d7b1d8e28370067$var$xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function $5d7b1d8e28370067$var$calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = $5d7b1d8e28370067$require$Buffer.concat([
            iv,
            $5d7b1d8e28370067$require$Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return $5d7b1d8e28370067$require$Buffer.concat([
            iv,
            $5d7b1d8e28370067$require$Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new $43wHN(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update($5d7b1d8e28370067$require$Buffer.alloc(toPad, 0));
    }
    ghash.update($5d7b1d8e28370067$require$Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = $5d7b1d8e28370067$require$Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = $5d7b1d8e28370067$require$Buffer.from(self._finID);
    $bf8am(out);
    return out;
}
function $5d7b1d8e28370067$var$StreamCipher(mode, key, iv, decrypt) {
    $lTHWE.call(this);
    var h = $5d7b1d8e28370067$require$Buffer.alloc(4, 0);
    this._cipher = new $hGchr.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new $43wHN(ck);
    iv = $5d7b1d8e28370067$var$calcIv(this, iv, ck);
    this._prev = $5d7b1d8e28370067$require$Buffer.from(iv);
    this._cache = $5d7b1d8e28370067$require$Buffer.allocUnsafe(0);
    this._secCache = $5d7b1d8e28370067$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
$cvM26($5d7b1d8e28370067$var$StreamCipher, $lTHWE);
$5d7b1d8e28370067$var$StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = $5d7b1d8e28370067$require$Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
$5d7b1d8e28370067$var$StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
    var tag = $jC9G9(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && $5d7b1d8e28370067$var$xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
    this._authTag = tag;
    this._cipher.scrub();
};
$5d7b1d8e28370067$var$StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !$5d7b1d8e28370067$require$Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
    return this._authTag;
};
$5d7b1d8e28370067$var$StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
    this._authTag = tag;
};
$5d7b1d8e28370067$var$StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state');
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = $5d7b1d8e28370067$var$StreamCipher;

});
parcelRequire.register("hGchr", function(module, exports) {

$parcel$export(module.exports, "AES", () => $cdefe283390e4b3e$export$b80fbe1c3a2b92b5, (v) => $cdefe283390e4b3e$export$b80fbe1c3a2b92b5 = v);
var $cdefe283390e4b3e$export$b80fbe1c3a2b92b5;

var $ahmAR = parcelRequire("ahmAR");
var $cdefe283390e4b3e$require$Buffer = $ahmAR.Buffer;
function $cdefe283390e4b3e$var$asUInt32Array(buf) {
    if (!$cdefe283390e4b3e$require$Buffer.isBuffer(buf)) buf = $cdefe283390e4b3e$require$Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function $cdefe283390e4b3e$var$scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function $cdefe283390e4b3e$var$cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var $cdefe283390e4b3e$var$RCON = [
    0,
    1,
    2,
    4,
    8,
    16,
    32,
    64,
    128,
    27,
    54
];
var $cdefe283390e4b3e$var$G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 283;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 257 ^ sx * 16843008;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function $cdefe283390e4b3e$var$AES(key) {
    this._key = $cdefe283390e4b3e$var$asUInt32Array(key);
    this._reset();
}
$cdefe283390e4b3e$var$AES.blockSize = 16;
$cdefe283390e4b3e$var$AES.keySize = 32;
$cdefe283390e4b3e$var$AES.prototype.blockSize = $cdefe283390e4b3e$var$AES.blockSize;
$cdefe283390e4b3e$var$AES.prototype.keySize = $cdefe283390e4b3e$var$AES.keySize;
$cdefe283390e4b3e$var$AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = $cdefe283390e4b3e$var$G.SBOX[t >>> 24] << 24 | $cdefe283390e4b3e$var$G.SBOX[t >>> 16 & 255] << 16 | $cdefe283390e4b3e$var$G.SBOX[t >>> 8 & 255] << 8 | $cdefe283390e4b3e$var$G.SBOX[t & 255];
            t ^= $cdefe283390e4b3e$var$RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = $cdefe283390e4b3e$var$G.SBOX[t >>> 24] << 24 | $cdefe283390e4b3e$var$G.SBOX[t >>> 16 & 255] << 16 | $cdefe283390e4b3e$var$G.SBOX[t >>> 8 & 255] << 8 | $cdefe283390e4b3e$var$G.SBOX[t & 255];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = $cdefe283390e4b3e$var$G.INV_SUB_MIX[0][$cdefe283390e4b3e$var$G.SBOX[tt >>> 24]] ^ $cdefe283390e4b3e$var$G.INV_SUB_MIX[1][$cdefe283390e4b3e$var$G.SBOX[tt >>> 16 & 255]] ^ $cdefe283390e4b3e$var$G.INV_SUB_MIX[2][$cdefe283390e4b3e$var$G.SBOX[tt >>> 8 & 255]] ^ $cdefe283390e4b3e$var$G.INV_SUB_MIX[3][$cdefe283390e4b3e$var$G.SBOX[tt & 255]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
$cdefe283390e4b3e$var$AES.prototype.encryptBlockRaw = function(M) {
    M = $cdefe283390e4b3e$var$asUInt32Array(M);
    return $cdefe283390e4b3e$var$cryptBlock(M, this._keySchedule, $cdefe283390e4b3e$var$G.SUB_MIX, $cdefe283390e4b3e$var$G.SBOX, this._nRounds);
};
$cdefe283390e4b3e$var$AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = $cdefe283390e4b3e$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
$cdefe283390e4b3e$var$AES.prototype.decryptBlock = function(M) {
    M = $cdefe283390e4b3e$var$asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = $cdefe283390e4b3e$var$cryptBlock(M, this._invKeySchedule, $cdefe283390e4b3e$var$G.INV_SUB_MIX, $cdefe283390e4b3e$var$G.INV_SBOX, this._nRounds);
    var buf = $cdefe283390e4b3e$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
$cdefe283390e4b3e$var$AES.prototype.scrub = function() {
    $cdefe283390e4b3e$var$scrubVec(this._keySchedule);
    $cdefe283390e4b3e$var$scrubVec(this._invKeySchedule);
    $cdefe283390e4b3e$var$scrubVec(this._key);
};
$cdefe283390e4b3e$export$b80fbe1c3a2b92b5 = $cdefe283390e4b3e$var$AES;

});

parcelRequire.register("43wHN", function(module, exports) {

var $ahmAR = parcelRequire("ahmAR");
var $2f40cfd23d158cea$require$Buffer = $ahmAR.Buffer;
var $2f40cfd23d158cea$var$ZEROES = $2f40cfd23d158cea$require$Buffer.alloc(16, 0);
function $2f40cfd23d158cea$var$toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function $2f40cfd23d158cea$var$fromArray(out) {
    var buf = $2f40cfd23d158cea$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function $2f40cfd23d158cea$var$GHASH(key) {
    this.h = key;
    this.state = $2f40cfd23d158cea$require$Buffer.alloc(16, 0);
    this.cache = $2f40cfd23d158cea$require$Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
$2f40cfd23d158cea$var$GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
$2f40cfd23d158cea$var$GHASH.prototype._multiply = function() {
    var Vi = $2f40cfd23d158cea$var$toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = $2f40cfd23d158cea$var$fromArray(Zi);
};
$2f40cfd23d158cea$var$GHASH.prototype.update = function(buf) {
    this.cache = $2f40cfd23d158cea$require$Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
$2f40cfd23d158cea$var$GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash($2f40cfd23d158cea$require$Buffer.concat([
        this.cache,
        $2f40cfd23d158cea$var$ZEROES
    ], 16));
    this.ghash($2f40cfd23d158cea$var$fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = $2f40cfd23d158cea$var$GHASH;

});


parcelRequire.register("40pI3", function(module, exports) {

var $hGchr = parcelRequire("hGchr");

var $ahmAR = parcelRequire("ahmAR");
var $2eab1ae2d6296d58$require$Buffer = $ahmAR.Buffer;

var $lTHWE = parcelRequire("lTHWE");

var $cvM26 = parcelRequire("cvM26");
function $2eab1ae2d6296d58$var$StreamCipher(mode, key, iv, decrypt) {
    $lTHWE.call(this);
    this._cipher = new $hGchr.AES(key);
    this._prev = $2eab1ae2d6296d58$require$Buffer.from(iv);
    this._cache = $2eab1ae2d6296d58$require$Buffer.allocUnsafe(0);
    this._secCache = $2eab1ae2d6296d58$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
$cvM26($2eab1ae2d6296d58$var$StreamCipher, $lTHWE);
$2eab1ae2d6296d58$var$StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
$2eab1ae2d6296d58$var$StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = $2eab1ae2d6296d58$var$StreamCipher;

});

parcelRequire.register("pLjxr", function(module, exports) {

var $ahmAR = parcelRequire("ahmAR");
var $04d709840589a5c5$require$Buffer = $ahmAR.Buffer;

var $iUqrN = parcelRequire("iUqrN");
/* eslint-disable camelcase */ function $04d709840589a5c5$var$EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!$04d709840589a5c5$require$Buffer.isBuffer(password)) password = $04d709840589a5c5$require$Buffer.from(password, 'binary');
    if (salt) {
        if (!$04d709840589a5c5$require$Buffer.isBuffer(salt)) salt = $04d709840589a5c5$require$Buffer.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
    }
    var keyLen = keyBits / 8;
    var key = $04d709840589a5c5$require$Buffer.alloc(keyLen);
    var iv = $04d709840589a5c5$require$Buffer.alloc(ivLen || 0);
    var tmp = $04d709840589a5c5$require$Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new $iUqrN();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = $04d709840589a5c5$var$EVP_BytesToKey;

});


parcelRequire.register("8nPjw", function(module, exports) {

$parcel$export(module.exports, "createDecipher", () => $61a84691d0dd9cbf$export$12ada9414fbc594c, (v) => $61a84691d0dd9cbf$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "createDecipheriv", () => $61a84691d0dd9cbf$export$36b6d6ef312eab39, (v) => $61a84691d0dd9cbf$export$36b6d6ef312eab39 = v);
var $61a84691d0dd9cbf$export$12ada9414fbc594c;
var $61a84691d0dd9cbf$export$36b6d6ef312eab39;

var $81AZS = parcelRequire("81AZS");

var $ahmAR = parcelRequire("ahmAR");
var $61a84691d0dd9cbf$require$Buffer = $ahmAR.Buffer;

var $kRniL = parcelRequire("kRniL");

var $40pI3 = parcelRequire("40pI3");

var $lTHWE = parcelRequire("lTHWE");

var $hGchr = parcelRequire("hGchr");

var $pLjxr = parcelRequire("pLjxr");

var $cvM26 = parcelRequire("cvM26");
function $61a84691d0dd9cbf$var$Decipher(mode, key, iv) {
    $lTHWE.call(this);
    this._cache = new $61a84691d0dd9cbf$var$Splitter();
    this._last = void 0;
    this._cipher = new $hGchr.AES(key);
    this._prev = $61a84691d0dd9cbf$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$cvM26($61a84691d0dd9cbf$var$Decipher, $lTHWE);
$61a84691d0dd9cbf$var$Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return $61a84691d0dd9cbf$require$Buffer.concat(out);
};
$61a84691d0dd9cbf$var$Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return $61a84691d0dd9cbf$var$unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error('data not multiple of block length');
};
$61a84691d0dd9cbf$var$Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $61a84691d0dd9cbf$var$Splitter() {
    this.cache = $61a84691d0dd9cbf$require$Buffer.allocUnsafe(0);
}
$61a84691d0dd9cbf$var$Splitter.prototype.add = function(data) {
    this.cache = $61a84691d0dd9cbf$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$61a84691d0dd9cbf$var$Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$61a84691d0dd9cbf$var$Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function $61a84691d0dd9cbf$var$unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error('unable to decrypt data');
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error('unable to decrypt data');
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function $61a84691d0dd9cbf$var$createDecipheriv(suite, password, iv) {
    var config = $kRniL[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof iv === 'string') iv = $61a84691d0dd9cbf$require$Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (typeof password === 'string') password = $61a84691d0dd9cbf$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (config.type === 'stream') return new $40pI3(config.module, password, iv, true);
    else if (config.type === 'auth') return new $81AZS(config.module, password, iv, true);
    return new $61a84691d0dd9cbf$var$Decipher(config.module, password, iv);
}
function $61a84691d0dd9cbf$var$createDecipher(suite, password) {
    var config = $kRniL[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = $pLjxr(password, false, config.key, config.iv);
    return $61a84691d0dd9cbf$var$createDecipheriv(suite, keys.key, keys.iv);
}
$61a84691d0dd9cbf$export$12ada9414fbc594c = $61a84691d0dd9cbf$var$createDecipher;
$61a84691d0dd9cbf$export$36b6d6ef312eab39 = $61a84691d0dd9cbf$var$createDecipheriv;

});


parcelRequire.register("1FTph", function(module, exports) {

$parcel$export(module.exports, "des-ecb", () => $13849966b2c0c329$export$116f8a5cee447347, (v) => $13849966b2c0c329$export$116f8a5cee447347 = v);
$parcel$export(module.exports, "des-cbc", () => $13849966b2c0c329$export$7483c4066bfb7ae9, (v) => $13849966b2c0c329$export$7483c4066bfb7ae9 = v);
$parcel$export(module.exports, "des", () => $13849966b2c0c329$export$e7a565d2e588bb06, (v) => $13849966b2c0c329$export$e7a565d2e588bb06 = v);
$parcel$export(module.exports, "des-ede3-cbc", () => $13849966b2c0c329$export$aaa2f54a426f3eb8, (v) => $13849966b2c0c329$export$aaa2f54a426f3eb8 = v);
$parcel$export(module.exports, "des3", () => $13849966b2c0c329$export$eba20568dde4ada, (v) => $13849966b2c0c329$export$eba20568dde4ada = v);
$parcel$export(module.exports, "des-ede3", () => $13849966b2c0c329$export$d3b5e5996938f5ae, (v) => $13849966b2c0c329$export$d3b5e5996938f5ae = v);
$parcel$export(module.exports, "des-ede-cbc", () => $13849966b2c0c329$export$57c08356130bc99b, (v) => $13849966b2c0c329$export$57c08356130bc99b = v);
$parcel$export(module.exports, "des-ede", () => $13849966b2c0c329$export$c7169791d5c1e65d, (v) => $13849966b2c0c329$export$c7169791d5c1e65d = v);
var $13849966b2c0c329$export$116f8a5cee447347;
var $13849966b2c0c329$export$7483c4066bfb7ae9;
var $13849966b2c0c329$export$e7a565d2e588bb06;
var $13849966b2c0c329$export$aaa2f54a426f3eb8;
var $13849966b2c0c329$export$eba20568dde4ada;
var $13849966b2c0c329$export$d3b5e5996938f5ae;
var $13849966b2c0c329$export$57c08356130bc99b;
var $13849966b2c0c329$export$c7169791d5c1e65d;
$13849966b2c0c329$export$116f8a5cee447347 = {
    key: 8,
    iv: 0
};
$13849966b2c0c329$export$7483c4066bfb7ae9 = $13849966b2c0c329$export$e7a565d2e588bb06 = {
    key: 8,
    iv: 8
};
$13849966b2c0c329$export$aaa2f54a426f3eb8 = $13849966b2c0c329$export$eba20568dde4ada = {
    key: 24,
    iv: 8
};
$13849966b2c0c329$export$d3b5e5996938f5ae = {
    key: 24,
    iv: 0
};
$13849966b2c0c329$export$57c08356130bc99b = {
    key: 16,
    iv: 8
};
$13849966b2c0c329$export$c7169791d5c1e65d = {
    key: 16,
    iv: 0
};

});


parcelRequire.register("aSoxx", function(module, exports) {

$parcel$export(module.exports, "DiffieHellmanGroup", () => $7eb1fbac0ec8c4c6$export$971862a2fcb1bb40, (v) => $7eb1fbac0ec8c4c6$export$971862a2fcb1bb40 = v);
$parcel$export(module.exports, "createDiffieHellmanGroup", () => $7eb1fbac0ec8c4c6$export$c6ff6a88acbeaf40, (v) => $7eb1fbac0ec8c4c6$export$c6ff6a88acbeaf40 = v);
$parcel$export(module.exports, "getDiffieHellman", () => $7eb1fbac0ec8c4c6$export$fdc27893e98845cc, (v) => $7eb1fbac0ec8c4c6$export$fdc27893e98845cc = v);
$parcel$export(module.exports, "createDiffieHellman", () => $7eb1fbac0ec8c4c6$export$6671fb9a1323bed, (v) => $7eb1fbac0ec8c4c6$export$6671fb9a1323bed = v);
$parcel$export(module.exports, "DiffieHellman", () => $7eb1fbac0ec8c4c6$export$d74daf141a551db, (v) => $7eb1fbac0ec8c4c6$export$d74daf141a551db = v);
var $7eb1fbac0ec8c4c6$export$971862a2fcb1bb40;
var $7eb1fbac0ec8c4c6$export$c6ff6a88acbeaf40;
var $7eb1fbac0ec8c4c6$export$fdc27893e98845cc;
var $7eb1fbac0ec8c4c6$export$6671fb9a1323bed;
var $7eb1fbac0ec8c4c6$export$d74daf141a551db;

var $fV0m8 = parcelRequire("fV0m8");
var $7eb1fbac0ec8c4c6$require$Buffer = $fV0m8.Buffer;

var $3LXI4 = parcelRequire("3LXI4");

var $fdrpt = parcelRequire("fdrpt");

var $9jWvX = parcelRequire("9jWvX");
function $7eb1fbac0ec8c4c6$var$getDiffieHellman(mod) {
    var prime = new $7eb1fbac0ec8c4c6$require$Buffer($fdrpt[mod].prime, 'hex');
    var gen = new $7eb1fbac0ec8c4c6$require$Buffer($fdrpt[mod].gen, 'hex');
    return new $9jWvX(prime, gen);
}
var $7eb1fbac0ec8c4c6$var$ENCODINGS = {
    'binary': true,
    'hex': true,
    'base64': true
};
function $7eb1fbac0ec8c4c6$var$createDiffieHellman(prime, enc, generator, genc) {
    if ($7eb1fbac0ec8c4c6$require$Buffer.isBuffer(enc) || $7eb1fbac0ec8c4c6$var$ENCODINGS[enc] === undefined) return $7eb1fbac0ec8c4c6$var$createDiffieHellman(prime, 'binary', enc, generator);
    enc = enc || 'binary';
    genc = genc || 'binary';
    generator = generator || new $7eb1fbac0ec8c4c6$require$Buffer([
        2
    ]);
    if (!$7eb1fbac0ec8c4c6$require$Buffer.isBuffer(generator)) generator = new $7eb1fbac0ec8c4c6$require$Buffer(generator, genc);
    if (typeof prime === 'number') return new $9jWvX($3LXI4(prime, generator), generator, true);
    if (!$7eb1fbac0ec8c4c6$require$Buffer.isBuffer(prime)) prime = new $7eb1fbac0ec8c4c6$require$Buffer(prime, enc);
    return new $9jWvX(prime, generator, true);
}
$7eb1fbac0ec8c4c6$export$971862a2fcb1bb40 = $7eb1fbac0ec8c4c6$export$c6ff6a88acbeaf40 = $7eb1fbac0ec8c4c6$export$fdc27893e98845cc = $7eb1fbac0ec8c4c6$var$getDiffieHellman;
$7eb1fbac0ec8c4c6$export$6671fb9a1323bed = $7eb1fbac0ec8c4c6$export$d74daf141a551db = $7eb1fbac0ec8c4c6$var$createDiffieHellman;

});
parcelRequire.register("3LXI4", function(module, exports) {

var $lv4cL = parcelRequire("lv4cL");
module.exports = $2bf414022ddf9d35$var$findPrime;
$2bf414022ddf9d35$var$findPrime.simpleSieve = $2bf414022ddf9d35$var$simpleSieve;
$2bf414022ddf9d35$var$findPrime.fermatTest = $2bf414022ddf9d35$var$fermatTest;

var $e7GsD = parcelRequire("e7GsD");
var $2bf414022ddf9d35$var$TWENTYFOUR = new $e7GsD(24);

var $W6m9k = parcelRequire("W6m9k");
var $2bf414022ddf9d35$var$millerRabin = new $W6m9k();
var $2bf414022ddf9d35$var$ONE = new $e7GsD(1);
var $2bf414022ddf9d35$var$TWO = new $e7GsD(2);
var $2bf414022ddf9d35$var$FIVE = new $e7GsD(5);
var $2bf414022ddf9d35$var$SIXTEEN = new $e7GsD(16);
var $2bf414022ddf9d35$var$EIGHT = new $e7GsD(8);
var $2bf414022ddf9d35$var$TEN = new $e7GsD(10);
var $2bf414022ddf9d35$var$THREE = new $e7GsD(3);
var $2bf414022ddf9d35$var$SEVEN = new $e7GsD(7);
var $2bf414022ddf9d35$var$ELEVEN = new $e7GsD(11);
var $2bf414022ddf9d35$var$FOUR = new $e7GsD(4);
var $2bf414022ddf9d35$var$TWELVE = new $e7GsD(12);
var $2bf414022ddf9d35$var$primes = null;
function $2bf414022ddf9d35$var$_getPrimes() {
    if ($2bf414022ddf9d35$var$primes !== null) return $2bf414022ddf9d35$var$primes;
    var limit = 1048576;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    $2bf414022ddf9d35$var$primes = res;
    return res;
}
function $2bf414022ddf9d35$var$simpleSieve(p) {
    var primes = $2bf414022ddf9d35$var$_getPrimes();
    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) return true;
        else return false;
    }
    return true;
}
function $2bf414022ddf9d35$var$fermatTest(p) {
    var red = $e7GsD.mont(p);
    return $2bf414022ddf9d35$var$TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function $2bf414022ddf9d35$var$findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new $e7GsD([
            140,
            123
        ]);
        else return new $e7GsD([
            140,
            39
        ]);
    }
    gen = new $e7GsD(gen);
    var num, n2;
    while(true){
        num = new $e7GsD($lv4cL(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd($2bf414022ddf9d35$var$ONE);
        if (!num.testn(1)) num.iadd($2bf414022ddf9d35$var$TWO);
        if (!gen.cmp($2bf414022ddf9d35$var$TWO)) while(num.mod($2bf414022ddf9d35$var$TWENTYFOUR).cmp($2bf414022ddf9d35$var$ELEVEN))num.iadd($2bf414022ddf9d35$var$FOUR);
        else if (!gen.cmp($2bf414022ddf9d35$var$FIVE)) while(num.mod($2bf414022ddf9d35$var$TEN).cmp($2bf414022ddf9d35$var$THREE))num.iadd($2bf414022ddf9d35$var$FOUR);
        n2 = num.shrn(1);
        if ($2bf414022ddf9d35$var$simpleSieve(n2) && $2bf414022ddf9d35$var$simpleSieve(num) && $2bf414022ddf9d35$var$fermatTest(n2) && $2bf414022ddf9d35$var$fermatTest(num) && $2bf414022ddf9d35$var$millerRabin.test(n2) && $2bf414022ddf9d35$var$millerRabin.test(num)) return num;
    }
}

});
parcelRequire.register("e7GsD", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("cacXd")).Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})("object" === 'undefined' || module, this);

});

parcelRequire.register("W6m9k", function(module, exports) {

var $e7GsD = parcelRequire("e7GsD");

var $drx5y = parcelRequire("drx5y");
function $0aea591d0dcecda4$var$MillerRabin(rand) {
    this.rand = rand || new $drx5y.Rand();
}
module.exports = $0aea591d0dcecda4$var$MillerRabin;
$0aea591d0dcecda4$var$MillerRabin.create = function create(rand) {
    return new $0aea591d0dcecda4$var$MillerRabin(rand);
};
$0aea591d0dcecda4$var$MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new $e7GsD(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0)
    return a;
};
$0aea591d0dcecda4$var$MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
$0aea591d0dcecda4$var$MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = $e7GsD.mont(n);
    var rone = new $e7GsD(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new $e7GsD(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
$0aea591d0dcecda4$var$MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = $e7GsD.mont(n);
    var rone = new $e7GsD(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new $e7GsD(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

});
parcelRequire.register("drx5y", function(module, exports) {
var $9c9776b547747c89$var$r;
module.exports = function rand(len) {
    if (!$9c9776b547747c89$var$r) $9c9776b547747c89$var$r = new $9c9776b547747c89$var$Rand(null);
    return $9c9776b547747c89$var$r.generate(len);
};
function $9c9776b547747c89$var$Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = $9c9776b547747c89$var$Rand;
$9c9776b547747c89$var$Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
$9c9776b547747c89$var$Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};

if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    $9c9776b547747c89$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    $9c9776b547747c89$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === 'object') // Old junk
    $9c9776b547747c89$var$Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
    };
} else // Node.js or Web worker with no crypto support
try {
    var $9c9776b547747c89$var$crypto = (parcelRequire("cacXd"));
    if (typeof $9c9776b547747c89$var$crypto.randomBytes !== 'function') throw new Error('Not supported');
    $9c9776b547747c89$var$Rand.prototype._rand = function _rand(n) {
        return $9c9776b547747c89$var$crypto.randomBytes(n);
    };
} catch (e) {
}

});



parcelRequire.register("fdrpt", function(module, exports) {
module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

});

parcelRequire.register("9jWvX", function(module, exports) {

var $fV0m8 = parcelRequire("fV0m8");
var $6c93472276e49d4f$require$Buffer = $fV0m8.Buffer;

var $e7GsD = parcelRequire("e7GsD");

var $W6m9k = parcelRequire("W6m9k");
var $6c93472276e49d4f$var$millerRabin = new $W6m9k();
var $6c93472276e49d4f$var$TWENTYFOUR = new $e7GsD(24);
var $6c93472276e49d4f$var$ELEVEN = new $e7GsD(11);
var $6c93472276e49d4f$var$TEN = new $e7GsD(10);
var $6c93472276e49d4f$var$THREE = new $e7GsD(3);
var $6c93472276e49d4f$var$SEVEN = new $e7GsD(7);

var $3LXI4 = parcelRequire("3LXI4");

var $lv4cL = parcelRequire("lv4cL");
module.exports = $6c93472276e49d4f$var$DH;
function $6c93472276e49d4f$var$setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!$6c93472276e49d4f$require$Buffer.isBuffer(pub)) pub = new $6c93472276e49d4f$require$Buffer(pub, enc);
    this._pub = new $e7GsD(pub);
    return this;
}
function $6c93472276e49d4f$var$setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!$6c93472276e49d4f$require$Buffer.isBuffer(priv)) priv = new $6c93472276e49d4f$require$Buffer(priv, enc);
    this._priv = new $e7GsD(priv);
    return this;
}
var $6c93472276e49d4f$var$primeCache = {
};
function $6c93472276e49d4f$var$checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [
        gen,
        prime.toString(16)
    ].join('_');
    if (hex in $6c93472276e49d4f$var$primeCache) return $6c93472276e49d4f$var$primeCache[hex];
    var error = 0;
    if (prime.isEven() || !$3LXI4.simpleSieve || !$3LXI4.fermatTest(prime) || !$6c93472276e49d4f$var$millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === '02' || gen === '05') // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        $6c93472276e49d4f$var$primeCache[hex] = error;
        return error;
    }
    if (!$6c93472276e49d4f$var$millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case '02':
            if (prime.mod($6c93472276e49d4f$var$TWENTYFOUR).cmp($6c93472276e49d4f$var$ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case '05':
            rem = prime.mod($6c93472276e49d4f$var$TEN);
            if (rem.cmp($6c93472276e49d4f$var$THREE) && rem.cmp($6c93472276e49d4f$var$SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    $6c93472276e49d4f$var$primeCache[hex] = error;
    return error;
}
function $6c93472276e49d4f$var$DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new $e7GsD(prime);
    this._prime = $e7GsD.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = $6c93472276e49d4f$var$setPublicKey;
        this.setPrivateKey = $6c93472276e49d4f$var$setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty($6c93472276e49d4f$var$DH.prototype, 'verifyError', {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== 'number') this._primeCode = $6c93472276e49d4f$var$checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
$6c93472276e49d4f$var$DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new $e7GsD($lv4cL(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
$6c93472276e49d4f$var$DH.prototype.computeSecret = function(other) {
    other = new $e7GsD(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new $6c93472276e49d4f$require$Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new $6c93472276e49d4f$require$Buffer(prime.length - out.length);
        front.fill(0);
        out = $6c93472276e49d4f$require$Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
$6c93472276e49d4f$var$DH.prototype.getPublicKey = function getPublicKey(enc) {
    return $6c93472276e49d4f$var$formatReturnValue(this._pub, enc);
};
$6c93472276e49d4f$var$DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return $6c93472276e49d4f$var$formatReturnValue(this._priv, enc);
};
$6c93472276e49d4f$var$DH.prototype.getPrime = function(enc) {
    return $6c93472276e49d4f$var$formatReturnValue(this.__prime, enc);
};
$6c93472276e49d4f$var$DH.prototype.getGenerator = function(enc) {
    return $6c93472276e49d4f$var$formatReturnValue(this._gen, enc);
};
$6c93472276e49d4f$var$DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || 'utf8';
    if (!$6c93472276e49d4f$require$Buffer.isBuffer(gen)) gen = new $6c93472276e49d4f$require$Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new $e7GsD(gen);
    return this;
};
function $6c93472276e49d4f$var$formatReturnValue(bn, enc) {
    var buf = new $6c93472276e49d4f$require$Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

});


parcelRequire.register("kd2RE", function(module, exports) {

var $ahmAR = parcelRequire("ahmAR");
var $eb673e5a29f566fe$require$Buffer = $ahmAR.Buffer;

var $2vuiV = parcelRequire("2vuiV");

var $5JgO1 = parcelRequire("5JgO1");

var $cvM26 = parcelRequire("cvM26");

var $bdGO8 = parcelRequire("bdGO8");

var $7T4lG = parcelRequire("7T4lG");

var $8O42a = parcelRequire("8O42a");
Object.keys($8O42a).forEach(function(key) {
    $8O42a[key].id = $eb673e5a29f566fe$require$Buffer.from($8O42a[key].id, 'hex');
    $8O42a[key.toLowerCase()] = $8O42a[key];
});
function $eb673e5a29f566fe$var$Sign(algorithm) {
    $5JgO1.Writable.call(this);
    var data = $8O42a[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hashType = data.hash;
    this._hash = $2vuiV(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$cvM26($eb673e5a29f566fe$var$Sign, $5JgO1.Writable);
$eb673e5a29f566fe$var$Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$eb673e5a29f566fe$var$Sign.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = $eb673e5a29f566fe$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$eb673e5a29f566fe$var$Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = $bdGO8(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function $eb673e5a29f566fe$var$Verify(algorithm) {
    $5JgO1.Writable.call(this);
    var data = $8O42a[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hash = $2vuiV(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$cvM26($eb673e5a29f566fe$var$Verify, $5JgO1.Writable);
$eb673e5a29f566fe$var$Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$eb673e5a29f566fe$var$Verify.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = $eb673e5a29f566fe$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$eb673e5a29f566fe$var$Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === 'string') sig = $eb673e5a29f566fe$require$Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return $7T4lG(sig, hash, key, this._signType, this._tag);
};
function $eb673e5a29f566fe$var$createSign(algorithm) {
    return new $eb673e5a29f566fe$var$Sign(algorithm);
}
function $eb673e5a29f566fe$var$createVerify(algorithm) {
    return new $eb673e5a29f566fe$var$Verify(algorithm);
}
module.exports = {
    Sign: $eb673e5a29f566fe$var$createSign,
    Verify: $eb673e5a29f566fe$var$createVerify,
    createSign: $eb673e5a29f566fe$var$createSign,
    createVerify: $eb673e5a29f566fe$var$createVerify
};

});
parcelRequire.register("5JgO1", function(module, exports) {

exports = module.exports = (parcelRequire("B3By2"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("6CDiY"));

exports.Duplex = (parcelRequire("fIqup"));

exports.Transform = (parcelRequire("9YUhl"));

exports.PassThrough = (parcelRequire("7Fs3h"));

exports.finished = (parcelRequire("cfCFe"));

exports.pipeline = (parcelRequire("h24bu"));

});
parcelRequire.register("B3By2", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
module.exports = $06f6409dff83cf68$var$Readable;
/*<replacement>*/ var $06f6409dff83cf68$var$Duplex;
/*</replacement>*/ $06f6409dff83cf68$var$Readable.ReadableState = $06f6409dff83cf68$var$ReadableState;

var $is9nt = parcelRequire("is9nt");
var $06f6409dff83cf68$require$EE = $is9nt.EventEmitter;
var $06f6409dff83cf68$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $61zSX = parcelRequire("61zSX");

var $fV0m8 = parcelRequire("fV0m8");
var $06f6409dff83cf68$require$Buffer = $fV0m8.Buffer;
var $06f6409dff83cf68$var$OurUint8Array = $parcel$global.Uint8Array || function() {
};
function $06f6409dff83cf68$var$_uint8ArrayToBuffer(chunk) {
    return $06f6409dff83cf68$require$Buffer.from(chunk);
}
function $06f6409dff83cf68$var$_isUint8Array(obj) {
    return $06f6409dff83cf68$require$Buffer.isBuffer(obj) || obj instanceof $06f6409dff83cf68$var$OurUint8Array;
}

var $cacXd = parcelRequire("cacXd");
var $06f6409dff83cf68$var$debug;
if ($cacXd && $cacXd.debuglog) $06f6409dff83cf68$var$debug = $cacXd.debuglog('stream');
else $06f6409dff83cf68$var$debug = function debug() {
};

var $6uwFz = parcelRequire("6uwFz");

var $51lmU = parcelRequire("51lmU");

var $baUzB = parcelRequire("baUzB");
var $06f6409dff83cf68$var$getHighWaterMark = $baUzB.getHighWaterMark;

var $fTD3R = parcelRequire("fTD3R");
var $06f6409dff83cf68$require$_require$codes = $fTD3R.codes;
var $06f6409dff83cf68$var$ERR_INVALID_ARG_TYPE = $06f6409dff83cf68$require$_require$codes.ERR_INVALID_ARG_TYPE, $06f6409dff83cf68$var$ERR_STREAM_PUSH_AFTER_EOF = $06f6409dff83cf68$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $06f6409dff83cf68$var$ERR_METHOD_NOT_IMPLEMENTED = $06f6409dff83cf68$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $06f6409dff83cf68$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $06f6409dff83cf68$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var $06f6409dff83cf68$var$StringDecoder;
var $06f6409dff83cf68$var$createReadableStreamAsyncIterator;
var $06f6409dff83cf68$var$from;

(parcelRequire("cvM26"))($06f6409dff83cf68$var$Readable, $61zSX);
var $06f6409dff83cf68$var$errorOrDestroy = $51lmU.errorOrDestroy;
var $06f6409dff83cf68$var$kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function $06f6409dff83cf68$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $06f6409dff83cf68$var$ReadableState(options, stream, isDuplex) {
    $06f6409dff83cf68$var$Duplex = $06f6409dff83cf68$var$Duplex || (parcelRequire("fIqup"));
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $06f6409dff83cf68$var$Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $06f6409dff83cf68$var$getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $6uwFz();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$06f6409dff83cf68$var$StringDecoder) $06f6409dff83cf68$var$StringDecoder = (parcelRequire("cZauc")).StringDecoder;
        this.decoder = new $06f6409dff83cf68$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $06f6409dff83cf68$var$Readable(options) {
    $06f6409dff83cf68$var$Duplex = $06f6409dff83cf68$var$Duplex || (parcelRequire("fIqup"));
    if (!(this instanceof $06f6409dff83cf68$var$Readable)) return new $06f6409dff83cf68$var$Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $06f6409dff83cf68$var$Duplex;
    this._readableState = new $06f6409dff83cf68$var$ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    $61zSX.call(this);
}
Object.defineProperty($06f6409dff83cf68$var$Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$06f6409dff83cf68$var$Readable.prototype.destroy = $51lmU.destroy;
$06f6409dff83cf68$var$Readable.prototype._undestroy = $51lmU.undestroy;
$06f6409dff83cf68$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$06f6409dff83cf68$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $06f6409dff83cf68$require$Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $06f6409dff83cf68$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
$06f6409dff83cf68$var$Readable.prototype.unshift = function(chunk) {
    return $06f6409dff83cf68$var$readableAddChunk(this, chunk, null, true, false);
};
function $06f6409dff83cf68$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $06f6409dff83cf68$var$debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $06f6409dff83cf68$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $06f6409dff83cf68$var$chunkInvalid(state, chunk);
        if (er) $06f6409dff83cf68$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== $06f6409dff83cf68$require$Buffer.prototype) chunk = $06f6409dff83cf68$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $06f6409dff83cf68$var$errorOrDestroy(stream, new $06f6409dff83cf68$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $06f6409dff83cf68$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $06f6409dff83cf68$var$errorOrDestroy(stream, new $06f6409dff83cf68$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $06f6409dff83cf68$var$addChunk(stream, state, chunk, false);
                    else $06f6409dff83cf68$var$maybeReadMore(stream, state);
                } else $06f6409dff83cf68$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $06f6409dff83cf68$var$maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $06f6409dff83cf68$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $06f6409dff83cf68$var$emitReadable(stream);
    }
    $06f6409dff83cf68$var$maybeReadMore(stream, state);
}
function $06f6409dff83cf68$var$chunkInvalid(state, chunk) {
    var er;
    if (!$06f6409dff83cf68$var$_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new $06f6409dff83cf68$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
$06f6409dff83cf68$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.

$06f6409dff83cf68$var$Readable.prototype.setEncoding = function(enc) {
    if (!$06f6409dff83cf68$var$StringDecoder) $06f6409dff83cf68$var$StringDecoder = (parcelRequire("cZauc")).StringDecoder;
    var decoder = new $06f6409dff83cf68$var$StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var $06f6409dff83cf68$var$MAX_HWM = 1073741824;
function $06f6409dff83cf68$var$computeNewHighWaterMark(n) {
    if (n >= $06f6409dff83cf68$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $06f6409dff83cf68$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $06f6409dff83cf68$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $06f6409dff83cf68$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
$06f6409dff83cf68$var$Readable.prototype.read = function(n) {
    $06f6409dff83cf68$var$debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $06f6409dff83cf68$var$debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) $06f6409dff83cf68$var$endReadable(this);
        else $06f6409dff83cf68$var$emitReadable(this);
        return null;
    }
    n = $06f6409dff83cf68$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $06f6409dff83cf68$var$endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $06f6409dff83cf68$var$debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $06f6409dff83cf68$var$debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $06f6409dff83cf68$var$debug('reading or ended', doRead);
    } else if (doRead) {
        $06f6409dff83cf68$var$debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $06f6409dff83cf68$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $06f6409dff83cf68$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $06f6409dff83cf68$var$endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function $06f6409dff83cf68$var$onEofChunk(stream, state) {
    $06f6409dff83cf68$var$debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $06f6409dff83cf68$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $06f6409dff83cf68$var$emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $06f6409dff83cf68$var$emitReadable(stream) {
    var state = stream._readableState;
    $06f6409dff83cf68$var$debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $06f6409dff83cf68$var$debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        $7pjJT.nextTick($06f6409dff83cf68$var$emitReadable_, stream);
    }
}
function $06f6409dff83cf68$var$emitReadable_(stream) {
    var state = stream._readableState;
    $06f6409dff83cf68$var$debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $06f6409dff83cf68$var$flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $06f6409dff83cf68$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $7pjJT.nextTick($06f6409dff83cf68$var$maybeReadMore_, stream, state);
    }
}
function $06f6409dff83cf68$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $06f6409dff83cf68$var$debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$06f6409dff83cf68$var$Readable.prototype._read = function(n) {
    $06f6409dff83cf68$var$errorOrDestroy(this, new $06f6409dff83cf68$var$ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
$06f6409dff83cf68$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $06f6409dff83cf68$var$debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $7pjJT.stdout && dest !== $7pjJT.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $7pjJT.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $06f6409dff83cf68$var$debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $06f6409dff83cf68$var$debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $06f6409dff83cf68$var$pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        $06f6409dff83cf68$var$debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        $06f6409dff83cf68$var$debug('ondata');
        var ret = dest.write(chunk);
        $06f6409dff83cf68$var$debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $06f6409dff83cf68$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $06f6409dff83cf68$var$debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $06f6409dff83cf68$var$debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if ($06f6409dff83cf68$var$EElistenerCount(dest, 'error') === 0) $06f6409dff83cf68$var$errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    $06f6409dff83cf68$var$prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        $06f6409dff83cf68$var$debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        $06f6409dff83cf68$var$debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $06f6409dff83cf68$var$debug('pipe resume');
        src.resume();
    }
    return dest;
};
function $06f6409dff83cf68$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $06f6409dff83cf68$var$debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $06f6409dff83cf68$var$EElistenerCount(src, 'data')) {
            state.flowing = true;
            $06f6409dff83cf68$var$flow(src);
        }
    };
}
$06f6409dff83cf68$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = $06f6409dff83cf68$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
$06f6409dff83cf68$var$Readable.prototype.on = function(ev, fn) {
    var res = $61zSX.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $06f6409dff83cf68$var$debug('on readable', state.length, state.reading);
            if (state.length) $06f6409dff83cf68$var$emitReadable(this);
            else if (!state.reading) $7pjJT.nextTick($06f6409dff83cf68$var$nReadingNextTick, this);
        }
    }
    return res;
};
$06f6409dff83cf68$var$Readable.prototype.addListener = $06f6409dff83cf68$var$Readable.prototype.on;
$06f6409dff83cf68$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $61zSX.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $7pjJT.nextTick($06f6409dff83cf68$var$updateReadableListening, this);
    return res;
};
$06f6409dff83cf68$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $61zSX.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $7pjJT.nextTick($06f6409dff83cf68$var$updateReadableListening, this);
    return res;
};
function $06f6409dff83cf68$var$updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function $06f6409dff83cf68$var$nReadingNextTick(self) {
    $06f6409dff83cf68$var$debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$06f6409dff83cf68$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $06f6409dff83cf68$var$debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $06f6409dff83cf68$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $06f6409dff83cf68$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $7pjJT.nextTick($06f6409dff83cf68$var$resume_, stream, state);
    }
}
function $06f6409dff83cf68$var$resume_(stream, state) {
    $06f6409dff83cf68$var$debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    $06f6409dff83cf68$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$06f6409dff83cf68$var$Readable.prototype.pause = function() {
    $06f6409dff83cf68$var$debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $06f6409dff83cf68$var$debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function $06f6409dff83cf68$var$flow(stream) {
    var state = stream._readableState;
    $06f6409dff83cf68$var$debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$06f6409dff83cf68$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        $06f6409dff83cf68$var$debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        $06f6409dff83cf68$var$debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < $06f6409dff83cf68$var$kProxyEvents.length; n1++)stream.on($06f6409dff83cf68$var$kProxyEvents[n1], this.emit.bind(this, $06f6409dff83cf68$var$kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $06f6409dff83cf68$var$debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === 'function') $06f6409dff83cf68$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($06f6409dff83cf68$var$createReadableStreamAsyncIterator === undefined) $06f6409dff83cf68$var$createReadableStreamAsyncIterator = (parcelRequire("86eZD"));
    return $06f6409dff83cf68$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($06f6409dff83cf68$var$Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($06f6409dff83cf68$var$Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($06f6409dff83cf68$var$Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
$06f6409dff83cf68$var$Readable._fromList = $06f6409dff83cf68$var$fromList;
Object.defineProperty($06f6409dff83cf68$var$Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $06f6409dff83cf68$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $06f6409dff83cf68$var$endReadable(stream) {
    var state = stream._readableState;
    $06f6409dff83cf68$var$debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $7pjJT.nextTick($06f6409dff83cf68$var$endReadableNT, state, stream);
    }
}
function $06f6409dff83cf68$var$endReadableNT(state, stream) {
    $06f6409dff83cf68$var$debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === 'function') $06f6409dff83cf68$var$Readable.from = function(iterable, opts) {
    if ($06f6409dff83cf68$var$from === undefined) $06f6409dff83cf68$var$from = (parcelRequire("2s4Zj"));
    return $06f6409dff83cf68$var$from($06f6409dff83cf68$var$Readable, iterable, opts);
};
function $06f6409dff83cf68$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("61zSX", function(module, exports) {

module.exports = (parcelRequire("is9nt")).EventEmitter;

});

parcelRequire.register("6uwFz", function(module, exports) {
'use strict';
function $4b9ee2e2676d289b$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $4b9ee2e2676d289b$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) $4b9ee2e2676d289b$var$ownKeys(Object(source), true).forEach(function(key) {
            $4b9ee2e2676d289b$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $4b9ee2e2676d289b$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $4b9ee2e2676d289b$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $4b9ee2e2676d289b$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $4b9ee2e2676d289b$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $4b9ee2e2676d289b$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $4b9ee2e2676d289b$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $4b9ee2e2676d289b$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

var $fV0m8 = parcelRequire("fV0m8");
var $4b9ee2e2676d289b$var$Buffer = $fV0m8.Buffer;

var $cacXd = parcelRequire("cacXd");
var $4b9ee2e2676d289b$var$inspect = $cacXd.inspect;
var $4b9ee2e2676d289b$var$custom = $4b9ee2e2676d289b$var$inspect && $4b9ee2e2676d289b$var$inspect.custom || 'inspect';
function $4b9ee2e2676d289b$var$copyBuffer(src, target, offset) {
    $4b9ee2e2676d289b$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        $4b9ee2e2676d289b$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $4b9ee2e2676d289b$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $4b9ee2e2676d289b$var$Buffer.alloc(0);
                var ret = $4b9ee2e2676d289b$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $4b9ee2e2676d289b$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $4b9ee2e2676d289b$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: $4b9ee2e2676d289b$var$custom,
            value: function value(_, options) {
                return $4b9ee2e2676d289b$var$inspect(this, $4b9ee2e2676d289b$var$_objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

});

parcelRequire.register("51lmU", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
'use strict'; // undocumented cb() API, needed for core, not for public API
function $3a7d9f1940ea187e$var$destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) $7pjJT.nextTick($3a7d9f1940ea187e$var$emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $7pjJT.nextTick($3a7d9f1940ea187e$var$emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $7pjJT.nextTick($3a7d9f1940ea187e$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $7pjJT.nextTick($3a7d9f1940ea187e$var$emitErrorAndCloseNT, _this, err);
            } else $7pjJT.nextTick($3a7d9f1940ea187e$var$emitCloseNT, _this);
        } else if (cb) {
            $7pjJT.nextTick($3a7d9f1940ea187e$var$emitCloseNT, _this);
            cb(err);
        } else $7pjJT.nextTick($3a7d9f1940ea187e$var$emitCloseNT, _this);
    });
    return this;
}
function $3a7d9f1940ea187e$var$emitErrorAndCloseNT(self, err) {
    $3a7d9f1940ea187e$var$emitErrorNT(self, err);
    $3a7d9f1940ea187e$var$emitCloseNT(self);
}
function $3a7d9f1940ea187e$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function $3a7d9f1940ea187e$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $3a7d9f1940ea187e$var$emitErrorNT(self, err) {
    self.emit('error', err);
}
function $3a7d9f1940ea187e$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: $3a7d9f1940ea187e$var$destroy,
    undestroy: $3a7d9f1940ea187e$var$undestroy,
    errorOrDestroy: $3a7d9f1940ea187e$var$errorOrDestroy
};

});

parcelRequire.register("baUzB", function(module, exports) {
'use strict';

var $fTD3R = parcelRequire("fTD3R");
var $822c832459858c47$var$ERR_INVALID_OPT_VALUE = $fTD3R.codes.ERR_INVALID_OPT_VALUE;
function $822c832459858c47$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $822c832459858c47$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $822c832459858c47$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new $822c832459858c47$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $822c832459858c47$var$getHighWaterMark
};

});
parcelRequire.register("fTD3R", function(module, exports) {

$parcel$export(module.exports, "codes", () => $b92a4ad09124ea62$export$e45cb6485273080e, (v) => $b92a4ad09124ea62$export$e45cb6485273080e = v);
var $b92a4ad09124ea62$export$e45cb6485273080e;
'use strict';
function $b92a4ad09124ea62$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $b92a4ad09124ea62$var$codes = {
};
function $b92a4ad09124ea62$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        $b92a4ad09124ea62$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    $b92a4ad09124ea62$var$codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $b92a4ad09124ea62$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $b92a4ad09124ea62$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $b92a4ad09124ea62$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $b92a4ad09124ea62$var$includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$b92a4ad09124ea62$var$createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$b92a4ad09124ea62$var$createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && $b92a4ad09124ea62$var$startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if ($b92a4ad09124ea62$var$endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($b92a4ad09124ea62$var$oneOf(expected, 'type'));
    else {
        var type = $b92a4ad09124ea62$var$includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat($b92a4ad09124ea62$var$oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$b92a4ad09124ea62$var$createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
$b92a4ad09124ea62$var$createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
$b92a4ad09124ea62$var$createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
$b92a4ad09124ea62$var$createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
$b92a4ad09124ea62$var$createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
$b92a4ad09124ea62$var$createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
$b92a4ad09124ea62$var$createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
$b92a4ad09124ea62$var$createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
$b92a4ad09124ea62$var$createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
$b92a4ad09124ea62$var$createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
$b92a4ad09124ea62$export$e45cb6485273080e = $b92a4ad09124ea62$var$codes;

});


parcelRequire.register("fIqup", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/ var $b70f835a401af8b5$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $b70f835a401af8b5$var$Duplex;

var $B3By2 = parcelRequire("B3By2");

var $6CDiY = parcelRequire("6CDiY");

(parcelRequire("cvM26"))($b70f835a401af8b5$var$Duplex, $B3By2);
// Allow the keys array to be GC'ed.
var $b70f835a401af8b5$var$keys = $b70f835a401af8b5$var$objectKeys($6CDiY.prototype);
for(var $b70f835a401af8b5$var$v = 0; $b70f835a401af8b5$var$v < $b70f835a401af8b5$var$keys.length; $b70f835a401af8b5$var$v++){
    var $b70f835a401af8b5$var$method = $b70f835a401af8b5$var$keys[$b70f835a401af8b5$var$v];
    if (!$b70f835a401af8b5$var$Duplex.prototype[$b70f835a401af8b5$var$method]) $b70f835a401af8b5$var$Duplex.prototype[$b70f835a401af8b5$var$method] = $6CDiY.prototype[$b70f835a401af8b5$var$method];
}
function $b70f835a401af8b5$var$Duplex(options) {
    if (!(this instanceof $b70f835a401af8b5$var$Duplex)) return new $b70f835a401af8b5$var$Duplex(options);
    $B3By2.call(this, options);
    $6CDiY.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', $b70f835a401af8b5$var$onend);
        }
    }
}
Object.defineProperty($b70f835a401af8b5$var$Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($b70f835a401af8b5$var$Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($b70f835a401af8b5$var$Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function $b70f835a401af8b5$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    $7pjJT.nextTick($b70f835a401af8b5$var$onEndNT, this);
}
function $b70f835a401af8b5$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($b70f835a401af8b5$var$Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("6CDiY", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
module.exports = $4d24c7d9b8bfa99a$var$Writable;
/* <replacement> */ function $4d24c7d9b8bfa99a$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $4d24c7d9b8bfa99a$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $4d24c7d9b8bfa99a$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $4d24c7d9b8bfa99a$var$Duplex;
/*</replacement>*/ $4d24c7d9b8bfa99a$var$Writable.WritableState = $4d24c7d9b8bfa99a$var$WritableState;

/*<replacement>*/ var $4d24c7d9b8bfa99a$var$internalUtil = {
    deprecate: (parcelRequire("ecXVU"))
};

var $61zSX = parcelRequire("61zSX");

var $fV0m8 = parcelRequire("fV0m8");
var $4d24c7d9b8bfa99a$require$Buffer = $fV0m8.Buffer;
var $4d24c7d9b8bfa99a$var$OurUint8Array = $parcel$global.Uint8Array || function() {
};
function $4d24c7d9b8bfa99a$var$_uint8ArrayToBuffer(chunk) {
    return $4d24c7d9b8bfa99a$require$Buffer.from(chunk);
}
function $4d24c7d9b8bfa99a$var$_isUint8Array(obj) {
    return $4d24c7d9b8bfa99a$require$Buffer.isBuffer(obj) || obj instanceof $4d24c7d9b8bfa99a$var$OurUint8Array;
}

var $51lmU = parcelRequire("51lmU");

var $baUzB = parcelRequire("baUzB");
var $4d24c7d9b8bfa99a$var$getHighWaterMark = $baUzB.getHighWaterMark;

var $fTD3R = parcelRequire("fTD3R");
var $4d24c7d9b8bfa99a$require$_require$codes = $fTD3R.codes;
var $4d24c7d9b8bfa99a$var$ERR_INVALID_ARG_TYPE = $4d24c7d9b8bfa99a$require$_require$codes.ERR_INVALID_ARG_TYPE, $4d24c7d9b8bfa99a$var$ERR_METHOD_NOT_IMPLEMENTED = $4d24c7d9b8bfa99a$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $4d24c7d9b8bfa99a$var$ERR_MULTIPLE_CALLBACK = $4d24c7d9b8bfa99a$require$_require$codes.ERR_MULTIPLE_CALLBACK, $4d24c7d9b8bfa99a$var$ERR_STREAM_CANNOT_PIPE = $4d24c7d9b8bfa99a$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $4d24c7d9b8bfa99a$var$ERR_STREAM_DESTROYED = $4d24c7d9b8bfa99a$require$_require$codes.ERR_STREAM_DESTROYED, $4d24c7d9b8bfa99a$var$ERR_STREAM_NULL_VALUES = $4d24c7d9b8bfa99a$require$_require$codes.ERR_STREAM_NULL_VALUES, $4d24c7d9b8bfa99a$var$ERR_STREAM_WRITE_AFTER_END = $4d24c7d9b8bfa99a$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $4d24c7d9b8bfa99a$var$ERR_UNKNOWN_ENCODING = $4d24c7d9b8bfa99a$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $4d24c7d9b8bfa99a$var$errorOrDestroy = $51lmU.errorOrDestroy;

(parcelRequire("cvM26"))($4d24c7d9b8bfa99a$var$Writable, $61zSX);
function $4d24c7d9b8bfa99a$var$nop() {
}

function $4d24c7d9b8bfa99a$var$WritableState(options, stream, isDuplex) {
    $4d24c7d9b8bfa99a$var$Duplex = $4d24c7d9b8bfa99a$var$Duplex || (parcelRequire("fIqup"));
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $4d24c7d9b8bfa99a$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $4d24c7d9b8bfa99a$var$getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $4d24c7d9b8bfa99a$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $4d24c7d9b8bfa99a$var$CorkedRequest(this);
}
$4d24c7d9b8bfa99a$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($4d24c7d9b8bfa99a$var$WritableState.prototype, 'buffer', {
            get: $4d24c7d9b8bfa99a$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $4d24c7d9b8bfa99a$var$realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    $4d24c7d9b8bfa99a$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($4d24c7d9b8bfa99a$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($4d24c7d9b8bfa99a$var$realHasInstance.call(this, object)) return true;
            if (this !== $4d24c7d9b8bfa99a$var$Writable) return false;
            return object && object._writableState instanceof $4d24c7d9b8bfa99a$var$WritableState;
        }
    });
} else $4d24c7d9b8bfa99a$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $4d24c7d9b8bfa99a$var$Writable(options) {
    $4d24c7d9b8bfa99a$var$Duplex = $4d24c7d9b8bfa99a$var$Duplex || (parcelRequire("fIqup")); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $4d24c7d9b8bfa99a$var$Duplex;
    if (!isDuplex && !$4d24c7d9b8bfa99a$var$realHasInstance.call($4d24c7d9b8bfa99a$var$Writable, this)) return new $4d24c7d9b8bfa99a$var$Writable(options);
    this._writableState = new $4d24c7d9b8bfa99a$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    $61zSX.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$4d24c7d9b8bfa99a$var$Writable.prototype.pipe = function() {
    $4d24c7d9b8bfa99a$var$errorOrDestroy(this, new $4d24c7d9b8bfa99a$var$ERR_STREAM_CANNOT_PIPE());
};
function $4d24c7d9b8bfa99a$var$writeAfterEnd(stream, cb) {
    var er = new $4d24c7d9b8bfa99a$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $4d24c7d9b8bfa99a$var$errorOrDestroy(stream, er);
    $7pjJT.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $4d24c7d9b8bfa99a$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $4d24c7d9b8bfa99a$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new $4d24c7d9b8bfa99a$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        $4d24c7d9b8bfa99a$var$errorOrDestroy(stream, er);
        $7pjJT.nextTick(cb, er);
        return false;
    }
    return true;
}
$4d24c7d9b8bfa99a$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $4d24c7d9b8bfa99a$var$_isUint8Array(chunk);
    if (isBuf && !$4d24c7d9b8bfa99a$require$Buffer.isBuffer(chunk)) chunk = $4d24c7d9b8bfa99a$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = $4d24c7d9b8bfa99a$var$nop;
    if (state.ending) $4d24c7d9b8bfa99a$var$writeAfterEnd(this, cb);
    else if (isBuf || $4d24c7d9b8bfa99a$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $4d24c7d9b8bfa99a$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$4d24c7d9b8bfa99a$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$4d24c7d9b8bfa99a$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $4d24c7d9b8bfa99a$var$clearBuffer(this, state);
    }
};
$4d24c7d9b8bfa99a$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new $4d24c7d9b8bfa99a$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($4d24c7d9b8bfa99a$var$Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $4d24c7d9b8bfa99a$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = $4d24c7d9b8bfa99a$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($4d24c7d9b8bfa99a$var$Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $4d24c7d9b8bfa99a$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $4d24c7d9b8bfa99a$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $4d24c7d9b8bfa99a$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $4d24c7d9b8bfa99a$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $4d24c7d9b8bfa99a$var$ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $4d24c7d9b8bfa99a$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $7pjJT.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        $7pjJT.nextTick($4d24c7d9b8bfa99a$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $4d24c7d9b8bfa99a$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $4d24c7d9b8bfa99a$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $4d24c7d9b8bfa99a$var$finishMaybe(stream, state);
    }
}
function $4d24c7d9b8bfa99a$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $4d24c7d9b8bfa99a$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new $4d24c7d9b8bfa99a$var$ERR_MULTIPLE_CALLBACK();
    $4d24c7d9b8bfa99a$var$onwriteStateUpdate(state);
    if (er) $4d24c7d9b8bfa99a$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $4d24c7d9b8bfa99a$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $4d24c7d9b8bfa99a$var$clearBuffer(stream, state);
        if (sync) $7pjJT.nextTick($4d24c7d9b8bfa99a$var$afterWrite, stream, state, finished, cb);
        else $4d24c7d9b8bfa99a$var$afterWrite(stream, state, finished, cb);
    }
}
function $4d24c7d9b8bfa99a$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $4d24c7d9b8bfa99a$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $4d24c7d9b8bfa99a$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $4d24c7d9b8bfa99a$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function $4d24c7d9b8bfa99a$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $4d24c7d9b8bfa99a$var$doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $4d24c7d9b8bfa99a$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $4d24c7d9b8bfa99a$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$4d24c7d9b8bfa99a$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $4d24c7d9b8bfa99a$var$ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
$4d24c7d9b8bfa99a$var$Writable.prototype._writev = null;
$4d24c7d9b8bfa99a$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $4d24c7d9b8bfa99a$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($4d24c7d9b8bfa99a$var$Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $4d24c7d9b8bfa99a$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $4d24c7d9b8bfa99a$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $4d24c7d9b8bfa99a$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        $4d24c7d9b8bfa99a$var$finishMaybe(stream, state);
    });
}
function $4d24c7d9b8bfa99a$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $7pjJT.nextTick($4d24c7d9b8bfa99a$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function $4d24c7d9b8bfa99a$var$finishMaybe(stream, state) {
    var need = $4d24c7d9b8bfa99a$var$needFinish(state);
    if (need) {
        $4d24c7d9b8bfa99a$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $4d24c7d9b8bfa99a$var$endWritable(stream, state, cb) {
    state.ending = true;
    $4d24c7d9b8bfa99a$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $7pjJT.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $4d24c7d9b8bfa99a$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($4d24c7d9b8bfa99a$var$Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$4d24c7d9b8bfa99a$var$Writable.prototype.destroy = $51lmU.destroy;
$4d24c7d9b8bfa99a$var$Writable.prototype._undestroy = $51lmU.undestroy;
$4d24c7d9b8bfa99a$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});


parcelRequire.register("cZauc", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", () => $974350e1c3a31be6$export$63a7aa211a91ed69, (v) => $974350e1c3a31be6$export$63a7aa211a91ed69 = v);
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $974350e1c3a31be6$export$63a7aa211a91ed69;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $ahmAR = parcelRequire("ahmAR");
var $974350e1c3a31be6$require$Buffer = $ahmAR.Buffer;
/*</replacement>*/ var $974350e1c3a31be6$var$isEncoding = $974350e1c3a31be6$require$Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function $974350e1c3a31be6$var$_normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $974350e1c3a31be6$var$normalizeEncoding(enc) {
    var nenc = $974350e1c3a31be6$var$_normalizeEncoding(enc);
    if (typeof nenc !== 'string' && ($974350e1c3a31be6$require$Buffer.isEncoding === $974350e1c3a31be6$var$isEncoding || !$974350e1c3a31be6$var$isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
$974350e1c3a31be6$export$63a7aa211a91ed69 = $974350e1c3a31be6$var$StringDecoder;
function $974350e1c3a31be6$var$StringDecoder(encoding) {
    this.encoding = $974350e1c3a31be6$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = $974350e1c3a31be6$var$utf16Text;
            this.end = $974350e1c3a31be6$var$utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = $974350e1c3a31be6$var$utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = $974350e1c3a31be6$var$base64Text;
            this.end = $974350e1c3a31be6$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $974350e1c3a31be6$var$simpleWrite;
            this.end = $974350e1c3a31be6$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $974350e1c3a31be6$require$Buffer.allocUnsafe(nb);
}
$974350e1c3a31be6$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
$974350e1c3a31be6$var$StringDecoder.prototype.end = $974350e1c3a31be6$var$utf8End;
// Returns only complete characters in a Buffer
$974350e1c3a31be6$var$StringDecoder.prototype.text = $974350e1c3a31be6$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$974350e1c3a31be6$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $974350e1c3a31be6$var$utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $974350e1c3a31be6$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $974350e1c3a31be6$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $974350e1c3a31be6$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $974350e1c3a31be6$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $974350e1c3a31be6$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $974350e1c3a31be6$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $974350e1c3a31be6$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $974350e1c3a31be6$var$utf8Text(buf, i) {
    var total = $974350e1c3a31be6$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $974350e1c3a31be6$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $974350e1c3a31be6$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $974350e1c3a31be6$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function $974350e1c3a31be6$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function $974350e1c3a31be6$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $974350e1c3a31be6$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $974350e1c3a31be6$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

});

parcelRequire.register("86eZD", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
'use strict';
var $5e5a839196cf621c$var$_Object$setPrototypeO;
function $5e5a839196cf621c$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

var $cfCFe = parcelRequire("cfCFe");
var $5e5a839196cf621c$var$kLastResolve = Symbol('lastResolve');
var $5e5a839196cf621c$var$kLastReject = Symbol('lastReject');
var $5e5a839196cf621c$var$kError = Symbol('error');
var $5e5a839196cf621c$var$kEnded = Symbol('ended');
var $5e5a839196cf621c$var$kLastPromise = Symbol('lastPromise');
var $5e5a839196cf621c$var$kHandlePromise = Symbol('handlePromise');
var $5e5a839196cf621c$var$kStream = Symbol('stream');
function $5e5a839196cf621c$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $5e5a839196cf621c$var$readAndResolve(iter) {
    var resolve = iter[$5e5a839196cf621c$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$5e5a839196cf621c$var$kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$5e5a839196cf621c$var$kLastPromise] = null;
            iter[$5e5a839196cf621c$var$kLastResolve] = null;
            iter[$5e5a839196cf621c$var$kLastReject] = null;
            resolve($5e5a839196cf621c$var$createIterResult(data, false));
        }
    }
}
function $5e5a839196cf621c$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $7pjJT.nextTick($5e5a839196cf621c$var$readAndResolve, iter);
}
function $5e5a839196cf621c$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$5e5a839196cf621c$var$kEnded]) {
                resolve($5e5a839196cf621c$var$createIterResult(undefined, true));
                return;
            }
            iter[$5e5a839196cf621c$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $5e5a839196cf621c$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var $5e5a839196cf621c$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($5e5a839196cf621c$var$_Object$setPrototypeO = {
    get stream () {
        return this[$5e5a839196cf621c$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$5e5a839196cf621c$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$5e5a839196cf621c$var$kEnded]) return Promise.resolve($5e5a839196cf621c$var$createIterResult(undefined, true));
        if (this[$5e5a839196cf621c$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $7pjJT.nextTick(function() {
                if (_this[$5e5a839196cf621c$var$kError]) reject(_this[$5e5a839196cf621c$var$kError]);
                else resolve($5e5a839196cf621c$var$createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$5e5a839196cf621c$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($5e5a839196cf621c$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$5e5a839196cf621c$var$kStream].read();
            if (data !== null) return Promise.resolve($5e5a839196cf621c$var$createIterResult(data, false));
            promise = new Promise(this[$5e5a839196cf621c$var$kHandlePromise]);
        }
        this[$5e5a839196cf621c$var$kLastPromise] = promise;
        return promise;
    }
}, $5e5a839196cf621c$var$_defineProperty($5e5a839196cf621c$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $5e5a839196cf621c$var$_defineProperty($5e5a839196cf621c$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$5e5a839196cf621c$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($5e5a839196cf621c$var$createIterResult(undefined, true));
        });
    });
}), $5e5a839196cf621c$var$_Object$setPrototypeO), $5e5a839196cf621c$var$AsyncIteratorPrototype);
var $5e5a839196cf621c$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($5e5a839196cf621c$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, $5e5a839196cf621c$var$_defineProperty(_Object$create, $5e5a839196cf621c$var$kStream, {
        value: stream,
        writable: true
    }), $5e5a839196cf621c$var$_defineProperty(_Object$create, $5e5a839196cf621c$var$kLastResolve, {
        value: null,
        writable: true
    }), $5e5a839196cf621c$var$_defineProperty(_Object$create, $5e5a839196cf621c$var$kLastReject, {
        value: null,
        writable: true
    }), $5e5a839196cf621c$var$_defineProperty(_Object$create, $5e5a839196cf621c$var$kError, {
        value: null,
        writable: true
    }), $5e5a839196cf621c$var$_defineProperty(_Object$create, $5e5a839196cf621c$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $5e5a839196cf621c$var$_defineProperty(_Object$create, $5e5a839196cf621c$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$5e5a839196cf621c$var$kStream].read();
            if (data) {
                iterator[$5e5a839196cf621c$var$kLastPromise] = null;
                iterator[$5e5a839196cf621c$var$kLastResolve] = null;
                iterator[$5e5a839196cf621c$var$kLastReject] = null;
                resolve($5e5a839196cf621c$var$createIterResult(data, false));
            } else {
                iterator[$5e5a839196cf621c$var$kLastResolve] = resolve;
                iterator[$5e5a839196cf621c$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$5e5a839196cf621c$var$kLastPromise] = null;
    $cfCFe(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[$5e5a839196cf621c$var$kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$5e5a839196cf621c$var$kLastPromise] = null;
                iterator[$5e5a839196cf621c$var$kLastResolve] = null;
                iterator[$5e5a839196cf621c$var$kLastReject] = null;
                reject(err);
            }
            iterator[$5e5a839196cf621c$var$kError] = err;
            return;
        }
        var resolve = iterator[$5e5a839196cf621c$var$kLastResolve];
        if (resolve !== null) {
            iterator[$5e5a839196cf621c$var$kLastPromise] = null;
            iterator[$5e5a839196cf621c$var$kLastResolve] = null;
            iterator[$5e5a839196cf621c$var$kLastReject] = null;
            resolve($5e5a839196cf621c$var$createIterResult(undefined, true));
        }
        iterator[$5e5a839196cf621c$var$kEnded] = true;
    });
    stream.on('readable', $5e5a839196cf621c$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $5e5a839196cf621c$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("cfCFe", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var $fTD3R = parcelRequire("fTD3R");
var $8eb4e0a30e103248$var$ERR_STREAM_PREMATURE_CLOSE = $fTD3R.codes.ERR_STREAM_PREMATURE_CLOSE;
function $8eb4e0a30e103248$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $8eb4e0a30e103248$var$noop() {
}
function $8eb4e0a30e103248$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function $8eb4e0a30e103248$var$eos(stream, opts, callback) {
    if (typeof opts === 'function') return $8eb4e0a30e103248$var$eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = $8eb4e0a30e103248$var$once(callback || $8eb4e0a30e103248$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $8eb4e0a30e103248$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $8eb4e0a30e103248$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if ($8eb4e0a30e103248$var$isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = $8eb4e0a30e103248$var$eos;

});


parcelRequire.register("2s4Zj", function(module, exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

});


parcelRequire.register("9YUhl", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = $74455f714d601d5e$var$Transform;

var $fTD3R = parcelRequire("fTD3R");
var $74455f714d601d5e$require$_require$codes = $fTD3R.codes;
var $74455f714d601d5e$var$ERR_METHOD_NOT_IMPLEMENTED = $74455f714d601d5e$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $74455f714d601d5e$var$ERR_MULTIPLE_CALLBACK = $74455f714d601d5e$require$_require$codes.ERR_MULTIPLE_CALLBACK, $74455f714d601d5e$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $74455f714d601d5e$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $74455f714d601d5e$var$ERR_TRANSFORM_WITH_LENGTH_0 = $74455f714d601d5e$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $fIqup = parcelRequire("fIqup");

(parcelRequire("cvM26"))($74455f714d601d5e$var$Transform, $fIqup);
function $74455f714d601d5e$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new $74455f714d601d5e$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $74455f714d601d5e$var$Transform(options) {
    if (!(this instanceof $74455f714d601d5e$var$Transform)) return new $74455f714d601d5e$var$Transform(options);
    $fIqup.call(this, options);
    this._transformState = {
        afterTransform: $74455f714d601d5e$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', $74455f714d601d5e$var$prefinish);
}
function $74455f714d601d5e$var$prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        $74455f714d601d5e$var$done(_this, er, data);
    });
    else $74455f714d601d5e$var$done(this, null, null);
}
$74455f714d601d5e$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $fIqup.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$74455f714d601d5e$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $74455f714d601d5e$var$ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
$74455f714d601d5e$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$74455f714d601d5e$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$74455f714d601d5e$var$Transform.prototype._destroy = function(err, cb) {
    $fIqup.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $74455f714d601d5e$var$done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $74455f714d601d5e$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $74455f714d601d5e$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("7Fs3h", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = $59521f3ed361a2d3$var$PassThrough;

var $9YUhl = parcelRequire("9YUhl");

(parcelRequire("cvM26"))($59521f3ed361a2d3$var$PassThrough, $9YUhl);
function $59521f3ed361a2d3$var$PassThrough(options) {
    if (!(this instanceof $59521f3ed361a2d3$var$PassThrough)) return new $59521f3ed361a2d3$var$PassThrough(options);
    $9YUhl.call(this, options);
}
$59521f3ed361a2d3$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("h24bu", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var $c665de77b696fb8e$var$eos;
function $c665de77b696fb8e$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $fTD3R = parcelRequire("fTD3R");
var $c665de77b696fb8e$require$_require$codes = $fTD3R.codes;
var $c665de77b696fb8e$var$ERR_MISSING_ARGS = $c665de77b696fb8e$require$_require$codes.ERR_MISSING_ARGS, $c665de77b696fb8e$var$ERR_STREAM_DESTROYED = $c665de77b696fb8e$require$_require$codes.ERR_STREAM_DESTROYED;
function $c665de77b696fb8e$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $c665de77b696fb8e$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}

function $c665de77b696fb8e$var$destroyer(stream, reading, writing, callback) {
    callback = $c665de77b696fb8e$var$once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if ($c665de77b696fb8e$var$eos === undefined) $c665de77b696fb8e$var$eos = (parcelRequire("cfCFe"));
    $c665de77b696fb8e$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($c665de77b696fb8e$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new $c665de77b696fb8e$var$ERR_STREAM_DESTROYED('pipe'));
    };
}
function $c665de77b696fb8e$var$call(fn) {
    fn();
}
function $c665de77b696fb8e$var$pipe(from, to) {
    return from.pipe(to);
}
function $c665de77b696fb8e$var$popCallback(streams) {
    if (!streams.length) return $c665de77b696fb8e$var$noop;
    if (typeof streams[streams.length - 1] !== 'function') return $c665de77b696fb8e$var$noop;
    return streams.pop();
}
function $c665de77b696fb8e$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $c665de77b696fb8e$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $c665de77b696fb8e$var$ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $c665de77b696fb8e$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($c665de77b696fb8e$var$call);
            if (reading) return;
            destroys.forEach($c665de77b696fb8e$var$call);
            callback(error);
        });
    });
    return streams.reduce($c665de77b696fb8e$var$pipe);
}
module.exports = $c665de77b696fb8e$var$pipeline;

});


parcelRequire.register("bdGO8", function(module, exports) {

var $ahmAR = parcelRequire("ahmAR");
var $82b21d5056483c5d$require$Buffer = $ahmAR.Buffer;

var $2xoxV = parcelRequire("2xoxV");

var $jgpp4 = parcelRequire("jgpp4");

var $iAZAB = parcelRequire("iAZAB");
var $82b21d5056483c5d$require$EC = $iAZAB.ec;

var $02waS = parcelRequire("02waS");

var $1egYR = parcelRequire("1egYR");

var $1wY77 = parcelRequire("1wY77");
function $82b21d5056483c5d$var$sign(hash, key, hashType, signType, tag) {
    var priv = $1egYR(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
        return $82b21d5056483c5d$var$ecSign(hash, priv);
    } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type');
        return $82b21d5056483c5d$var$dsaSign(hash, priv, hashType);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    }
    hash = $82b21d5056483c5d$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(255);
    pad.push(0);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = $jgpp4(pad, priv);
    return out;
}
function $82b21d5056483c5d$var$ecSign(hash, priv) {
    var curveId = $1wY77[priv.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
    var curve = new $82b21d5056483c5d$require$EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return $82b21d5056483c5d$require$Buffer.from(out.toDER());
}
function $82b21d5056483c5d$var$dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new $02waS(0);
    var k;
    var H = $82b21d5056483c5d$var$bits2int(hash, q).mod(q);
    var s = false;
    var kv = $82b21d5056483c5d$var$getKey(x, q, hash, algo);
    while(s === false){
        k = $82b21d5056483c5d$var$makeKey(q, kv, algo);
        r = $82b21d5056483c5d$var$makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new $02waS(0);
        }
    }
    return $82b21d5056483c5d$var$toDER(r, s);
}
function $82b21d5056483c5d$var$toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    if (s[0] & 128) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        48,
        total,
        2,
        r.length
    ];
    res = res.concat(r, [
        2,
        s.length
    ], s);
    return $82b21d5056483c5d$require$Buffer.from(res);
}
function $82b21d5056483c5d$var$getKey(x, q, hash, algo) {
    x = $82b21d5056483c5d$require$Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = $82b21d5056483c5d$require$Buffer.alloc(q.byteLength() - x.length);
        x = $82b21d5056483c5d$require$Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = $82b21d5056483c5d$var$bits2octets(hash, q);
    var v = $82b21d5056483c5d$require$Buffer.alloc(hlen);
    v.fill(1);
    var k = $82b21d5056483c5d$require$Buffer.alloc(hlen);
    k = $2xoxV(algo, k).update(v).update($82b21d5056483c5d$require$Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = $2xoxV(algo, k).update(v).digest();
    k = $2xoxV(algo, k).update(v).update($82b21d5056483c5d$require$Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = $2xoxV(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function $82b21d5056483c5d$var$bits2int(obits, q) {
    var bits = new $02waS(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function $82b21d5056483c5d$var$bits2octets(bits, q) {
    bits = $82b21d5056483c5d$var$bits2int(bits, q);
    bits = bits.mod(q);
    var out = $82b21d5056483c5d$require$Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = $82b21d5056483c5d$require$Buffer.alloc(q.byteLength() - out.length);
        out = $82b21d5056483c5d$require$Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function $82b21d5056483c5d$var$makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = $82b21d5056483c5d$require$Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = $2xoxV(algo, kv.k).update(kv.v).digest();
            t = $82b21d5056483c5d$require$Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = $82b21d5056483c5d$var$bits2int(t, q);
        kv.k = $2xoxV(algo, kv.k).update(kv.v).update($82b21d5056483c5d$require$Buffer.from([
            0
        ])).digest();
        kv.v = $2xoxV(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1)
    return k;
}
function $82b21d5056483c5d$var$makeR(g, k, p, q) {
    return g.toRed($02waS.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = $82b21d5056483c5d$var$sign;
module.exports.getKey = $82b21d5056483c5d$var$getKey;
module.exports.makeKey = $82b21d5056483c5d$var$makeKey;

});
parcelRequire.register("jgpp4", function(module, exports) {

var $fV0m8 = parcelRequire("fV0m8");
var $e0633783dd6da4e6$require$Buffer = $fV0m8.Buffer;

var $hdBHW = parcelRequire("hdBHW");

var $lv4cL = parcelRequire("lv4cL");
function $e0633783dd6da4e6$var$blind(priv) {
    var r = $e0633783dd6da4e6$var$getr(priv);
    var blinder = r.toRed($hdBHW.mont(priv.modulus)).redPow(new $hdBHW(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function $e0633783dd6da4e6$var$getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new $hdBHW($lv4cL(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
    return r;
}
function $e0633783dd6da4e6$var$crt(msg, priv) {
    var blinds = $e0633783dd6da4e6$var$blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new $hdBHW(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed($hdBHW.mont(priv.prime1));
    var c2 = blinded.toRed($hdBHW.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike($e0633783dd6da4e6$require$Buffer, 'be', len);
}
$e0633783dd6da4e6$var$crt.getr = $e0633783dd6da4e6$var$getr;
module.exports = $e0633783dd6da4e6$var$crt;

});
parcelRequire.register("hdBHW", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("cacXd")).Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})("object" === 'undefined' || module, this);

});


parcelRequire.register("iAZAB", function(module, exports) {
'use strict';
var $d89b5d258878340b$var$elliptic = module.exports;

$d89b5d258878340b$var$elliptic.version = (parcelRequire("4iaPq")).version;

$d89b5d258878340b$var$elliptic.utils = (parcelRequire("iaL3O"));

$d89b5d258878340b$var$elliptic.rand = (parcelRequire("drx5y"));

$d89b5d258878340b$var$elliptic.curve = (parcelRequire("5lHId"));

$d89b5d258878340b$var$elliptic.curves = (parcelRequire("bpaeg"));

// Protocols
$d89b5d258878340b$var$elliptic.ec = (parcelRequire("aTGss"));

$d89b5d258878340b$var$elliptic.eddsa = (parcelRequire("2SVWO"));

});
parcelRequire.register("4iaPq", function(module, exports) {
module.exports = JSON.parse("{\"name\":\"elliptic\",\"version\":\"6.5.4\",\"description\":\"EC cryptography\",\"main\":\"lib/elliptic.js\",\"files\":[\"lib\"],\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"test\":\"npm run lint && npm run unit\",\"version\":\"grunt dist && git add dist/\"},\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:indutny/elliptic\"},\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"author\":\"Fedor Indutny <fedor@indutny.com>\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"homepage\":\"https://github.com/indutny/elliptic\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"}}");

});

parcelRequire.register("iaL3O", function(module, exports) {
'use strict';
var $d3adaa66a00797ba$var$utils = module.exports;

var $e7GsD = parcelRequire("e7GsD");

var $ifIvd = parcelRequire("ifIvd");

var $k5OMf = parcelRequire("k5OMf");
$d3adaa66a00797ba$var$utils.assert = $ifIvd;
$d3adaa66a00797ba$var$utils.toArray = $k5OMf.toArray;
$d3adaa66a00797ba$var$utils.zero2 = $k5OMf.zero2;
$d3adaa66a00797ba$var$utils.toHex = $k5OMf.toHex;
$d3adaa66a00797ba$var$utils.encode = $k5OMf.encode;
// Represent num in a w-NAF form
function $d3adaa66a00797ba$var$getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
$d3adaa66a00797ba$var$utils.getNAF = $d3adaa66a00797ba$var$getNAF;
// Represent k1, k2 in a Joint Sparse Form
function $d3adaa66a00797ba$var$getJSF(k1, k2) {
    var jsf = [
        [],
        [], 
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
$d3adaa66a00797ba$var$utils.getJSF = $d3adaa66a00797ba$var$getJSF;
function $d3adaa66a00797ba$var$cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
$d3adaa66a00797ba$var$utils.cachedProperty = $d3adaa66a00797ba$var$cachedProperty;
function $d3adaa66a00797ba$var$parseBytes(bytes) {
    return typeof bytes === 'string' ? $d3adaa66a00797ba$var$utils.toArray(bytes, 'hex') : bytes;
}
$d3adaa66a00797ba$var$utils.parseBytes = $d3adaa66a00797ba$var$parseBytes;
function $d3adaa66a00797ba$var$intFromLE(bytes) {
    return new $e7GsD(bytes, 'hex', 'le');
}
$d3adaa66a00797ba$var$utils.intFromLE = $d3adaa66a00797ba$var$intFromLE;

});
parcelRequire.register("k5OMf", function(module, exports) {
'use strict';
var $ea0ba995c9ade8a6$var$utils = module.exports;
function $ea0ba995c9ade8a6$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== 'string') {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 255;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
$ea0ba995c9ade8a6$var$utils.toArray = $ea0ba995c9ade8a6$var$toArray;
function $ea0ba995c9ade8a6$var$zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
$ea0ba995c9ade8a6$var$utils.zero2 = $ea0ba995c9ade8a6$var$zero2;
function $ea0ba995c9ade8a6$var$toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += $ea0ba995c9ade8a6$var$zero2(msg[i].toString(16));
    return res;
}
$ea0ba995c9ade8a6$var$utils.toHex = $ea0ba995c9ade8a6$var$toHex;
$ea0ba995c9ade8a6$var$utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return $ea0ba995c9ade8a6$var$toHex(arr);
    else return arr;
};

});


parcelRequire.register("5lHId", function(module, exports) {
'use strict';
var $3e50d23a4beb1466$var$curve = module.exports;

$3e50d23a4beb1466$var$curve.base = (parcelRequire("hF0Wf"));

$3e50d23a4beb1466$var$curve.short = (parcelRequire("9n7Vh"));

$3e50d23a4beb1466$var$curve.mont = (parcelRequire("duRx2"));

$3e50d23a4beb1466$var$curve.edwards = (parcelRequire("cCk3r"));

});
parcelRequire.register("hF0Wf", function(module, exports) {
'use strict';

var $e7GsD = parcelRequire("e7GsD");

var $iaL3O = parcelRequire("iaL3O");
var $cdb6fe5e8f94a800$var$getNAF = $iaL3O.getNAF;
var $cdb6fe5e8f94a800$var$getJSF = $iaL3O.getJSF;
var $cdb6fe5e8f94a800$var$assert = $iaL3O.assert;
function $cdb6fe5e8f94a800$var$BaseCurve(type, conf) {
    this.type = type;
    this.p = new $e7GsD(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? $e7GsD.red(conf.prime) : $e7GsD.mont(this.p);
    // Useful for many curves
    this.zero = new $e7GsD(0).toRed(this.red);
    this.one = new $e7GsD(1).toRed(this.red);
    this.two = new $e7GsD(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new $e7GsD(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = $cdb6fe5e8f94a800$var$BaseCurve;
$cdb6fe5e8f94a800$var$BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
$cdb6fe5e8f94a800$var$BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
$cdb6fe5e8f94a800$var$BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    $cdb6fe5e8f94a800$var$assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = $cdb6fe5e8f94a800$var$getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
$cdb6fe5e8f94a800$var$BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = $cdb6fe5e8f94a800$var$getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        $cdb6fe5e8f94a800$var$assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
$cdb6fe5e8f94a800$var$BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = $cdb6fe5e8f94a800$var$getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = $cdb6fe5e8f94a800$var$getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = $cdb6fe5e8f94a800$var$getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === 'affine') acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function $cdb6fe5e8f94a800$var$BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
$cdb6fe5e8f94a800$var$BaseCurve.BasePoint = $cdb6fe5e8f94a800$var$BasePoint;
$cdb6fe5e8f94a800$var$BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
};
$cdb6fe5e8f94a800$var$BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
$cdb6fe5e8f94a800$var$BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = $iaL3O.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6) $cdb6fe5e8f94a800$var$assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7) $cdb6fe5e8f94a800$var$assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    throw new Error('Unknown point format');
};
$cdb6fe5e8f94a800$var$BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
$cdb6fe5e8f94a800$var$BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact) return [
        this.getY().isEven() ? 2 : 3
    ].concat(x);
    return [
        4
    ].concat(x, this.getY().toArray('be', len));
};
$cdb6fe5e8f94a800$var$BasePoint.prototype.encode = function encode(enc, compact) {
    return $iaL3O.encode(this._encode(compact), enc);
};
$cdb6fe5e8f94a800$var$BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
$cdb6fe5e8f94a800$var$BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
$cdb6fe5e8f94a800$var$BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
$cdb6fe5e8f94a800$var$BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
$cdb6fe5e8f94a800$var$BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
$cdb6fe5e8f94a800$var$BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

});

parcelRequire.register("9n7Vh", function(module, exports) {
'use strict';

var $iaL3O = parcelRequire("iaL3O");

var $e7GsD = parcelRequire("e7GsD");

var $cvM26 = parcelRequire("cvM26");

var $hF0Wf = parcelRequire("hF0Wf");
var $6d2c6857a22bcd65$var$assert = $iaL3O.assert;
function $6d2c6857a22bcd65$var$ShortCurve(conf) {
    $hF0Wf.call(this, 'short', conf);
    this.a = new $e7GsD(conf.a, 16).toRed(this.red);
    this.b = new $e7GsD(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
$cvM26($6d2c6857a22bcd65$var$ShortCurve, $hF0Wf);
module.exports = $6d2c6857a22bcd65$var$ShortCurve;
$6d2c6857a22bcd65$var$ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new $e7GsD(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new $e7GsD(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            $6d2c6857a22bcd65$var$assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new $e7GsD(vec.a, 16),
            b: new $e7GsD(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
$6d2c6857a22bcd65$var$ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : $e7GsD.mont(num);
    var tinv = new $e7GsD(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new $e7GsD(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
$6d2c6857a22bcd65$var$ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new $e7GsD(1);
    var y1 = new $e7GsD(0);
    var x2 = new $e7GsD(0);
    var y2 = new $e7GsD(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
$6d2c6857a22bcd65$var$ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
$6d2c6857a22bcd65$var$ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $e7GsD(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$6d2c6857a22bcd65$var$ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
$6d2c6857a22bcd65$var$ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function $6d2c6857a22bcd65$var$Point(curve, x, y, isRed) {
    $hF0Wf.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new $e7GsD(x, 16);
        this.y = new $e7GsD(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
$cvM26($6d2c6857a22bcd65$var$Point, $hF0Wf.BasePoint);
$6d2c6857a22bcd65$var$ShortCurve.prototype.point = function point(x, y, isRed) {
    return new $6d2c6857a22bcd65$var$Point(this, x, y, isRed);
};
$6d2c6857a22bcd65$var$ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return $6d2c6857a22bcd65$var$Point.fromJSON(this, obj, red);
};
$6d2c6857a22bcd65$var$Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
$6d2c6857a22bcd65$var$Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
$6d2c6857a22bcd65$var$Point.fromJSON = function fromJSON(curve, obj1, red) {
    if (typeof obj1 === 'string') obj1 = JSON.parse(obj1);
    var res = curve.point(obj1[0], obj1[1], red);
    if (!obj1[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj1[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
$6d2c6857a22bcd65$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
$6d2c6857a22bcd65$var$Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
$6d2c6857a22bcd65$var$Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$6d2c6857a22bcd65$var$Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$6d2c6857a22bcd65$var$Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
$6d2c6857a22bcd65$var$Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
$6d2c6857a22bcd65$var$Point.prototype.mul = function mul(k) {
    k = new $e7GsD(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
$6d2c6857a22bcd65$var$Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
$6d2c6857a22bcd65$var$Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
$6d2c6857a22bcd65$var$Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
$6d2c6857a22bcd65$var$Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
$6d2c6857a22bcd65$var$Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function $6d2c6857a22bcd65$var$JPoint(curve, x, y, z) {
    $hF0Wf.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new $e7GsD(0);
    } else {
        this.x = new $e7GsD(x, 16);
        this.y = new $e7GsD(y, 16);
        this.z = new $e7GsD(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
$cvM26($6d2c6857a22bcd65$var$JPoint, $hF0Wf.BasePoint);
$6d2c6857a22bcd65$var$ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new $6d2c6857a22bcd65$var$JPoint(this, x, y, z);
};
$6d2c6857a22bcd65$var$JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
$6d2c6857a22bcd65$var$JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
$6d2c6857a22bcd65$var$JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$6d2c6857a22bcd65$var$JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$6d2c6857a22bcd65$var$JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
$6d2c6857a22bcd65$var$JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
$6d2c6857a22bcd65$var$JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$6d2c6857a22bcd65$var$JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$6d2c6857a22bcd65$var$JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
$6d2c6857a22bcd65$var$JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
$6d2c6857a22bcd65$var$JPoint.prototype.mul = function mul(k, kbase) {
    k = new $e7GsD(k, kbase);
    return this.curve._wnafMul(this, k);
};
$6d2c6857a22bcd65$var$JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine') return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
$6d2c6857a22bcd65$var$JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
$6d2c6857a22bcd65$var$JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};
$6d2c6857a22bcd65$var$JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

});

parcelRequire.register("duRx2", function(module, exports) {
'use strict';

var $e7GsD = parcelRequire("e7GsD");

var $cvM26 = parcelRequire("cvM26");

var $hF0Wf = parcelRequire("hF0Wf");

var $iaL3O = parcelRequire("iaL3O");
function $9d379a0b11802b52$var$MontCurve(conf) {
    $hF0Wf.call(this, 'mont', conf);
    this.a = new $e7GsD(conf.a, 16).toRed(this.red);
    this.b = new $e7GsD(conf.b, 16).toRed(this.red);
    this.i4 = new $e7GsD(4).toRed(this.red).redInvm();
    this.two = new $e7GsD(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
$cvM26($9d379a0b11802b52$var$MontCurve, $hF0Wf);
module.exports = $9d379a0b11802b52$var$MontCurve;
$9d379a0b11802b52$var$MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function $9d379a0b11802b52$var$Point(curve, x, z) {
    $hF0Wf.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new $e7GsD(x, 16);
        this.z = new $e7GsD(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
$cvM26($9d379a0b11802b52$var$Point, $hF0Wf.BasePoint);
$9d379a0b11802b52$var$MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point($iaL3O.toArray(bytes, enc), 1);
};
$9d379a0b11802b52$var$MontCurve.prototype.point = function point(x, z) {
    return new $9d379a0b11802b52$var$Point(this, x, z);
};
$9d379a0b11802b52$var$MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $9d379a0b11802b52$var$Point.fromJSON(this, obj);
};
$9d379a0b11802b52$var$Point.prototype.precompute = function precompute() {
// No-op
};
$9d379a0b11802b52$var$Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
$9d379a0b11802b52$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $9d379a0b11802b52$var$Point(curve, obj[0], obj[1] || curve.one);
};
$9d379a0b11802b52$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
$9d379a0b11802b52$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
$9d379a0b11802b52$var$Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
$9d379a0b11802b52$var$Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
$9d379a0b11802b52$var$Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
$9d379a0b11802b52$var$Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
$9d379a0b11802b52$var$Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
$9d379a0b11802b52$var$Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
$9d379a0b11802b52$var$Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
$9d379a0b11802b52$var$Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
$9d379a0b11802b52$var$Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

});

parcelRequire.register("cCk3r", function(module, exports) {
'use strict';

var $iaL3O = parcelRequire("iaL3O");

var $e7GsD = parcelRequire("e7GsD");

var $cvM26 = parcelRequire("cvM26");

var $hF0Wf = parcelRequire("hF0Wf");
var $92f8970846f7413c$var$assert = $iaL3O.assert;
function $92f8970846f7413c$var$EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    $hF0Wf.call(this, 'edwards', conf);
    this.a = new $e7GsD(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new $e7GsD(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new $e7GsD(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    $92f8970846f7413c$var$assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
$cvM26($92f8970846f7413c$var$EdwardsCurve, $hF0Wf);
module.exports = $92f8970846f7413c$var$EdwardsCurve;
$92f8970846f7413c$var$EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
$92f8970846f7413c$var$EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
$92f8970846f7413c$var$EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
$92f8970846f7413c$var$EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $e7GsD(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$92f8970846f7413c$var$EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new $e7GsD(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
$92f8970846f7413c$var$EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function $92f8970846f7413c$var$Point(curve, x, y, z, t) {
    $hF0Wf.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new $e7GsD(x, 16);
        this.y = new $e7GsD(y, 16);
        this.z = z ? new $e7GsD(z, 16) : this.curve.one;
        this.t = t && new $e7GsD(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
$cvM26($92f8970846f7413c$var$Point, $hF0Wf.BasePoint);
$92f8970846f7413c$var$EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $92f8970846f7413c$var$Point.fromJSON(this, obj);
};
$92f8970846f7413c$var$EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new $92f8970846f7413c$var$Point(this, x, y, z, t);
};
$92f8970846f7413c$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $92f8970846f7413c$var$Point(curve, obj[0], obj[1], obj[2]);
};
$92f8970846f7413c$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
$92f8970846f7413c$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
$92f8970846f7413c$var$Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$92f8970846f7413c$var$Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
$92f8970846f7413c$var$Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
$92f8970846f7413c$var$Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$92f8970846f7413c$var$Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
$92f8970846f7413c$var$Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
$92f8970846f7413c$var$Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
$92f8970846f7413c$var$Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
$92f8970846f7413c$var$Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
$92f8970846f7413c$var$Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
$92f8970846f7413c$var$Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
$92f8970846f7413c$var$Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
$92f8970846f7413c$var$Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
$92f8970846f7413c$var$Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
$92f8970846f7413c$var$Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
$92f8970846f7413c$var$Point.prototype.toP = $92f8970846f7413c$var$Point.prototype.normalize;
$92f8970846f7413c$var$Point.prototype.mixedAdd = $92f8970846f7413c$var$Point.prototype.add;

});


parcelRequire.register("bpaeg", function(module, exports) {
'use strict';
var $02248c3d1b4bc3ab$var$curves = module.exports;

var $dR9EK = parcelRequire("dR9EK");

var $5lHId = parcelRequire("5lHId");

var $iaL3O = parcelRequire("iaL3O");
var $02248c3d1b4bc3ab$var$assert = $iaL3O.assert;
function $02248c3d1b4bc3ab$var$PresetCurve(options) {
    if (options.type === 'short') this.curve = new $5lHId.short(options);
    else if (options.type === 'edwards') this.curve = new $5lHId.edwards(options);
    else this.curve = new $5lHId.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    $02248c3d1b4bc3ab$var$assert(this.g.validate(), 'Invalid curve');
    $02248c3d1b4bc3ab$var$assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
$02248c3d1b4bc3ab$var$curves.PresetCurve = $02248c3d1b4bc3ab$var$PresetCurve;
function $02248c3d1b4bc3ab$var$defineCurve(name, options) {
    Object.defineProperty($02248c3d1b4bc3ab$var$curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve = new $02248c3d1b4bc3ab$var$PresetCurve(options);
            Object.defineProperty($02248c3d1b4bc3ab$var$curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
$02248c3d1b4bc3ab$var$defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: $dR9EK.sha256,
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811', 
    ]
});
$02248c3d1b4bc3ab$var$defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: $dR9EK.sha256,
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34', 
    ]
});
$02248c3d1b4bc3ab$var$defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: $dR9EK.sha256,
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5', 
    ]
});
$02248c3d1b4bc3ab$var$defineCurve('p384', {
    type: 'short',
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: $dR9EK.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
    ]
});
$02248c3d1b4bc3ab$var$defineCurve('p521', {
    type: 'short',
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: $dR9EK.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
    ]
});
$02248c3d1b4bc3ab$var$defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: $dR9EK.sha256,
    gRed: false,
    g: [
        '9', 
    ]
});
$02248c3d1b4bc3ab$var$defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: $dR9EK.sha256,
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658', 
    ]
});
var $02248c3d1b4bc3ab$var$pre;

try {
    $02248c3d1b4bc3ab$var$pre = (parcelRequire("irp0L"));
} catch (e) {
    $02248c3d1b4bc3ab$var$pre = undefined;
}
$02248c3d1b4bc3ab$var$defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: $dR9EK.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }, 
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        $02248c3d1b4bc3ab$var$pre, 
    ]
});

});
parcelRequire.register("dR9EK", function(module, exports) {
var $a167b725fe9ebe2d$var$hash = module.exports;

$a167b725fe9ebe2d$var$hash.utils = (parcelRequire("6qKXt"));

$a167b725fe9ebe2d$var$hash.common = (parcelRequire("9JHSZ"));

$a167b725fe9ebe2d$var$hash.sha = (parcelRequire("9rDu1"));

$a167b725fe9ebe2d$var$hash.ripemd = (parcelRequire("ZbHJP"));

$a167b725fe9ebe2d$var$hash.hmac = (parcelRequire("gxlhJ"));
// Proxy hash functions to the main object
$a167b725fe9ebe2d$var$hash.sha1 = $a167b725fe9ebe2d$var$hash.sha.sha1;
$a167b725fe9ebe2d$var$hash.sha256 = $a167b725fe9ebe2d$var$hash.sha.sha256;
$a167b725fe9ebe2d$var$hash.sha224 = $a167b725fe9ebe2d$var$hash.sha.sha224;
$a167b725fe9ebe2d$var$hash.sha384 = $a167b725fe9ebe2d$var$hash.sha.sha384;
$a167b725fe9ebe2d$var$hash.sha512 = $a167b725fe9ebe2d$var$hash.sha.sha512;
$a167b725fe9ebe2d$var$hash.ripemd160 = $a167b725fe9ebe2d$var$hash.ripemd.ripemd160;

});
parcelRequire.register("6qKXt", function(module, exports) {

$parcel$export(module.exports, "inherits", () => $4ae998b113e116d3$export$69f1b2dcda23c5f8, (v) => $4ae998b113e116d3$export$69f1b2dcda23c5f8 = v);
$parcel$export(module.exports, "toArray", () => $4ae998b113e116d3$export$45b10814cc054894, (v) => $4ae998b113e116d3$export$45b10814cc054894 = v);
$parcel$export(module.exports, "toHex", () => $4ae998b113e116d3$export$7ea66e3774a60b67, (v) => $4ae998b113e116d3$export$7ea66e3774a60b67 = v);
$parcel$export(module.exports, "htonl", () => $4ae998b113e116d3$export$34a52f00f601f6f1, (v) => $4ae998b113e116d3$export$34a52f00f601f6f1 = v);
$parcel$export(module.exports, "toHex32", () => $4ae998b113e116d3$export$812b0cbd5e8a72ab, (v) => $4ae998b113e116d3$export$812b0cbd5e8a72ab = v);
$parcel$export(module.exports, "zero2", () => $4ae998b113e116d3$export$f24f9e11d63bb314, (v) => $4ae998b113e116d3$export$f24f9e11d63bb314 = v);
$parcel$export(module.exports, "zero8", () => $4ae998b113e116d3$export$b71357c7e07ca1f1, (v) => $4ae998b113e116d3$export$b71357c7e07ca1f1 = v);
$parcel$export(module.exports, "join32", () => $4ae998b113e116d3$export$2e58a4b541fdcbe8, (v) => $4ae998b113e116d3$export$2e58a4b541fdcbe8 = v);
$parcel$export(module.exports, "split32", () => $4ae998b113e116d3$export$183b950bde9faab8, (v) => $4ae998b113e116d3$export$183b950bde9faab8 = v);
$parcel$export(module.exports, "rotr32", () => $4ae998b113e116d3$export$4785c77169fea59e, (v) => $4ae998b113e116d3$export$4785c77169fea59e = v);
$parcel$export(module.exports, "rotl32", () => $4ae998b113e116d3$export$242a185dfcffac5b, (v) => $4ae998b113e116d3$export$242a185dfcffac5b = v);
$parcel$export(module.exports, "sum32", () => $4ae998b113e116d3$export$58c04ae0ae31877d, (v) => $4ae998b113e116d3$export$58c04ae0ae31877d = v);
$parcel$export(module.exports, "sum32_3", () => $4ae998b113e116d3$export$d058ca695f8c6f11, (v) => $4ae998b113e116d3$export$d058ca695f8c6f11 = v);
$parcel$export(module.exports, "sum32_4", () => $4ae998b113e116d3$export$a1efd7fc3e986367, (v) => $4ae998b113e116d3$export$a1efd7fc3e986367 = v);
$parcel$export(module.exports, "sum32_5", () => $4ae998b113e116d3$export$bbfea4a2b5abaab4, (v) => $4ae998b113e116d3$export$bbfea4a2b5abaab4 = v);
$parcel$export(module.exports, "sum64", () => $4ae998b113e116d3$export$97ad4afc7de86152, (v) => $4ae998b113e116d3$export$97ad4afc7de86152 = v);
$parcel$export(module.exports, "sum64_hi", () => $4ae998b113e116d3$export$ce4673d9a79f6a4b, (v) => $4ae998b113e116d3$export$ce4673d9a79f6a4b = v);
$parcel$export(module.exports, "sum64_lo", () => $4ae998b113e116d3$export$786cc99fc6eedc0b, (v) => $4ae998b113e116d3$export$786cc99fc6eedc0b = v);
$parcel$export(module.exports, "sum64_4_hi", () => $4ae998b113e116d3$export$45c59b9a1848dd0, (v) => $4ae998b113e116d3$export$45c59b9a1848dd0 = v);
$parcel$export(module.exports, "sum64_4_lo", () => $4ae998b113e116d3$export$50d8f613e76d3034, (v) => $4ae998b113e116d3$export$50d8f613e76d3034 = v);
$parcel$export(module.exports, "sum64_5_hi", () => $4ae998b113e116d3$export$b8e83683c60ee162, (v) => $4ae998b113e116d3$export$b8e83683c60ee162 = v);
$parcel$export(module.exports, "sum64_5_lo", () => $4ae998b113e116d3$export$aeeb51790d1bcc4a, (v) => $4ae998b113e116d3$export$aeeb51790d1bcc4a = v);
$parcel$export(module.exports, "rotr64_hi", () => $4ae998b113e116d3$export$bb7c616f719ad9c, (v) => $4ae998b113e116d3$export$bb7c616f719ad9c = v);
$parcel$export(module.exports, "rotr64_lo", () => $4ae998b113e116d3$export$4d63290824f9d7df, (v) => $4ae998b113e116d3$export$4d63290824f9d7df = v);
$parcel$export(module.exports, "shr64_hi", () => $4ae998b113e116d3$export$2f64ceb90ef28ea1, (v) => $4ae998b113e116d3$export$2f64ceb90ef28ea1 = v);
$parcel$export(module.exports, "shr64_lo", () => $4ae998b113e116d3$export$8d2089d465f6d10d, (v) => $4ae998b113e116d3$export$8d2089d465f6d10d = v);
var $4ae998b113e116d3$export$69f1b2dcda23c5f8;
var $4ae998b113e116d3$export$45b10814cc054894;
var $4ae998b113e116d3$export$7ea66e3774a60b67;
var $4ae998b113e116d3$export$34a52f00f601f6f1;
var $4ae998b113e116d3$export$812b0cbd5e8a72ab;
var $4ae998b113e116d3$export$f24f9e11d63bb314;
var $4ae998b113e116d3$export$b71357c7e07ca1f1;
var $4ae998b113e116d3$export$2e58a4b541fdcbe8;
var $4ae998b113e116d3$export$183b950bde9faab8;
var $4ae998b113e116d3$export$4785c77169fea59e;
var $4ae998b113e116d3$export$242a185dfcffac5b;
var $4ae998b113e116d3$export$58c04ae0ae31877d;
var $4ae998b113e116d3$export$d058ca695f8c6f11;
var $4ae998b113e116d3$export$a1efd7fc3e986367;
var $4ae998b113e116d3$export$bbfea4a2b5abaab4;
var $4ae998b113e116d3$export$97ad4afc7de86152;
var $4ae998b113e116d3$export$ce4673d9a79f6a4b;
var $4ae998b113e116d3$export$786cc99fc6eedc0b;
var $4ae998b113e116d3$export$45c59b9a1848dd0;
var $4ae998b113e116d3$export$50d8f613e76d3034;
var $4ae998b113e116d3$export$b8e83683c60ee162;
var $4ae998b113e116d3$export$aeeb51790d1bcc4a;
var $4ae998b113e116d3$export$bb7c616f719ad9c;
var $4ae998b113e116d3$export$4d63290824f9d7df;
var $4ae998b113e116d3$export$2f64ceb90ef28ea1;
var $4ae998b113e116d3$export$8d2089d465f6d10d;
'use strict';

var $ifIvd = parcelRequire("ifIvd");

var $cvM26 = parcelRequire("cvM26");
$4ae998b113e116d3$export$69f1b2dcda23c5f8 = $cvM26;
function $4ae998b113e116d3$var$isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 64512) !== 55296) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 64512) === 56320;
}
function $4ae998b113e116d3$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === 'string') {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if ($4ae998b113e116d3$var$isSurrogatePair(msg, i)) {
                    c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0) msg = '0' + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
$4ae998b113e116d3$export$45b10814cc054894 = $4ae998b113e116d3$var$toArray;
function $4ae998b113e116d3$var$toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += $4ae998b113e116d3$var$zero2(msg[i].toString(16));
    return res;
}
$4ae998b113e116d3$export$7ea66e3774a60b67 = $4ae998b113e116d3$var$toHex;
function $4ae998b113e116d3$var$htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
}
$4ae998b113e116d3$export$34a52f00f601f6f1 = $4ae998b113e116d3$var$htonl;
function $4ae998b113e116d3$var$toHex32(msg, endian) {
    var res = '';
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === 'little') w = $4ae998b113e116d3$var$htonl(w);
        res += $4ae998b113e116d3$var$zero8(w.toString(16));
    }
    return res;
}
$4ae998b113e116d3$export$812b0cbd5e8a72ab = $4ae998b113e116d3$var$toHex32;
function $4ae998b113e116d3$var$zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
$4ae998b113e116d3$export$f24f9e11d63bb314 = $4ae998b113e116d3$var$zero2;
function $4ae998b113e116d3$var$zero8(word) {
    if (word.length === 7) return '0' + word;
    else if (word.length === 6) return '00' + word;
    else if (word.length === 5) return '000' + word;
    else if (word.length === 4) return '0000' + word;
    else if (word.length === 3) return '00000' + word;
    else if (word.length === 2) return '000000' + word;
    else if (word.length === 1) return '0000000' + word;
    else return word;
}
$4ae998b113e116d3$export$b71357c7e07ca1f1 = $4ae998b113e116d3$var$zero8;
function $4ae998b113e116d3$var$join32(msg, start, end, endian) {
    var len = end - start;
    $ifIvd(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
$4ae998b113e116d3$export$2e58a4b541fdcbe8 = $4ae998b113e116d3$var$join32;
function $4ae998b113e116d3$var$split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === 'big') {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 255;
            res[k + 2] = m >>> 8 & 255;
            res[k + 3] = m & 255;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 255;
            res[k + 1] = m >>> 8 & 255;
            res[k] = m & 255;
        }
    }
    return res;
}
$4ae998b113e116d3$export$183b950bde9faab8 = $4ae998b113e116d3$var$split32;
function $4ae998b113e116d3$var$rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
$4ae998b113e116d3$export$4785c77169fea59e = $4ae998b113e116d3$var$rotr32;
function $4ae998b113e116d3$var$rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
$4ae998b113e116d3$export$242a185dfcffac5b = $4ae998b113e116d3$var$rotl32;
function $4ae998b113e116d3$var$sum32(a, b) {
    return a + b >>> 0;
}
$4ae998b113e116d3$export$58c04ae0ae31877d = $4ae998b113e116d3$var$sum32;
function $4ae998b113e116d3$var$sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
$4ae998b113e116d3$export$d058ca695f8c6f11 = $4ae998b113e116d3$var$sum32_3;
function $4ae998b113e116d3$var$sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
$4ae998b113e116d3$export$a1efd7fc3e986367 = $4ae998b113e116d3$var$sum32_4;
function $4ae998b113e116d3$var$sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
$4ae998b113e116d3$export$bbfea4a2b5abaab4 = $4ae998b113e116d3$var$sum32_5;
function $4ae998b113e116d3$var$sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
$4ae998b113e116d3$export$97ad4afc7de86152 = $4ae998b113e116d3$var$sum64;
function $4ae998b113e116d3$var$sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
$4ae998b113e116d3$export$ce4673d9a79f6a4b = $4ae998b113e116d3$var$sum64_hi;
function $4ae998b113e116d3$var$sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
$4ae998b113e116d3$export$786cc99fc6eedc0b = $4ae998b113e116d3$var$sum64_lo;
function $4ae998b113e116d3$var$sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
$4ae998b113e116d3$export$45c59b9a1848dd0 = $4ae998b113e116d3$var$sum64_4_hi;
function $4ae998b113e116d3$var$sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
$4ae998b113e116d3$export$50d8f613e76d3034 = $4ae998b113e116d3$var$sum64_4_lo;
function $4ae998b113e116d3$var$sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
$4ae998b113e116d3$export$b8e83683c60ee162 = $4ae998b113e116d3$var$sum64_5_hi;
function $4ae998b113e116d3$var$sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
$4ae998b113e116d3$export$aeeb51790d1bcc4a = $4ae998b113e116d3$var$sum64_5_lo;
function $4ae998b113e116d3$var$rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
$4ae998b113e116d3$export$bb7c616f719ad9c = $4ae998b113e116d3$var$rotr64_hi;
function $4ae998b113e116d3$var$rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$4ae998b113e116d3$export$4d63290824f9d7df = $4ae998b113e116d3$var$rotr64_lo;
function $4ae998b113e116d3$var$shr64_hi(ah, al, num) {
    return ah >>> num;
}
$4ae998b113e116d3$export$2f64ceb90ef28ea1 = $4ae998b113e116d3$var$shr64_hi;
function $4ae998b113e116d3$var$shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$4ae998b113e116d3$export$8d2089d465f6d10d = $4ae998b113e116d3$var$shr64_lo;

});

parcelRequire.register("9JHSZ", function(module, exports) {

$parcel$export(module.exports, "BlockHash", () => $716a5bd99f3fdd6c$export$8687658379b577e6, (v) => $716a5bd99f3fdd6c$export$8687658379b577e6 = v);
var $716a5bd99f3fdd6c$export$8687658379b577e6;
'use strict';

var $6qKXt = parcelRequire("6qKXt");

var $ifIvd = parcelRequire("ifIvd");
function $716a5bd99f3fdd6c$var$BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
$716a5bd99f3fdd6c$export$8687658379b577e6 = $716a5bd99f3fdd6c$var$BlockHash;
$716a5bd99f3fdd6c$var$BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = $6qKXt.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = $6qKXt.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
$716a5bd99f3fdd6c$var$BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    $ifIvd(this.pending === null);
    return this._digest(enc);
};
$716a5bd99f3fdd6c$var$BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === 'big') {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
    } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

});

parcelRequire.register("9rDu1", function(module, exports) {

$parcel$export(module.exports, "sha1", () => $6e054334a1e69067$export$5091bdda49ba90f5, (v) => $6e054334a1e69067$export$5091bdda49ba90f5 = v);
$parcel$export(module.exports, "sha224", () => $6e054334a1e69067$export$97b70509d4e397ea, (v) => $6e054334a1e69067$export$97b70509d4e397ea = v);
$parcel$export(module.exports, "sha256", () => $6e054334a1e69067$export$bced8d2aada2d1c9, (v) => $6e054334a1e69067$export$bced8d2aada2d1c9 = v);
$parcel$export(module.exports, "sha384", () => $6e054334a1e69067$export$612d47d55dedde45, (v) => $6e054334a1e69067$export$612d47d55dedde45 = v);
$parcel$export(module.exports, "sha512", () => $6e054334a1e69067$export$a888d2532e6dc7bb, (v) => $6e054334a1e69067$export$a888d2532e6dc7bb = v);
var $6e054334a1e69067$export$5091bdda49ba90f5;
var $6e054334a1e69067$export$97b70509d4e397ea;
var $6e054334a1e69067$export$bced8d2aada2d1c9;
var $6e054334a1e69067$export$612d47d55dedde45;
var $6e054334a1e69067$export$a888d2532e6dc7bb;
'use strict';

$6e054334a1e69067$export$5091bdda49ba90f5 = (parcelRequire("fhmdO"));

$6e054334a1e69067$export$97b70509d4e397ea = (parcelRequire("h0Gd5"));

$6e054334a1e69067$export$bced8d2aada2d1c9 = (parcelRequire("2mS58"));

$6e054334a1e69067$export$612d47d55dedde45 = (parcelRequire("cIMXx"));

$6e054334a1e69067$export$a888d2532e6dc7bb = (parcelRequire("76rC8"));

});
parcelRequire.register("fhmdO", function(module, exports) {
'use strict';

var $6qKXt = parcelRequire("6qKXt");

var $9JHSZ = parcelRequire("9JHSZ");

var $7sstz = parcelRequire("7sstz");
var $b1f9ae4f6741cb03$var$rotl32 = $6qKXt.rotl32;
var $b1f9ae4f6741cb03$var$sum32 = $6qKXt.sum32;
var $b1f9ae4f6741cb03$var$sum32_5 = $6qKXt.sum32_5;
var $b1f9ae4f6741cb03$var$ft_1 = $7sstz.ft_1;
var $b1f9ae4f6741cb03$var$BlockHash = $9JHSZ.BlockHash;
var $b1f9ae4f6741cb03$var$sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
];
function $b1f9ae4f6741cb03$var$SHA1() {
    if (!(this instanceof $b1f9ae4f6741cb03$var$SHA1)) return new $b1f9ae4f6741cb03$var$SHA1();
    $b1f9ae4f6741cb03$var$BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.W = new Array(80);
}
$6qKXt.inherits($b1f9ae4f6741cb03$var$SHA1, $b1f9ae4f6741cb03$var$BlockHash);
module.exports = $b1f9ae4f6741cb03$var$SHA1;
$b1f9ae4f6741cb03$var$SHA1.blockSize = 512;
$b1f9ae4f6741cb03$var$SHA1.outSize = 160;
$b1f9ae4f6741cb03$var$SHA1.hmacStrength = 80;
$b1f9ae4f6741cb03$var$SHA1.padLength = 64;
$b1f9ae4f6741cb03$var$SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $b1f9ae4f6741cb03$var$rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = $b1f9ae4f6741cb03$var$sum32_5($b1f9ae4f6741cb03$var$rotl32(a, 5), $b1f9ae4f6741cb03$var$ft_1(s, b, c, d), e, W[i], $b1f9ae4f6741cb03$var$sha1_K[s]);
        e = d;
        d = c;
        c = $b1f9ae4f6741cb03$var$rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = $b1f9ae4f6741cb03$var$sum32(this.h[0], a);
    this.h[1] = $b1f9ae4f6741cb03$var$sum32(this.h[1], b);
    this.h[2] = $b1f9ae4f6741cb03$var$sum32(this.h[2], c);
    this.h[3] = $b1f9ae4f6741cb03$var$sum32(this.h[3], d);
    this.h[4] = $b1f9ae4f6741cb03$var$sum32(this.h[4], e);
};
$b1f9ae4f6741cb03$var$SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $6qKXt.toHex32(this.h, 'big');
    else return $6qKXt.split32(this.h, 'big');
};

});
parcelRequire.register("7sstz", function(module, exports) {

$parcel$export(module.exports, "ft_1", () => $56e13ca816e6a8f4$export$5a92649d7ddb9f63, (v) => $56e13ca816e6a8f4$export$5a92649d7ddb9f63 = v);
$parcel$export(module.exports, "ch32", () => $56e13ca816e6a8f4$export$c6d0d020c3a6269, (v) => $56e13ca816e6a8f4$export$c6d0d020c3a6269 = v);
$parcel$export(module.exports, "maj32", () => $56e13ca816e6a8f4$export$eb90c27fca05f956, (v) => $56e13ca816e6a8f4$export$eb90c27fca05f956 = v);
$parcel$export(module.exports, "s0_256", () => $56e13ca816e6a8f4$export$14a4a98e063b1999, (v) => $56e13ca816e6a8f4$export$14a4a98e063b1999 = v);
$parcel$export(module.exports, "s1_256", () => $56e13ca816e6a8f4$export$d20cecfa1564c686, (v) => $56e13ca816e6a8f4$export$d20cecfa1564c686 = v);
$parcel$export(module.exports, "g0_256", () => $56e13ca816e6a8f4$export$44fd472a12fc6db, (v) => $56e13ca816e6a8f4$export$44fd472a12fc6db = v);
$parcel$export(module.exports, "g1_256", () => $56e13ca816e6a8f4$export$1ed238bb6ea1dd47, (v) => $56e13ca816e6a8f4$export$1ed238bb6ea1dd47 = v);
var $56e13ca816e6a8f4$export$5a92649d7ddb9f63;
var $56e13ca816e6a8f4$export$c6d0d020c3a6269;
var $56e13ca816e6a8f4$export$eb90c27fca05f956;
var $56e13ca816e6a8f4$export$cc992891a14496a1;
var $56e13ca816e6a8f4$export$14a4a98e063b1999;
var $56e13ca816e6a8f4$export$d20cecfa1564c686;
var $56e13ca816e6a8f4$export$44fd472a12fc6db;
var $56e13ca816e6a8f4$export$1ed238bb6ea1dd47;
'use strict';

var $6qKXt = parcelRequire("6qKXt");
var $56e13ca816e6a8f4$var$rotr32 = $6qKXt.rotr32;
function $56e13ca816e6a8f4$var$ft_1(s, x, y, z) {
    if (s === 0) return $56e13ca816e6a8f4$var$ch32(x, y, z);
    if (s === 1 || s === 3) return $56e13ca816e6a8f4$var$p32(x, y, z);
    if (s === 2) return $56e13ca816e6a8f4$var$maj32(x, y, z);
}
$56e13ca816e6a8f4$export$5a92649d7ddb9f63 = $56e13ca816e6a8f4$var$ft_1;
function $56e13ca816e6a8f4$var$ch32(x, y, z) {
    return x & y ^ ~x & z;
}
$56e13ca816e6a8f4$export$c6d0d020c3a6269 = $56e13ca816e6a8f4$var$ch32;
function $56e13ca816e6a8f4$var$maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
$56e13ca816e6a8f4$export$eb90c27fca05f956 = $56e13ca816e6a8f4$var$maj32;
function $56e13ca816e6a8f4$var$p32(x, y, z) {
    return x ^ y ^ z;
}
$56e13ca816e6a8f4$export$cc992891a14496a1 = $56e13ca816e6a8f4$var$p32;
function $56e13ca816e6a8f4$var$s0_256(x) {
    return $56e13ca816e6a8f4$var$rotr32(x, 2) ^ $56e13ca816e6a8f4$var$rotr32(x, 13) ^ $56e13ca816e6a8f4$var$rotr32(x, 22);
}
$56e13ca816e6a8f4$export$14a4a98e063b1999 = $56e13ca816e6a8f4$var$s0_256;
function $56e13ca816e6a8f4$var$s1_256(x) {
    return $56e13ca816e6a8f4$var$rotr32(x, 6) ^ $56e13ca816e6a8f4$var$rotr32(x, 11) ^ $56e13ca816e6a8f4$var$rotr32(x, 25);
}
$56e13ca816e6a8f4$export$d20cecfa1564c686 = $56e13ca816e6a8f4$var$s1_256;
function $56e13ca816e6a8f4$var$g0_256(x) {
    return $56e13ca816e6a8f4$var$rotr32(x, 7) ^ $56e13ca816e6a8f4$var$rotr32(x, 18) ^ x >>> 3;
}
$56e13ca816e6a8f4$export$44fd472a12fc6db = $56e13ca816e6a8f4$var$g0_256;
function $56e13ca816e6a8f4$var$g1_256(x) {
    return $56e13ca816e6a8f4$var$rotr32(x, 17) ^ $56e13ca816e6a8f4$var$rotr32(x, 19) ^ x >>> 10;
}
$56e13ca816e6a8f4$export$1ed238bb6ea1dd47 = $56e13ca816e6a8f4$var$g1_256;

});


parcelRequire.register("h0Gd5", function(module, exports) {
'use strict';

var $6qKXt = parcelRequire("6qKXt");

var $2mS58 = parcelRequire("2mS58");
function $c6232dc74858d71c$var$SHA224() {
    if (!(this instanceof $c6232dc74858d71c$var$SHA224)) return new $c6232dc74858d71c$var$SHA224();
    $2mS58.call(this);
    this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
    ];
}
$6qKXt.inherits($c6232dc74858d71c$var$SHA224, $2mS58);
module.exports = $c6232dc74858d71c$var$SHA224;
$c6232dc74858d71c$var$SHA224.blockSize = 512;
$c6232dc74858d71c$var$SHA224.outSize = 224;
$c6232dc74858d71c$var$SHA224.hmacStrength = 192;
$c6232dc74858d71c$var$SHA224.padLength = 64;
$c6232dc74858d71c$var$SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex') return $6qKXt.toHex32(this.h.slice(0, 7), 'big');
    else return $6qKXt.split32(this.h.slice(0, 7), 'big');
};

});
parcelRequire.register("2mS58", function(module, exports) {
'use strict';

var $6qKXt = parcelRequire("6qKXt");

var $9JHSZ = parcelRequire("9JHSZ");

var $7sstz = parcelRequire("7sstz");

var $ifIvd = parcelRequire("ifIvd");
var $1b97966301d8e036$var$sum32 = $6qKXt.sum32;
var $1b97966301d8e036$var$sum32_4 = $6qKXt.sum32_4;
var $1b97966301d8e036$var$sum32_5 = $6qKXt.sum32_5;
var $1b97966301d8e036$var$ch32 = $7sstz.ch32;
var $1b97966301d8e036$var$maj32 = $7sstz.maj32;
var $1b97966301d8e036$var$s0_256 = $7sstz.s0_256;
var $1b97966301d8e036$var$s1_256 = $7sstz.s1_256;
var $1b97966301d8e036$var$g0_256 = $7sstz.g0_256;
var $1b97966301d8e036$var$g1_256 = $7sstz.g1_256;
var $1b97966301d8e036$var$BlockHash = $9JHSZ.BlockHash;
var $1b97966301d8e036$var$sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
function $1b97966301d8e036$var$SHA256() {
    if (!(this instanceof $1b97966301d8e036$var$SHA256)) return new $1b97966301d8e036$var$SHA256();
    $1b97966301d8e036$var$BlockHash.call(this);
    this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
    ];
    this.k = $1b97966301d8e036$var$sha256_K;
    this.W = new Array(64);
}
$6qKXt.inherits($1b97966301d8e036$var$SHA256, $1b97966301d8e036$var$BlockHash);
module.exports = $1b97966301d8e036$var$SHA256;
$1b97966301d8e036$var$SHA256.blockSize = 512;
$1b97966301d8e036$var$SHA256.outSize = 256;
$1b97966301d8e036$var$SHA256.hmacStrength = 192;
$1b97966301d8e036$var$SHA256.padLength = 64;
$1b97966301d8e036$var$SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $1b97966301d8e036$var$sum32_4($1b97966301d8e036$var$g1_256(W[i - 2]), W[i - 7], $1b97966301d8e036$var$g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    $ifIvd(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = $1b97966301d8e036$var$sum32_5(h, $1b97966301d8e036$var$s1_256(e), $1b97966301d8e036$var$ch32(e, f, g), this.k[i], W[i]);
        var T2 = $1b97966301d8e036$var$sum32($1b97966301d8e036$var$s0_256(a), $1b97966301d8e036$var$maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = $1b97966301d8e036$var$sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = $1b97966301d8e036$var$sum32(T1, T2);
    }
    this.h[0] = $1b97966301d8e036$var$sum32(this.h[0], a);
    this.h[1] = $1b97966301d8e036$var$sum32(this.h[1], b);
    this.h[2] = $1b97966301d8e036$var$sum32(this.h[2], c);
    this.h[3] = $1b97966301d8e036$var$sum32(this.h[3], d);
    this.h[4] = $1b97966301d8e036$var$sum32(this.h[4], e);
    this.h[5] = $1b97966301d8e036$var$sum32(this.h[5], f);
    this.h[6] = $1b97966301d8e036$var$sum32(this.h[6], g);
    this.h[7] = $1b97966301d8e036$var$sum32(this.h[7], h);
};
$1b97966301d8e036$var$SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $6qKXt.toHex32(this.h, 'big');
    else return $6qKXt.split32(this.h, 'big');
};

});


parcelRequire.register("cIMXx", function(module, exports) {
'use strict';

var $6qKXt = parcelRequire("6qKXt");

var $76rC8 = parcelRequire("76rC8");
function $942f9269db129a91$var$SHA384() {
    if (!(this instanceof $942f9269db129a91$var$SHA384)) return new $942f9269db129a91$var$SHA384();
    $76rC8.call(this);
    this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
    ];
}
$6qKXt.inherits($942f9269db129a91$var$SHA384, $76rC8);
module.exports = $942f9269db129a91$var$SHA384;
$942f9269db129a91$var$SHA384.blockSize = 1024;
$942f9269db129a91$var$SHA384.outSize = 384;
$942f9269db129a91$var$SHA384.hmacStrength = 192;
$942f9269db129a91$var$SHA384.padLength = 128;
$942f9269db129a91$var$SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $6qKXt.toHex32(this.h.slice(0, 12), 'big');
    else return $6qKXt.split32(this.h.slice(0, 12), 'big');
};

});
parcelRequire.register("76rC8", function(module, exports) {
'use strict';

var $6qKXt = parcelRequire("6qKXt");

var $9JHSZ = parcelRequire("9JHSZ");

var $ifIvd = parcelRequire("ifIvd");
var $52be8384a612a0d1$var$rotr64_hi = $6qKXt.rotr64_hi;
var $52be8384a612a0d1$var$rotr64_lo = $6qKXt.rotr64_lo;
var $52be8384a612a0d1$var$shr64_hi = $6qKXt.shr64_hi;
var $52be8384a612a0d1$var$shr64_lo = $6qKXt.shr64_lo;
var $52be8384a612a0d1$var$sum64 = $6qKXt.sum64;
var $52be8384a612a0d1$var$sum64_hi = $6qKXt.sum64_hi;
var $52be8384a612a0d1$var$sum64_lo = $6qKXt.sum64_lo;
var $52be8384a612a0d1$var$sum64_4_hi = $6qKXt.sum64_4_hi;
var $52be8384a612a0d1$var$sum64_4_lo = $6qKXt.sum64_4_lo;
var $52be8384a612a0d1$var$sum64_5_hi = $6qKXt.sum64_5_hi;
var $52be8384a612a0d1$var$sum64_5_lo = $6qKXt.sum64_5_lo;
var $52be8384a612a0d1$var$BlockHash = $9JHSZ.BlockHash;
var $52be8384a612a0d1$var$sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
function $52be8384a612a0d1$var$SHA512() {
    if (!(this instanceof $52be8384a612a0d1$var$SHA512)) return new $52be8384a612a0d1$var$SHA512();
    $52be8384a612a0d1$var$BlockHash.call(this);
    this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
    ];
    this.k = $52be8384a612a0d1$var$sha512_K;
    this.W = new Array(160);
}
$6qKXt.inherits($52be8384a612a0d1$var$SHA512, $52be8384a612a0d1$var$BlockHash);
module.exports = $52be8384a612a0d1$var$SHA512;
$52be8384a612a0d1$var$SHA512.blockSize = 1024;
$52be8384a612a0d1$var$SHA512.outSize = 512;
$52be8384a612a0d1$var$SHA512.hmacStrength = 192;
$52be8384a612a0d1$var$SHA512.padLength = 128;
$52be8384a612a0d1$var$SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = $52be8384a612a0d1$var$g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = $52be8384a612a0d1$var$g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = $52be8384a612a0d1$var$g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = $52be8384a612a0d1$var$g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = $52be8384a612a0d1$var$sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = $52be8384a612a0d1$var$sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
$52be8384a612a0d1$var$SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    $ifIvd(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = $52be8384a612a0d1$var$s1_512_hi(eh, el);
        var c1_lo = $52be8384a612a0d1$var$s1_512_lo(eh, el);
        var c2_hi = $52be8384a612a0d1$var$ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = $52be8384a612a0d1$var$ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = $52be8384a612a0d1$var$sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = $52be8384a612a0d1$var$sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = $52be8384a612a0d1$var$s0_512_hi(ah, al);
        c0_lo = $52be8384a612a0d1$var$s0_512_lo(ah, al);
        c1_hi = $52be8384a612a0d1$var$maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = $52be8384a612a0d1$var$maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = $52be8384a612a0d1$var$sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = $52be8384a612a0d1$var$sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = $52be8384a612a0d1$var$sum64_hi(dh, dl, T1_hi, T1_lo);
        el = $52be8384a612a0d1$var$sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = $52be8384a612a0d1$var$sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = $52be8384a612a0d1$var$sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    $52be8384a612a0d1$var$sum64(this.h, 0, ah, al);
    $52be8384a612a0d1$var$sum64(this.h, 2, bh, bl);
    $52be8384a612a0d1$var$sum64(this.h, 4, ch, cl);
    $52be8384a612a0d1$var$sum64(this.h, 6, dh, dl);
    $52be8384a612a0d1$var$sum64(this.h, 8, eh, el);
    $52be8384a612a0d1$var$sum64(this.h, 10, fh, fl);
    $52be8384a612a0d1$var$sum64(this.h, 12, gh, gl);
    $52be8384a612a0d1$var$sum64(this.h, 14, hh, hl);
};
$52be8384a612a0d1$var$SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $6qKXt.toHex32(this.h, 'big');
    else return $6qKXt.split32(this.h, 'big');
};
function $52be8384a612a0d1$var$ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$s0_512_hi(xh, xl) {
    var c0_hi = $52be8384a612a0d1$var$rotr64_hi(xh, xl, 28);
    var c1_hi = $52be8384a612a0d1$var$rotr64_hi(xl, xh, 2); // 34
    var c2_hi = $52be8384a612a0d1$var$rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$s0_512_lo(xh, xl) {
    var c0_lo = $52be8384a612a0d1$var$rotr64_lo(xh, xl, 28);
    var c1_lo = $52be8384a612a0d1$var$rotr64_lo(xl, xh, 2); // 34
    var c2_lo = $52be8384a612a0d1$var$rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$s1_512_hi(xh, xl) {
    var c0_hi = $52be8384a612a0d1$var$rotr64_hi(xh, xl, 14);
    var c1_hi = $52be8384a612a0d1$var$rotr64_hi(xh, xl, 18);
    var c2_hi = $52be8384a612a0d1$var$rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$s1_512_lo(xh, xl) {
    var c0_lo = $52be8384a612a0d1$var$rotr64_lo(xh, xl, 14);
    var c1_lo = $52be8384a612a0d1$var$rotr64_lo(xh, xl, 18);
    var c2_lo = $52be8384a612a0d1$var$rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$g0_512_hi(xh, xl) {
    var c0_hi = $52be8384a612a0d1$var$rotr64_hi(xh, xl, 1);
    var c1_hi = $52be8384a612a0d1$var$rotr64_hi(xh, xl, 8);
    var c2_hi = $52be8384a612a0d1$var$shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$g0_512_lo(xh, xl) {
    var c0_lo = $52be8384a612a0d1$var$rotr64_lo(xh, xl, 1);
    var c1_lo = $52be8384a612a0d1$var$rotr64_lo(xh, xl, 8);
    var c2_lo = $52be8384a612a0d1$var$shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$g1_512_hi(xh, xl) {
    var c0_hi = $52be8384a612a0d1$var$rotr64_hi(xh, xl, 19);
    var c1_hi = $52be8384a612a0d1$var$rotr64_hi(xl, xh, 29); // 61
    var c2_hi = $52be8384a612a0d1$var$shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function $52be8384a612a0d1$var$g1_512_lo(xh, xl) {
    var c0_lo = $52be8384a612a0d1$var$rotr64_lo(xh, xl, 19);
    var c1_lo = $52be8384a612a0d1$var$rotr64_lo(xl, xh, 29); // 61
    var c2_lo = $52be8384a612a0d1$var$shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}

});



parcelRequire.register("ZbHJP", function(module, exports) {

$parcel$export(module.exports, "ripemd160", () => $0b7ec6e188d23b84$export$d1cea0ee4e3f0d3e, (v) => $0b7ec6e188d23b84$export$d1cea0ee4e3f0d3e = v);
var $0b7ec6e188d23b84$export$d1cea0ee4e3f0d3e;
'use strict';

var $6qKXt = parcelRequire("6qKXt");

var $9JHSZ = parcelRequire("9JHSZ");
var $0b7ec6e188d23b84$var$rotl32 = $6qKXt.rotl32;
var $0b7ec6e188d23b84$var$sum32 = $6qKXt.sum32;
var $0b7ec6e188d23b84$var$sum32_3 = $6qKXt.sum32_3;
var $0b7ec6e188d23b84$var$sum32_4 = $6qKXt.sum32_4;
var $0b7ec6e188d23b84$var$BlockHash = $9JHSZ.BlockHash;
function $0b7ec6e188d23b84$var$RIPEMD160() {
    if (!(this instanceof $0b7ec6e188d23b84$var$RIPEMD160)) return new $0b7ec6e188d23b84$var$RIPEMD160();
    $0b7ec6e188d23b84$var$BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.endian = 'little';
}
$6qKXt.inherits($0b7ec6e188d23b84$var$RIPEMD160, $0b7ec6e188d23b84$var$BlockHash);
$0b7ec6e188d23b84$export$d1cea0ee4e3f0d3e = $0b7ec6e188d23b84$var$RIPEMD160;
$0b7ec6e188d23b84$var$RIPEMD160.blockSize = 512;
$0b7ec6e188d23b84$var$RIPEMD160.outSize = 160;
$0b7ec6e188d23b84$var$RIPEMD160.hmacStrength = 192;
$0b7ec6e188d23b84$var$RIPEMD160.padLength = 64;
$0b7ec6e188d23b84$var$RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = $0b7ec6e188d23b84$var$sum32($0b7ec6e188d23b84$var$rotl32($0b7ec6e188d23b84$var$sum32_4(A, $0b7ec6e188d23b84$var$f(j, B, C, D), msg[$0b7ec6e188d23b84$var$r[j] + start], $0b7ec6e188d23b84$var$K(j)), $0b7ec6e188d23b84$var$s[j]), E);
        A = E;
        E = D;
        D = $0b7ec6e188d23b84$var$rotl32(C, 10);
        C = B;
        B = T;
        T = $0b7ec6e188d23b84$var$sum32($0b7ec6e188d23b84$var$rotl32($0b7ec6e188d23b84$var$sum32_4(Ah, $0b7ec6e188d23b84$var$f(79 - j, Bh, Ch, Dh), msg[$0b7ec6e188d23b84$var$rh[j] + start], $0b7ec6e188d23b84$var$Kh(j)), $0b7ec6e188d23b84$var$sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = $0b7ec6e188d23b84$var$rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = $0b7ec6e188d23b84$var$sum32_3(this.h[1], C, Dh);
    this.h[1] = $0b7ec6e188d23b84$var$sum32_3(this.h[2], D, Eh);
    this.h[2] = $0b7ec6e188d23b84$var$sum32_3(this.h[3], E, Ah);
    this.h[3] = $0b7ec6e188d23b84$var$sum32_3(this.h[4], A, Bh);
    this.h[4] = $0b7ec6e188d23b84$var$sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
$0b7ec6e188d23b84$var$RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $6qKXt.toHex32(this.h, 'little');
    else return $6qKXt.split32(this.h, 'little');
};
function $0b7ec6e188d23b84$var$f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function $0b7ec6e188d23b84$var$K(j) {
    if (j <= 15) return 0;
    else if (j <= 31) return 1518500249;
    else if (j <= 47) return 1859775393;
    else if (j <= 63) return 2400959708;
    else return 2840853838;
}
function $0b7ec6e188d23b84$var$Kh(j) {
    if (j <= 15) return 1352829926;
    else if (j <= 31) return 1548603684;
    else if (j <= 47) return 1836072691;
    else if (j <= 63) return 2053994217;
    else return 0;
}
var $0b7ec6e188d23b84$var$r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $0b7ec6e188d23b84$var$rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $0b7ec6e188d23b84$var$s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $0b7ec6e188d23b84$var$sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

});

parcelRequire.register("gxlhJ", function(module, exports) {
'use strict';

var $6qKXt = parcelRequire("6qKXt");

var $ifIvd = parcelRequire("ifIvd");
function $c0a03d2e4bbaa481$var$Hmac(hash, key, enc) {
    if (!(this instanceof $c0a03d2e4bbaa481$var$Hmac)) return new $c0a03d2e4bbaa481$var$Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init($6qKXt.toArray(key, enc));
}
module.exports = $c0a03d2e4bbaa481$var$Hmac;
$c0a03d2e4bbaa481$var$Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    $ifIvd(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 54;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 106;
    this.outer = new this.Hash().update(key);
};
$c0a03d2e4bbaa481$var$Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
$c0a03d2e4bbaa481$var$Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

});


parcelRequire.register("irp0L", function(module, exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821', 
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf', 
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695', 
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9', 
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36', 
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f', 
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999', 
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09', 
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d', 
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088', 
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d', 
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8', 
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a', 
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453', 
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160', 
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0', 
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6', 
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589', 
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17', 
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda', 
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd', 
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2', 
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6', 
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f', 
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01', 
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3', 
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f', 
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7', 
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78', 
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1', 
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150', 
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82', 
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc', 
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b', 
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51', 
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45', 
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120', 
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84', 
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d', 
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d', 
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8', 
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8', 
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac', 
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f', 
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962', 
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907', 
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec', 
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d', 
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414', 
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd', 
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0', 
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811', 
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1', 
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c', 
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73', 
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd', 
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405', 
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589', 
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e', 
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27', 
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1', 
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482', 
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945', 
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573', 
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82', 
            ], 
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672', 
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6', 
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da', 
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37', 
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b', 
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81', 
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58', 
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77', 
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a', 
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c', 
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67', 
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402', 
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55', 
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482', 
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82', 
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396', 
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49', 
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf', 
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a', 
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7', 
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933', 
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a', 
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6', 
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37', 
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e', 
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6', 
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476', 
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40', 
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61', 
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683', 
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5', 
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b', 
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417', 
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868', 
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a', 
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6', 
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996', 
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e', 
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d', 
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2', 
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e', 
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437', 
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311', 
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4', 
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575', 
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d', 
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d', 
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629', 
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06', 
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374', 
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee', 
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1', 
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b', 
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661', 
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6', 
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e', 
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d', 
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc', 
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4', 
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c', 
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b', 
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913', 
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154', 
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865', 
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc', 
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224', 
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e', 
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6', 
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511', 
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b', 
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2', 
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c', 
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3', 
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d', 
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700', 
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4', 
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196', 
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4', 
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257', 
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13', 
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096', 
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38', 
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f', 
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448', 
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a', 
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4', 
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437', 
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7', 
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d', 
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a', 
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54', 
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77', 
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517', 
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10', 
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125', 
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e', 
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1', 
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2', 
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423', 
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8', 
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758', 
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375', 
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d', 
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec', 
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0', 
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c', 
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4', 
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f', 
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649', 
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826', 
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5', 
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87', 
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b', 
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc', 
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c', 
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f', 
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a', 
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46', 
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f', 
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03', 
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08', 
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8', 
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373', 
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3', 
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8', 
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1', 
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9', 
            ], 
        ]
    }
};

});


parcelRequire.register("aTGss", function(module, exports) {
'use strict';

var $e7GsD = parcelRequire("e7GsD");

var $4UO4J = parcelRequire("4UO4J");

var $iaL3O = parcelRequire("iaL3O");

var $bpaeg = parcelRequire("bpaeg");

var $drx5y = parcelRequire("drx5y");
var $7eeff9b877f33129$var$assert = $iaL3O.assert;

var $ic6aG = parcelRequire("ic6aG");

var $1esiu = parcelRequire("1esiu");
function $7eeff9b877f33129$var$EC(options) {
    if (!(this instanceof $7eeff9b877f33129$var$EC)) return new $7eeff9b877f33129$var$EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        $7eeff9b877f33129$var$assert(Object.prototype.hasOwnProperty.call($bpaeg, options), 'Unknown curve ' + options);
        options = $bpaeg[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof $bpaeg.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = $7eeff9b877f33129$var$EC;
$7eeff9b877f33129$var$EC.prototype.keyPair = function keyPair(options) {
    return new $ic6aG(this, options);
};
$7eeff9b877f33129$var$EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return $ic6aG.fromPrivate(this, priv, enc);
};
$7eeff9b877f33129$var$EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return $ic6aG.fromPublic(this, pub, enc);
};
$7eeff9b877f33129$var$EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {
    };
    // Instantiate Hmac_DRBG
    var drbg = new $4UO4J({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || $drx5y(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new $e7GsD(2));
    for(;;){
        var priv = new $e7GsD(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
$7eeff9b877f33129$var$EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
$7eeff9b877f33129$var$EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options) options = {
    };
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new $e7GsD(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Instantiate Hmac_DRBG
    var drbg = new $4UO4J({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new $e7GsD(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new $e7GsD(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new $1esiu({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
$7eeff9b877f33129$var$EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new $e7GsD(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new $1esiu(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
$7eeff9b877f33129$var$EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    $7eeff9b877f33129$var$assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new $1esiu(signature, enc);
    var n = this.n;
    var e = new $e7GsD(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
$7eeff9b877f33129$var$EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new $1esiu(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

});
parcelRequire.register("4UO4J", function(module, exports) {
'use strict';

var $dR9EK = parcelRequire("dR9EK");

var $k5OMf = parcelRequire("k5OMf");

var $ifIvd = parcelRequire("ifIvd");
function $39433c4d3536a51f$var$HmacDRBG(options) {
    if (!(this instanceof $39433c4d3536a51f$var$HmacDRBG)) return new $39433c4d3536a51f$var$HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = $k5OMf.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = $k5OMf.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = $k5OMf.toArray(options.pers, options.persEnc || 'hex');
    $ifIvd(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = $39433c4d3536a51f$var$HmacDRBG;
$39433c4d3536a51f$var$HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0;
        this.V[i] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656; // 2^48
};
$39433c4d3536a51f$var$HmacDRBG.prototype._hmac = function hmac() {
    return new $dR9EK.hmac(this.hash, this.K);
};
$39433c4d3536a51f$var$HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        1
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
$39433c4d3536a51f$var$HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = $k5OMf.toArray(entropy, entropyEnc);
    add = $k5OMf.toArray(add, addEnc);
    $ifIvd(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
$39433c4d3536a51f$var$HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = $k5OMf.toArray(add, addEnc || 'hex');
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return $k5OMf.encode(res, enc);
};

});

parcelRequire.register("ic6aG", function(module, exports) {
'use strict';

var $e7GsD = parcelRequire("e7GsD");

var $iaL3O = parcelRequire("iaL3O");
var $d3ee227b1973cb1a$var$assert = $iaL3O.assert;
function $d3ee227b1973cb1a$var$KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = $d3ee227b1973cb1a$var$KeyPair;
$d3ee227b1973cb1a$var$KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof $d3ee227b1973cb1a$var$KeyPair) return pub;
    return new $d3ee227b1973cb1a$var$KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
$d3ee227b1973cb1a$var$KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof $d3ee227b1973cb1a$var$KeyPair) return priv;
    return new $d3ee227b1973cb1a$var$KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
$d3ee227b1973cb1a$var$KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: 'Invalid public key'
    };
    if (!pub.validate()) return {
        result: false,
        reason: 'Public key is not a point'
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: 'Public key * N != O'
    };
    return {
        result: true,
        reason: null
    };
};
$d3ee227b1973cb1a$var$KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
$d3ee227b1973cb1a$var$KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex') return this.priv.toString(16, 2);
    else return this.priv;
};
$d3ee227b1973cb1a$var$KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new $e7GsD(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
$d3ee227b1973cb1a$var$KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') $d3ee227b1973cb1a$var$assert(key.x, 'Need x coordinate');
        else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') $d3ee227b1973cb1a$var$assert(key.x && key.y, 'Need both x and y coordinate');
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
$d3ee227b1973cb1a$var$KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) $d3ee227b1973cb1a$var$assert(pub.validate(), 'public point not validated');
    return pub.mul(this.priv).getX();
};
// ECDSA
$d3ee227b1973cb1a$var$KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
$d3ee227b1973cb1a$var$KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
$d3ee227b1973cb1a$var$KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

});

parcelRequire.register("1esiu", function(module, exports) {
'use strict';

var $e7GsD = parcelRequire("e7GsD");

var $iaL3O = parcelRequire("iaL3O");
var $0e5d0c825a01c19a$var$assert = $iaL3O.assert;
function $0e5d0c825a01c19a$var$Signature(options, enc) {
    if (options instanceof $0e5d0c825a01c19a$var$Signature) return options;
    if (this._importDER(options, enc)) return;
    $0e5d0c825a01c19a$var$assert(options.r && options.s, 'Signature without r or s');
    this.r = new $e7GsD(options.r, 16);
    this.s = new $e7GsD(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = $0e5d0c825a01c19a$var$Signature;
function $0e5d0c825a01c19a$var$Position() {
    this.place = 0;
}
function $0e5d0c825a01c19a$var$getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) return initial;
    var octetLen = initial & 15;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 127) return false;
    p.place = off;
    return val;
}
function $0e5d0c825a01c19a$var$rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 128) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
$0e5d0c825a01c19a$var$Signature.prototype._importDER = function _importDER(data, enc) {
    data = $iaL3O.toArray(data, enc);
    var p = new $0e5d0c825a01c19a$var$Position();
    if (data[p.place++] !== 48) return false;
    var len = $0e5d0c825a01c19a$var$getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 2) return false;
    var rlen = $0e5d0c825a01c19a$var$getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 2) return false;
    var slen = $0e5d0c825a01c19a$var$getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 128) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 128) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new $e7GsD(r);
    this.s = new $e7GsD(s);
    this.recoveryParam = null;
    return true;
};
function $0e5d0c825a01c19a$var$constructLength(arr, len) {
    if (len < 128) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while(--octets)arr.push(len >>> (octets << 3) & 255);
    arr.push(len);
}
$0e5d0c825a01c19a$var$Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 128) s = [
        0
    ].concat(s);
    r = $0e5d0c825a01c19a$var$rmPadding(r);
    s = $0e5d0c825a01c19a$var$rmPadding(s);
    while(!s[0] && !(s[1] & 128))s = s.slice(1);
    var arr = [
        2
    ];
    $0e5d0c825a01c19a$var$constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(2);
    $0e5d0c825a01c19a$var$constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        48
    ];
    $0e5d0c825a01c19a$var$constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return $iaL3O.encode(res, enc);
};

});


parcelRequire.register("2SVWO", function(module, exports) {
'use strict';

var $dR9EK = parcelRequire("dR9EK");

var $bpaeg = parcelRequire("bpaeg");

var $iaL3O = parcelRequire("iaL3O");
var $219d93153453676d$var$assert = $iaL3O.assert;
var $219d93153453676d$var$parseBytes = $iaL3O.parseBytes;

var $jFujH = parcelRequire("jFujH");

var $i4nc1 = parcelRequire("i4nc1");
function $219d93153453676d$var$EDDSA(curve) {
    $219d93153453676d$var$assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof $219d93153453676d$var$EDDSA)) return new $219d93153453676d$var$EDDSA(curve);
    curve = $bpaeg[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = $dR9EK.sha512;
}
module.exports = $219d93153453676d$var$EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ $219d93153453676d$var$EDDSA.prototype.sign = function sign(message, secret) {
    message = $219d93153453676d$var$parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ $219d93153453676d$var$EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = $219d93153453676d$var$parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
$219d93153453676d$var$EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return $iaL3O.intFromLE(hash.digest()).umod(this.curve.n);
};
$219d93153453676d$var$EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return $jFujH.fromPublic(this, pub);
};
$219d93153453676d$var$EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return $jFujH.fromSecret(this, secret);
};
$219d93153453676d$var$EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof $i4nc1) return sig;
    return new $i4nc1(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ $219d93153453676d$var$EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
};
$219d93153453676d$var$EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = $iaL3O.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y = $iaL3O.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
$219d93153453676d$var$EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
$219d93153453676d$var$EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return $iaL3O.intFromLE(bytes);
};
$219d93153453676d$var$EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

});
parcelRequire.register("jFujH", function(module, exports) {
'use strict';

var $iaL3O = parcelRequire("iaL3O");
var $e5195ce8f7a6e36f$var$assert = $iaL3O.assert;
var $e5195ce8f7a6e36f$var$parseBytes = $iaL3O.parseBytes;
var $e5195ce8f7a6e36f$var$cachedProperty = $iaL3O.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function $e5195ce8f7a6e36f$var$KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = $e5195ce8f7a6e36f$var$parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = $e5195ce8f7a6e36f$var$parseBytes(params.pub);
}
$e5195ce8f7a6e36f$var$KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof $e5195ce8f7a6e36f$var$KeyPair) return pub;
    return new $e5195ce8f7a6e36f$var$KeyPair(eddsa, {
        pub: pub
    });
};
$e5195ce8f7a6e36f$var$KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof $e5195ce8f7a6e36f$var$KeyPair) return secret;
    return new $e5195ce8f7a6e36f$var$KeyPair(eddsa, {
        secret: secret
    });
};
$e5195ce8f7a6e36f$var$KeyPair.prototype.secret = function secret() {
    return this._secret;
};
$e5195ce8f7a6e36f$var$cachedProperty($e5195ce8f7a6e36f$var$KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
$e5195ce8f7a6e36f$var$cachedProperty($e5195ce8f7a6e36f$var$KeyPair, 'pub', function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
$e5195ce8f7a6e36f$var$cachedProperty($e5195ce8f7a6e36f$var$KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
$e5195ce8f7a6e36f$var$cachedProperty($e5195ce8f7a6e36f$var$KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
$e5195ce8f7a6e36f$var$cachedProperty($e5195ce8f7a6e36f$var$KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
$e5195ce8f7a6e36f$var$cachedProperty($e5195ce8f7a6e36f$var$KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
$e5195ce8f7a6e36f$var$KeyPair.prototype.sign = function sign(message) {
    $e5195ce8f7a6e36f$var$assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
$e5195ce8f7a6e36f$var$KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
$e5195ce8f7a6e36f$var$KeyPair.prototype.getSecret = function getSecret(enc) {
    $e5195ce8f7a6e36f$var$assert(this._secret, 'KeyPair is public only');
    return $iaL3O.encode(this.secret(), enc);
};
$e5195ce8f7a6e36f$var$KeyPair.prototype.getPublic = function getPublic(enc) {
    return $iaL3O.encode(this.pubBytes(), enc);
};
module.exports = $e5195ce8f7a6e36f$var$KeyPair;

});

parcelRequire.register("i4nc1", function(module, exports) {
'use strict';

var $e7GsD = parcelRequire("e7GsD");

var $iaL3O = parcelRequire("iaL3O");
var $d27a97596d13fa4a$var$assert = $iaL3O.assert;
var $d27a97596d13fa4a$var$cachedProperty = $iaL3O.cachedProperty;
var $d27a97596d13fa4a$var$parseBytes = $iaL3O.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function $d27a97596d13fa4a$var$Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object') sig = $d27a97596d13fa4a$var$parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    $d27a97596d13fa4a$var$assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof $e7GsD) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
$d27a97596d13fa4a$var$cachedProperty($d27a97596d13fa4a$var$Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
$d27a97596d13fa4a$var$cachedProperty($d27a97596d13fa4a$var$Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
$d27a97596d13fa4a$var$cachedProperty($d27a97596d13fa4a$var$Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
$d27a97596d13fa4a$var$cachedProperty($d27a97596d13fa4a$var$Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
$d27a97596d13fa4a$var$Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
$d27a97596d13fa4a$var$Signature.prototype.toHex = function toHex() {
    return $iaL3O.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = $d27a97596d13fa4a$var$Signature;

});



parcelRequire.register("02waS", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("cacXd")).Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})("object" === 'undefined' || module, this);

});

parcelRequire.register("1egYR", function(module, exports) {

var $49NKG = parcelRequire("49NKG");

var $6oPq0 = parcelRequire("6oPq0");

var $hw4J0 = parcelRequire("hw4J0");

var $aRUH2 = parcelRequire("aRUH2");

var $7EEeb = parcelRequire("7EEeb");

var $ahmAR = parcelRequire("ahmAR");
var $0e54453a2d683dc4$require$Buffer = $ahmAR.Buffer;
module.exports = $0e54453a2d683dc4$var$parseKeys;
function $0e54453a2d683dc4$var$parseKeys(buffer) {
    var password;
    if (typeof buffer === 'object' && !$0e54453a2d683dc4$require$Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === 'string') buffer = $0e54453a2d683dc4$require$Buffer.from(buffer);
    var stripped = $hw4J0(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case 'CERTIFICATE':
            ndata = $49NKG.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case 'PUBLIC KEY':
            if (!ndata) ndata = $49NKG.PublicKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return $49NKG.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
                case '1.2.840.10045.2.1':
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: 'ec',
                        data: ndata
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.pub_key = $49NKG.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
                    return {
                        type: 'dsa',
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
            data = $49NKG.EncryptedPrivateKey.decode(data, 'der');
            data = $0e54453a2d683dc4$var$decrypt(data, password);
        // falls through
        case 'PRIVATE KEY':
            ndata = $49NKG.PrivateKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return $49NKG.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
                case '1.2.840.10045.2.1':
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: $49NKG.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.priv_key = $49NKG.DSAparam.decode(ndata.subjectPrivateKey, 'der');
                    return {
                        type: 'dsa',
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
            return $49NKG.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
            return $49NKG.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
            return {
                type: 'dsa',
                params: $49NKG.DSAPrivateKey.decode(data, 'der')
            };
        case 'EC PRIVATE KEY':
            data = $49NKG.ECPrivateKey.decode(data, 'der');
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error('unknown key type ' + type);
    }
}
$0e54453a2d683dc4$var$parseKeys.signature = $49NKG.signature;
function $0e54453a2d683dc4$var$decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = $6oPq0[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = $7EEeb.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
    var cipher = $aRUH2.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return $0e54453a2d683dc4$require$Buffer.concat(out);
}

});
parcelRequire.register("49NKG", function(module, exports) {

$parcel$export(module.exports, "certificate", () => $306e985fbf05ff90$export$c98397a6eb8d0678, (v) => $306e985fbf05ff90$export$c98397a6eb8d0678 = v);
$parcel$export(module.exports, "RSAPrivateKey", () => $306e985fbf05ff90$export$f4aab6816f64fa6b, (v) => $306e985fbf05ff90$export$f4aab6816f64fa6b = v);
$parcel$export(module.exports, "RSAPublicKey", () => $306e985fbf05ff90$export$4471f5c65d097c11, (v) => $306e985fbf05ff90$export$4471f5c65d097c11 = v);
$parcel$export(module.exports, "PublicKey", () => $306e985fbf05ff90$export$ca8b6604d6ce14de, (v) => $306e985fbf05ff90$export$ca8b6604d6ce14de = v);
$parcel$export(module.exports, "PrivateKey", () => $306e985fbf05ff90$export$8f54525b330fd87b, (v) => $306e985fbf05ff90$export$8f54525b330fd87b = v);
$parcel$export(module.exports, "EncryptedPrivateKey", () => $306e985fbf05ff90$export$23cd2842b44ca3e7, (v) => $306e985fbf05ff90$export$23cd2842b44ca3e7 = v);
$parcel$export(module.exports, "DSAPrivateKey", () => $306e985fbf05ff90$export$245c9aaa9f5ce4ce, (v) => $306e985fbf05ff90$export$245c9aaa9f5ce4ce = v);
$parcel$export(module.exports, "DSAparam", () => $306e985fbf05ff90$export$8ad762e3e6399afe, (v) => $306e985fbf05ff90$export$8ad762e3e6399afe = v);
$parcel$export(module.exports, "ECPrivateKey", () => $306e985fbf05ff90$export$32ef6f92e22c6ab0, (v) => $306e985fbf05ff90$export$32ef6f92e22c6ab0 = v);
$parcel$export(module.exports, "signature", () => $306e985fbf05ff90$export$c9cd164b539ebb63, (v) => $306e985fbf05ff90$export$c9cd164b539ebb63 = v);
var $306e985fbf05ff90$export$c98397a6eb8d0678;
var $306e985fbf05ff90$export$f4aab6816f64fa6b;
var $306e985fbf05ff90$export$4471f5c65d097c11;
var $306e985fbf05ff90$export$ca8b6604d6ce14de;
var $306e985fbf05ff90$export$8f54525b330fd87b;
var $306e985fbf05ff90$export$23cd2842b44ca3e7;
var $306e985fbf05ff90$export$245c9aaa9f5ce4ce;
var $306e985fbf05ff90$export$8ad762e3e6399afe;
var $306e985fbf05ff90$export$32ef6f92e22c6ab0;
var $306e985fbf05ff90$export$c9cd164b539ebb63;
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict';

var $9sLp8 = parcelRequire("9sLp8");

$306e985fbf05ff90$export$c98397a6eb8d0678 = (parcelRequire("bBAFq"));
var $306e985fbf05ff90$var$RSAPrivateKey = $9sLp8.define('RSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
$306e985fbf05ff90$export$f4aab6816f64fa6b = $306e985fbf05ff90$var$RSAPrivateKey;
var $306e985fbf05ff90$var$RSAPublicKey = $9sLp8.define('RSAPublicKey', function() {
    this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
$306e985fbf05ff90$export$4471f5c65d097c11 = $306e985fbf05ff90$var$RSAPublicKey;
var $306e985fbf05ff90$var$PublicKey = $9sLp8.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use($306e985fbf05ff90$var$AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
$306e985fbf05ff90$export$ca8b6604d6ce14de = $306e985fbf05ff90$var$PublicKey;
var $306e985fbf05ff90$var$AlgorithmIdentifier = $9sLp8.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});
var $306e985fbf05ff90$var$PrivateKeyInfo = $9sLp8.define('PrivateKeyInfo', function() {
    this.seq().obj(this.key('version').int(), this.key('algorithm').use($306e985fbf05ff90$var$AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
$306e985fbf05ff90$export$8f54525b330fd87b = $306e985fbf05ff90$var$PrivateKeyInfo;
var $306e985fbf05ff90$var$EncryptedPrivateKeyInfo = $9sLp8.define('EncryptedPrivateKeyInfo', function() {
    this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});
$306e985fbf05ff90$export$23cd2842b44ca3e7 = $306e985fbf05ff90$var$EncryptedPrivateKeyInfo;
var $306e985fbf05ff90$var$DSAPrivateKey = $9sLp8.define('DSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
$306e985fbf05ff90$export$245c9aaa9f5ce4ce = $306e985fbf05ff90$var$DSAPrivateKey;
$306e985fbf05ff90$export$8ad762e3e6399afe = $9sLp8.define('DSAparam', function() {
    this.int();
});
var $306e985fbf05ff90$var$ECPrivateKey = $9sLp8.define('ECPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use($306e985fbf05ff90$var$ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
$306e985fbf05ff90$export$32ef6f92e22c6ab0 = $306e985fbf05ff90$var$ECPrivateKey;
var $306e985fbf05ff90$var$ECParameters = $9sLp8.define('ECParameters', function() {
    this.choice({
        namedCurve: this.objid()
    });
});
$306e985fbf05ff90$export$c9cd164b539ebb63 = $9sLp8.define('signature', function() {
    this.seq().obj(this.key('r').int(), this.key('s').int());
});

});
parcelRequire.register("9sLp8", function(module, exports) {
'use strict';
const $6e3b8019f7dc7263$var$asn1 = module.exports;

$6e3b8019f7dc7263$var$asn1.bignum = (parcelRequire("e7GsD"));

$6e3b8019f7dc7263$var$asn1.define = (parcelRequire("MmoYj")).define;

$6e3b8019f7dc7263$var$asn1.base = (parcelRequire("E3IM1"));

$6e3b8019f7dc7263$var$asn1.constants = (parcelRequire("bX0PJ"));

$6e3b8019f7dc7263$var$asn1.decoders = (parcelRequire("2hXok"));

$6e3b8019f7dc7263$var$asn1.encoders = (parcelRequire("fR737"));

});
parcelRequire.register("MmoYj", function(module, exports) {
'use strict';

var $fR737 = parcelRequire("fR737");

var $2hXok = parcelRequire("2hXok");

var $cvM26 = parcelRequire("cvM26");
const $0915dc558a15c80b$var$api = module.exports;
$0915dc558a15c80b$var$api.define = function define(name, body) {
    return new $0915dc558a15c80b$var$Entity(name, body);
};
function $0915dc558a15c80b$var$Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {
    };
    this.encoders = {
    };
}
$0915dc558a15c80b$var$Entity.prototype._createNamed = function createNamed(Base) {
    const name1 = this.name;
    function Generated(entity) {
        this._initNamed(entity, name1);
    }
    $cvM26(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
    };
    return new Generated(this);
};
$0915dc558a15c80b$var$Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed($2hXok[enc]);
    return this.decoders[enc];
};
$0915dc558a15c80b$var$Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
$0915dc558a15c80b$var$Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed($fR737[enc]);
    return this.encoders[enc];
};
$0915dc558a15c80b$var$Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

});
parcelRequire.register("fR737", function(module, exports) {
'use strict';
const $b8b1461bd96f8304$var$encoders = module.exports;

$b8b1461bd96f8304$var$encoders.der = (parcelRequire("9qeYB"));

$b8b1461bd96f8304$var$encoders.pem = (parcelRequire("kvIEx"));

});
parcelRequire.register("9qeYB", function(module, exports) {
'use strict';

var $cvM26 = parcelRequire("cvM26");

var $4ZpU5 = parcelRequire("4ZpU5");
var $6dc228cb09d76efa$require$Buffer = $4ZpU5.Buffer;

var $cKPOm = parcelRequire("cKPOm");

var $eN2Fg = parcelRequire("eN2Fg");
function $6dc228cb09d76efa$var$DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $6dc228cb09d76efa$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $6dc228cb09d76efa$var$DEREncoder;
$6dc228cb09d76efa$var$DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function $6dc228cb09d76efa$var$DERNode(parent) {
    $cKPOm.call(this, 'der', parent);
}
$cvM26($6dc228cb09d76efa$var$DERNode, $cKPOm);
$6dc228cb09d76efa$var$DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = $6dc228cb09d76efa$var$encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 128) {
        const header = $6dc228cb09d76efa$require$Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 256; i >>= 8)lenOctets++;
    const header = $6dc228cb09d76efa$require$Buffer.alloc(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 128 | lenOctets;
    for(let i1 = 1 + lenOctets, j = content.length; j > 0; i1--, j >>= 8)header[i1] = j & 255;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
$6dc228cb09d76efa$var$DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === 'bmpstr') {
        const buf = $6dc228cb09d76efa$require$Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === 'objDesc') return this._createEncoderBuffer(str);
    else return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
};
$6dc228cb09d76efa$var$DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i = 0; i < id.length; i++){
        let ident = id[i];
        for(size++; ident >= 128; ident >>= 7)size++;
    }
    const objid = $6dc228cb09d76efa$require$Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i2 = id.length - 1; i2 >= 0; i2--){
        let ident = id[i2];
        objid[offset--] = ident & 127;
        while((ident >>= 7) > 0)objid[offset--] = 128 | ident & 127;
    }
    return this._createEncoderBuffer(objid);
};
function $6dc228cb09d76efa$var$two(num) {
    if (num < 10) return '0' + num;
    else return num;
}
$6dc228cb09d76efa$var$DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === 'gentime') str = [
        $6dc228cb09d76efa$var$two(date.getUTCFullYear()),
        $6dc228cb09d76efa$var$two(date.getUTCMonth() + 1),
        $6dc228cb09d76efa$var$two(date.getUTCDate()),
        $6dc228cb09d76efa$var$two(date.getUTCHours()),
        $6dc228cb09d76efa$var$two(date.getUTCMinutes()),
        $6dc228cb09d76efa$var$two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else if (tag === 'utctime') str = [
        $6dc228cb09d76efa$var$two(date.getUTCFullYear() % 100),
        $6dc228cb09d76efa$var$two(date.getUTCMonth() + 1),
        $6dc228cb09d76efa$var$two(date.getUTCDate()),
        $6dc228cb09d76efa$var$two(date.getUTCHours()),
        $6dc228cb09d76efa$var$two(date.getUTCMinutes()),
        $6dc228cb09d76efa$var$two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    return this._encodeStr(str, 'octstr');
};
$6dc228cb09d76efa$var$DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
};
$6dc228cb09d76efa$var$DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== 'number' && !$6dc228cb09d76efa$require$Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) numArray.unshift(0);
        num = $6dc228cb09d76efa$require$Buffer.from(numArray);
    }
    if ($6dc228cb09d76efa$require$Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = $6dc228cb09d76efa$require$Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 128) return this._createEncoderBuffer(num);
    if (num < 256) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size = 1;
    for(let i = num; i >= 256; i >>= 8)size++;
    const out = new Array(size);
    for(let i3 = out.length - 1; i3 >= 0; i3--){
        out[i3] = num & 255;
        num >>= 8;
    }
    if (out[0] & 128) out.unshift(0);
    return this._createEncoderBuffer($6dc228cb09d76efa$require$Buffer.from(out));
};
$6dc228cb09d76efa$var$DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 255 : 0);
};
$6dc228cb09d76efa$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getEncoder('der').tree;
};
$6dc228cb09d76efa$var$DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state['default'] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function $6dc228cb09d76efa$var$encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === 'seqof') tag = 'seq';
    else if (tag === 'setof') tag = 'set';
    if ($eN2Fg.tagByName.hasOwnProperty(tag)) res = $eN2Fg.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;
    else return reporter.error('Unknown tag: ' + tag);
    if (res >= 31) return reporter.error('Multi-octet tag encoding unsupported');
    if (!primitive) res |= 32;
    res |= $eN2Fg.tagClassByName[cls || 'universal'] << 6;
    return res;
}

});
parcelRequire.register("4ZpU5", function(module, exports) {

var $7pjJT = parcelRequire("7pjJT");
/* eslint-disable node/no-deprecated-api */ 'use strict';

var $fV0m8 = parcelRequire("fV0m8");
var $3a20f3dbc0e870b8$var$Buffer = $fV0m8.Buffer;
var $3a20f3dbc0e870b8$var$safer = {
};
var $3a20f3dbc0e870b8$var$key;
for($3a20f3dbc0e870b8$var$key in $fV0m8){
    if (!$fV0m8.hasOwnProperty($3a20f3dbc0e870b8$var$key)) continue;
    if ($3a20f3dbc0e870b8$var$key === 'SlowBuffer' || $3a20f3dbc0e870b8$var$key === 'Buffer') continue;
    $3a20f3dbc0e870b8$var$safer[$3a20f3dbc0e870b8$var$key] = $fV0m8[$3a20f3dbc0e870b8$var$key];
}
var $3a20f3dbc0e870b8$var$Safer = $3a20f3dbc0e870b8$var$safer.Buffer = {
};
for($3a20f3dbc0e870b8$var$key in $3a20f3dbc0e870b8$var$Buffer){
    if (!$3a20f3dbc0e870b8$var$Buffer.hasOwnProperty($3a20f3dbc0e870b8$var$key)) continue;
    if ($3a20f3dbc0e870b8$var$key === 'allocUnsafe' || $3a20f3dbc0e870b8$var$key === 'allocUnsafeSlow') continue;
    $3a20f3dbc0e870b8$var$Safer[$3a20f3dbc0e870b8$var$key] = $3a20f3dbc0e870b8$var$Buffer[$3a20f3dbc0e870b8$var$key];
}
$3a20f3dbc0e870b8$var$safer.Buffer.prototype = $3a20f3dbc0e870b8$var$Buffer.prototype;
if (!$3a20f3dbc0e870b8$var$Safer.from || $3a20f3dbc0e870b8$var$Safer.from === Uint8Array.from) $3a20f3dbc0e870b8$var$Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === 'undefined') throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);
    return $3a20f3dbc0e870b8$var$Buffer(value, encodingOrOffset, length);
};
if (!$3a20f3dbc0e870b8$var$Safer.alloc) $3a20f3dbc0e870b8$var$Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2147483648) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = $3a20f3dbc0e870b8$var$Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === 'string') buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!$3a20f3dbc0e870b8$var$safer.kStringMaxLength) try {
    $3a20f3dbc0e870b8$var$safer.kStringMaxLength = $7pjJT.binding('buffer').kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!$3a20f3dbc0e870b8$var$safer.constants) {
    $3a20f3dbc0e870b8$var$safer.constants = {
        MAX_LENGTH: $3a20f3dbc0e870b8$var$safer.kMaxLength
    };
    if ($3a20f3dbc0e870b8$var$safer.kStringMaxLength) $3a20f3dbc0e870b8$var$safer.constants.MAX_STRING_LENGTH = $3a20f3dbc0e870b8$var$safer.kStringMaxLength;
}
module.exports = $3a20f3dbc0e870b8$var$safer;

});

parcelRequire.register("cKPOm", function(module, exports) {
'use strict';

var $bsiVK = parcelRequire("bsiVK");
var $9491f88c071d2d9e$require$Reporter = $bsiVK.Reporter;

var $etbwi = parcelRequire("etbwi");
var $9491f88c071d2d9e$require$EncoderBuffer = $etbwi.EncoderBuffer;

var $etbwi = parcelRequire("etbwi");
var $9491f88c071d2d9e$require$DecoderBuffer = $etbwi.DecoderBuffer;

var $ifIvd = parcelRequire("ifIvd");
// Supported tags
const $9491f88c071d2d9e$var$tags = [
    'seq',
    'seqof',
    'set',
    'setof',
    'objid',
    'bool',
    'gentime',
    'utctime',
    'null_',
    'enum',
    'int',
    'objDesc',
    'bitstr',
    'bmpstr',
    'charstr',
    'genstr',
    'graphstr',
    'ia5str',
    'iso646str',
    'numstr',
    'octstr',
    'printstr',
    't61str',
    'unistr',
    'utf8str',
    'videostr'
];
// Public methods list
const $9491f88c071d2d9e$var$methods = [
    'key',
    'obj',
    'use',
    'optional',
    'explicit',
    'implicit',
    'def',
    'choice',
    'any',
    'contains'
].concat($9491f88c071d2d9e$var$tags);
// Overrided methods list
const $9491f88c071d2d9e$var$overrided = [
    '_peekTag',
    '_decodeTag',
    '_use',
    '_decodeStr',
    '_decodeObjid',
    '_decodeTime',
    '_decodeNull',
    '_decodeInt',
    '_decodeBool',
    '_decodeList',
    '_encodeComposite',
    '_encodeStr',
    '_encodeObjid',
    '_encodeTime',
    '_encodeNull',
    '_encodeInt',
    '_encodeBool'
];
function $9491f88c071d2d9e$var$Node(enc, parent, name) {
    const state = {
    };
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = $9491f88c071d2d9e$var$Node;
const $9491f88c071d2d9e$var$stateProps = [
    'enc',
    'parent',
    'children',
    'tag',
    'args',
    'reverseArgs',
    'choice',
    'optional',
    'any',
    'obj',
    'use',
    'alteredUse',
    'key',
    'default',
    'explicit',
    'implicit',
    'contains'
];
$9491f88c071d2d9e$var$Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {
    };
    $9491f88c071d2d9e$var$stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
$9491f88c071d2d9e$var$Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    $9491f88c071d2d9e$var$methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
$9491f88c071d2d9e$var$Node.prototype._init = function init(body) {
    const state = this._baseState;
    $ifIvd(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    $ifIvd.equal(state.children.length, 1, 'Root node can have only one child');
};
$9491f88c071d2d9e$var$Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        $ifIvd(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        $ifIvd(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
            const res = {
            };
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
$9491f88c071d2d9e$var$overrided.forEach(function(method) {
    $9491f88c071d2d9e$var$Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
});
//
// Public methods
//
$9491f88c071d2d9e$var$tags.forEach(function(tag) {
    $9491f88c071d2d9e$var$Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        $ifIvd(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
$9491f88c071d2d9e$var$Node.prototype.use = function use(item) {
    $ifIvd(item);
    const state = this._baseState;
    $ifIvd(state.use === null);
    state.use = item;
    return this;
};
$9491f88c071d2d9e$var$Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
$9491f88c071d2d9e$var$Node.prototype.def = function def(val) {
    const state = this._baseState;
    $ifIvd(state['default'] === null);
    state['default'] = val;
    state.optional = true;
    return this;
};
$9491f88c071d2d9e$var$Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    $ifIvd(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
$9491f88c071d2d9e$var$Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    $ifIvd(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
$9491f88c071d2d9e$var$Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
$9491f88c071d2d9e$var$Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    $ifIvd(state.key === null);
    state.key = newKey;
    return this;
};
$9491f88c071d2d9e$var$Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
$9491f88c071d2d9e$var$Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    $ifIvd(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
$9491f88c071d2d9e$var$Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    $ifIvd(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
$9491f88c071d2d9e$var$Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state['default'];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save;
            if (state.any) save = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
            const data = new $9491f88c071d2d9e$require$DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
$9491f88c071d2d9e$var$Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === 'seq' || tag === 'set') return null;
    if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid') return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);
    else if (tag === 'null_') return this._decodeNull(input, options);
    else if (tag === 'bool') return this._decodeBool(input, options);
    else if (tag === 'objDesc') return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error('unknown tag: ' + tag);
};
$9491f88c071d2d9e$var$Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    $ifIvd(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
$9491f88c071d2d9e$var$Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error('Choice not matched');
    return result;
};
//
// Encoding
//
$9491f88c071d2d9e$var$Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new $9491f88c071d2d9e$require$EncoderBuffer(data, this.reporter);
};
$9491f88c071d2d9e$var$Node.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state['default'] !== null && state['default'] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
$9491f88c071d2d9e$var$Node.prototype._encodeValue = function encode(data, reporter, parent) {
    const state1 = this._baseState;
    // Decode root node
    if (state1.parent === null) return state1.children[0]._encode(data, reporter || new $9491f88c071d2d9e$require$Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state1.optional && data === undefined) {
        if (state1['default'] !== null) data = state1['default'];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state1.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state1.choice) result = this._encodeChoice(data, reporter);
    else if (state1.contains) {
        content = this._getUse(state1.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state1.children) {
        content = state1.children.map(function(child) {
            if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error('Child should have a key');
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state1.tag === 'seqof' || state1.tag === 'setof') {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state1.args && state1.args.length === 1)) return reporter.error('Too many args for : ' + state1.tag);
            if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state1.use !== null) result = this._getUse(state1.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state1.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state1.any && state1.choice === null) {
        const tag = state1.implicit !== null ? state1.implicit : state1.tag;
        const cls = state1.implicit === null ? 'universal' : 'context';
        if (tag === null) {
            if (state1.use === null) reporter.error('Tag could be omitted only for .use()');
        } else if (state1.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state1.explicit !== null) result = this._encodeComposite(state1.explicit, false, 'context', result);
    return result;
};
$9491f88c071d2d9e$var$Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) $ifIvd(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
$9491f88c071d2d9e$var$Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid') return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);
    else if (tag === 'null_') return this._encodeNull();
    else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool') return this._encodeBool(data);
    else if (tag === 'objDesc') return this._encodeStr(data, tag);
    else throw new Error('Unsupported tag: ' + tag);
};
$9491f88c071d2d9e$var$Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
$9491f88c071d2d9e$var$Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

});
parcelRequire.register("bsiVK", function(module, exports) {

$parcel$export(module.exports, "Reporter", () => $8570fe6c7249b89a$export$957313a2f485e5ed, (v) => $8570fe6c7249b89a$export$957313a2f485e5ed = v);
var $8570fe6c7249b89a$export$957313a2f485e5ed;
'use strict';

var $cvM26 = parcelRequire("cvM26");
function $8570fe6c7249b89a$var$Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {
        },
        errors: []
    };
}
$8570fe6c7249b89a$export$957313a2f485e5ed = $8570fe6c7249b89a$var$Reporter;
$8570fe6c7249b89a$var$Reporter.prototype.isError = function isError(obj) {
    return obj instanceof $8570fe6c7249b89a$var$ReporterError;
};
$8570fe6c7249b89a$var$Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
$8570fe6c7249b89a$var$Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
$8570fe6c7249b89a$var$Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
$8570fe6c7249b89a$var$Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
$8570fe6c7249b89a$var$Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
$8570fe6c7249b89a$var$Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
};
$8570fe6c7249b89a$var$Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {
    };
    return prev;
};
$8570fe6c7249b89a$var$Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
$8570fe6c7249b89a$var$Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof $8570fe6c7249b89a$var$ReporterError;
    if (inherited) err = msg;
    else err = new $8570fe6c7249b89a$var$ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
$8570fe6c7249b89a$var$Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function $8570fe6c7249b89a$var$ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
$cvM26($8570fe6c7249b89a$var$ReporterError, Error);
$8570fe6c7249b89a$var$ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace) Error.captureStackTrace(this, $8570fe6c7249b89a$var$ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

});

parcelRequire.register("etbwi", function(module, exports) {

$parcel$export(module.exports, "DecoderBuffer", () => $a88cb5b6c18c69b2$export$bf9f79cdc4a49163, (v) => $a88cb5b6c18c69b2$export$bf9f79cdc4a49163 = v);
$parcel$export(module.exports, "EncoderBuffer", () => $a88cb5b6c18c69b2$export$8ff24f7760c7a78e, (v) => $a88cb5b6c18c69b2$export$8ff24f7760c7a78e = v);
var $a88cb5b6c18c69b2$export$bf9f79cdc4a49163;
var $a88cb5b6c18c69b2$export$8ff24f7760c7a78e;
'use strict';

var $cvM26 = parcelRequire("cvM26");

var $bsiVK = parcelRequire("bsiVK");
var $a88cb5b6c18c69b2$require$Reporter = $bsiVK.Reporter;

var $4ZpU5 = parcelRequire("4ZpU5");
var $a88cb5b6c18c69b2$require$Buffer = $4ZpU5.Buffer;
function $a88cb5b6c18c69b2$var$DecoderBuffer(base, options) {
    $a88cb5b6c18c69b2$require$Reporter.call(this, options);
    if (!$a88cb5b6c18c69b2$require$Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
$cvM26($a88cb5b6c18c69b2$var$DecoderBuffer, $a88cb5b6c18c69b2$require$Reporter);
$a88cb5b6c18c69b2$export$bf9f79cdc4a49163 = $a88cb5b6c18c69b2$var$DecoderBuffer;
$a88cb5b6c18c69b2$var$DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof $a88cb5b6c18c69b2$var$DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && $a88cb5b6c18c69b2$require$Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
    return isCompatible;
};
$a88cb5b6c18c69b2$var$DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: $a88cb5b6c18c69b2$require$Reporter.prototype.save.call(this)
    };
};
$a88cb5b6c18c69b2$var$DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    const res = new $a88cb5b6c18c69b2$var$DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    $a88cb5b6c18c69b2$require$Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
$a88cb5b6c18c69b2$var$DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
$a88cb5b6c18c69b2$var$DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || 'DecoderBuffer overrun');
};
$a88cb5b6c18c69b2$var$DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
    const res = new $a88cb5b6c18c69b2$var$DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
$a88cb5b6c18c69b2$var$DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function $a88cb5b6c18c69b2$var$EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!$a88cb5b6c18c69b2$var$EncoderBuffer.isEncoderBuffer(item)) item = new $a88cb5b6c18c69b2$var$EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 255)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
    } else if (typeof value === 'string') {
        this.value = value;
        this.length = $a88cb5b6c18c69b2$require$Buffer.byteLength(value);
    } else if ($a88cb5b6c18c69b2$require$Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error('Unsupported type: ' + typeof value);
}
$a88cb5b6c18c69b2$export$8ff24f7760c7a78e = $a88cb5b6c18c69b2$var$EncoderBuffer;
$a88cb5b6c18c69b2$var$EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof $a88cb5b6c18c69b2$var$EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
    return isCompatible;
};
$a88cb5b6c18c69b2$var$EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = $a88cb5b6c18c69b2$require$Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === 'number') out[offset] = this.value;
        else if (typeof this.value === 'string') out.write(this.value, offset);
        else if ($a88cb5b6c18c69b2$require$Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

});


parcelRequire.register("eN2Fg", function(module, exports) {

$parcel$export(module.exports, "tagClass", () => $ac47b56742b740d9$export$3584c46ed60baee8, (v) => $ac47b56742b740d9$export$3584c46ed60baee8 = v);
$parcel$export(module.exports, "tagClassByName", () => $ac47b56742b740d9$export$f18596ef8d632e49, (v) => $ac47b56742b740d9$export$f18596ef8d632e49 = v);
$parcel$export(module.exports, "tag", () => $ac47b56742b740d9$export$2b067c6666111485, (v) => $ac47b56742b740d9$export$2b067c6666111485 = v);
$parcel$export(module.exports, "tagByName", () => $ac47b56742b740d9$export$f17df38a421ab9e3, (v) => $ac47b56742b740d9$export$f17df38a421ab9e3 = v);
var $ac47b56742b740d9$export$3584c46ed60baee8;
var $ac47b56742b740d9$export$f18596ef8d632e49;
var $ac47b56742b740d9$export$2b067c6666111485;
var $ac47b56742b740d9$export$f17df38a421ab9e3;
'use strict';
// Helper
function $ac47b56742b740d9$var$reverse(map) {
    const res = {
    };
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
$ac47b56742b740d9$export$3584c46ed60baee8 = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
};
$ac47b56742b740d9$export$f18596ef8d632e49 = $ac47b56742b740d9$var$reverse($ac47b56742b740d9$export$3584c46ed60baee8);
$ac47b56742b740d9$export$2b067c6666111485 = {
    0: 'end',
    1: 'bool',
    2: 'int',
    3: 'bitstr',
    4: 'octstr',
    5: 'null_',
    6: 'objid',
    7: 'objDesc',
    8: 'external',
    9: 'real',
    10: 'enum',
    11: 'embed',
    12: 'utf8str',
    13: 'relativeOid',
    16: 'seq',
    17: 'set',
    18: 'numstr',
    19: 'printstr',
    20: 't61str',
    21: 'videostr',
    22: 'ia5str',
    23: 'utctime',
    24: 'gentime',
    25: 'graphstr',
    26: 'iso646str',
    27: 'genstr',
    28: 'unistr',
    29: 'charstr',
    30: 'bmpstr'
};
$ac47b56742b740d9$export$f17df38a421ab9e3 = $ac47b56742b740d9$var$reverse($ac47b56742b740d9$export$2b067c6666111485);

});


parcelRequire.register("kvIEx", function(module, exports) {
'use strict';

var $cvM26 = parcelRequire("cvM26");

var $9qeYB = parcelRequire("9qeYB");
function $eee95708344b5e33$var$PEMEncoder(entity) {
    $9qeYB.call(this, entity);
    this.enc = 'pem';
}
$cvM26($eee95708344b5e33$var$PEMEncoder, $9qeYB);
module.exports = $eee95708344b5e33$var$PEMEncoder;
$eee95708344b5e33$var$PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = $9qeYB.prototype.encode.call(this, data);
    const p = buf.toString('base64');
    const out = [
        '-----BEGIN ' + options.label + '-----'
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
};

});


parcelRequire.register("2hXok", function(module, exports) {
'use strict';
const $1aab3d302a1505b2$var$decoders = module.exports;

$1aab3d302a1505b2$var$decoders.der = (parcelRequire("9byO9"));

$1aab3d302a1505b2$var$decoders.pem = (parcelRequire("7ahMn"));

});
parcelRequire.register("9byO9", function(module, exports) {
'use strict';

var $cvM26 = parcelRequire("cvM26");

var $e7GsD = parcelRequire("e7GsD");

var $etbwi = parcelRequire("etbwi");
var $6b00244584a4bdea$require$DecoderBuffer = $etbwi.DecoderBuffer;

var $cKPOm = parcelRequire("cKPOm");

var $eN2Fg = parcelRequire("eN2Fg");
function $6b00244584a4bdea$var$DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $6b00244584a4bdea$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $6b00244584a4bdea$var$DERDecoder;
$6b00244584a4bdea$var$DERDecoder.prototype.decode = function decode(data, options) {
    if (!$6b00244584a4bdea$require$DecoderBuffer.isDecoderBuffer(data)) data = new $6b00244584a4bdea$require$DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function $6b00244584a4bdea$var$DERNode(parent) {
    $cKPOm.call(this, 'der', parent);
}
$cvM26($6b00244584a4bdea$var$DERNode, $cKPOm);
$6b00244584a4bdea$var$DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = $6b00244584a4bdea$var$derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};
$6b00244584a4bdea$var$DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = $6b00244584a4bdea$var$derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = $6b00244584a4bdea$var$derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
$6b00244584a4bdea$var$DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = $6b00244584a4bdea$var$derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = $6b00244584a4bdea$var$derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
    }
};
$6b00244584a4bdea$var$DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
$6b00244584a4bdea$var$DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
        let str = '';
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === 'octstr') return buffer.raw();
    else if (tag === 'objDesc') return buffer.raw();
    else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error('Decoding of string type: ' + tag + ' unsupported');
};
$6b00244584a4bdea$var$DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 128) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
$6b00244584a4bdea$var$DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error('Decoding ' + tag + ' time is not supported yet');
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
$6b00244584a4bdea$var$DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
$6b00244584a4bdea$var$DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
$6b00244584a4bdea$var$DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new $e7GsD(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
$6b00244584a4bdea$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getDecoder('der').tree;
};
// Utility methods
function $6b00244584a4bdea$var$derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = $eN2Fg.tagClass[tag >> 6];
    const primitive = (tag & 32) === 0;
    // Multi-octet tag - load
    if ((tag & 31) === 31) {
        let oct = tag;
        tag = 0;
        while((oct & 128) === 128){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 127;
        }
    } else tag &= 31;
    const tagStr = $eN2Fg.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function $6b00244584a4bdea$var$derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 128) return null;
    // Definite form
    if ((len & 128) === 0) // Short form
    return len;
    // Long form
    const num = len & 127;
    if (num > 4) return buf.error('length octect is too long');
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

});

parcelRequire.register("7ahMn", function(module, exports) {
'use strict';

var $cvM26 = parcelRequire("cvM26");

var $4ZpU5 = parcelRequire("4ZpU5");
var $5377422c388287e9$require$Buffer = $4ZpU5.Buffer;

var $9byO9 = parcelRequire("9byO9");
function $5377422c388287e9$var$PEMDecoder(entity) {
    $9byO9.call(this, entity);
    this.enc = 'pem';
}
$cvM26($5377422c388287e9$var$PEMDecoder, $9byO9);
module.exports = $5377422c388287e9$var$PEMDecoder;
$5377422c388287e9$var$PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== 'BEGIN') break;
            start = i;
        } else {
            if (match[1] !== 'END') break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
    const base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, '');
    const input = $5377422c388287e9$require$Buffer.from(base64, 'base64');
    return $9byO9.prototype.decode.call(this, input, options);
};

});



parcelRequire.register("E3IM1", function(module, exports) {
'use strict';
const $07869f7c2e8bce51$var$base = module.exports;

$07869f7c2e8bce51$var$base.Reporter = (parcelRequire("bsiVK")).Reporter;

$07869f7c2e8bce51$var$base.DecoderBuffer = (parcelRequire("etbwi")).DecoderBuffer;

$07869f7c2e8bce51$var$base.EncoderBuffer = (parcelRequire("etbwi")).EncoderBuffer;

$07869f7c2e8bce51$var$base.Node = (parcelRequire("cKPOm"));

});

parcelRequire.register("bX0PJ", function(module, exports) {
'use strict';
const $8b35d9de80054248$var$constants = module.exports;
// Helper
$8b35d9de80054248$var$constants._reverse = function reverse(map) {
    const res = {
    };
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};

$8b35d9de80054248$var$constants.der = (parcelRequire("eN2Fg"));

});


parcelRequire.register("bBAFq", function(module, exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
'use strict';

var $9sLp8 = parcelRequire("9sLp8");
var $872f97bf7808c656$var$Time = $9sLp8.define('Time', function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var $872f97bf7808c656$var$AttributeTypeValue = $9sLp8.define('AttributeTypeValue', function() {
    this.seq().obj(this.key('type').objid(), this.key('value').any());
});
var $872f97bf7808c656$var$AlgorithmIdentifier = $9sLp8.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
});
var $872f97bf7808c656$var$SubjectPublicKeyInfo = $9sLp8.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use($872f97bf7808c656$var$AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
var $872f97bf7808c656$var$RelativeDistinguishedName = $9sLp8.define('RelativeDistinguishedName', function() {
    this.setof($872f97bf7808c656$var$AttributeTypeValue);
});
var $872f97bf7808c656$var$RDNSequence = $9sLp8.define('RDNSequence', function() {
    this.seqof($872f97bf7808c656$var$RelativeDistinguishedName);
});
var $872f97bf7808c656$var$Name = $9sLp8.define('Name', function() {
    this.choice({
        rdnSequence: this.use($872f97bf7808c656$var$RDNSequence)
    });
});
var $872f97bf7808c656$var$Validity = $9sLp8.define('Validity', function() {
    this.seq().obj(this.key('notBefore').use($872f97bf7808c656$var$Time), this.key('notAfter').use($872f97bf7808c656$var$Time));
});
var $872f97bf7808c656$var$Extension = $9sLp8.define('Extension', function() {
    this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});
var $872f97bf7808c656$var$TBSCertificate = $9sLp8.define('TBSCertificate', function() {
    this.seq().obj(this.key('version').explicit(0).int().optional(), this.key('serialNumber').int(), this.key('signature').use($872f97bf7808c656$var$AlgorithmIdentifier), this.key('issuer').use($872f97bf7808c656$var$Name), this.key('validity').use($872f97bf7808c656$var$Validity), this.key('subject').use($872f97bf7808c656$var$Name), this.key('subjectPublicKeyInfo').use($872f97bf7808c656$var$SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof($872f97bf7808c656$var$Extension).optional());
});
var $872f97bf7808c656$var$X509Certificate = $9sLp8.define('X509Certificate', function() {
    this.seq().obj(this.key('tbsCertificate').use($872f97bf7808c656$var$TBSCertificate), this.key('signatureAlgorithm').use($872f97bf7808c656$var$AlgorithmIdentifier), this.key('signatureValue').bitstr());
});
module.exports = $872f97bf7808c656$var$X509Certificate;

});


parcelRequire.register("6oPq0", function(module, exports) {
module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

});

parcelRequire.register("hw4J0", function(module, exports) {
// adapted from https://github.com/apatil/pemstrip
var $cc091712e27f5f55$var$findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var $cc091712e27f5f55$var$startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var $cc091712e27f5f55$var$fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;

var $pLjxr = parcelRequire("pLjxr");

var $aRUH2 = parcelRequire("aRUH2");

var $ahmAR = parcelRequire("ahmAR");
var $cc091712e27f5f55$require$Buffer = $ahmAR.Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match($cc091712e27f5f55$var$findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match($cc091712e27f5f55$var$fullRegex);
        decrypted = $cc091712e27f5f55$require$Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
    } else {
        var suite = 'aes' + match[1];
        var iv = $cc091712e27f5f55$require$Buffer.from(match[2], 'hex');
        var cipherText = $cc091712e27f5f55$require$Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = $pLjxr(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = $aRUH2.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = $cc091712e27f5f55$require$Buffer.concat(out);
    }
    var tag = key.match($cc091712e27f5f55$var$startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

});


parcelRequire.register("1wY77", function(module, exports) {
module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

});


parcelRequire.register("7T4lG", function(module, exports) {

var $ahmAR = parcelRequire("ahmAR");
var $5be10b07dc5e3b6a$require$Buffer = $ahmAR.Buffer;

var $02waS = parcelRequire("02waS");

var $iAZAB = parcelRequire("iAZAB");
var $5be10b07dc5e3b6a$require$EC = $iAZAB.ec;

var $1egYR = parcelRequire("1egYR");

var $1wY77 = parcelRequire("1wY77");
function $5be10b07dc5e3b6a$var$verify(sig, hash, key, signType, tag) {
    var pub = $1egYR(key);
    if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
        return $5be10b07dc5e3b6a$var$ecVerify(sig, hash, pub);
    } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type');
        return $5be10b07dc5e3b6a$var$dsaVerify(sig, hash, pub);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    }
    hash = $5be10b07dc5e3b6a$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(255);
        padNum++;
    }
    pad.push(0);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = $5be10b07dc5e3b6a$require$Buffer.from(pad);
    var red = $02waS.mont(pub.modulus);
    sig = new $02waS(sig).toRed(red);
    sig = sig.redPow(new $02waS(pub.publicExponent));
    sig = $5be10b07dc5e3b6a$require$Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function $5be10b07dc5e3b6a$var$ecVerify(sig, hash, pub) {
    var curveId = $1wY77[pub.data.algorithm.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
    var curve = new $5be10b07dc5e3b6a$require$EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function $5be10b07dc5e3b6a$var$dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = $1egYR.signature.decode(sig, 'der');
    var s = unpacked.s;
    var r = unpacked.r;
    $5be10b07dc5e3b6a$var$checkValue(s, q);
    $5be10b07dc5e3b6a$var$checkValue(r, q);
    var montp = $02waS.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new $02waS(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function $5be10b07dc5e3b6a$var$checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig');
    if (b.cmp(q) >= q) throw new Error('invalid sig');
}
module.exports = $5be10b07dc5e3b6a$var$verify;

});


parcelRequire.register("oINKX", function(module, exports) {

var $fV0m8 = parcelRequire("fV0m8");
var $04a4fea79a4d3cc7$require$Buffer = $fV0m8.Buffer;

var $iAZAB = parcelRequire("iAZAB");

var $e7GsD = parcelRequire("e7GsD");
module.exports = function createECDH(curve) {
    return new $04a4fea79a4d3cc7$var$ECDH(curve);
};
var $04a4fea79a4d3cc7$var$aliases = {
    secp256k1: {
        name: 'secp256k1',
        byteLength: 32
    },
    secp224r1: {
        name: 'p224',
        byteLength: 28
    },
    prime256v1: {
        name: 'p256',
        byteLength: 32
    },
    prime192v1: {
        name: 'p192',
        byteLength: 24
    },
    ed25519: {
        name: 'ed25519',
        byteLength: 32
    },
    secp384r1: {
        name: 'p384',
        byteLength: 48
    },
    secp521r1: {
        name: 'p521',
        byteLength: 66
    }
};
$04a4fea79a4d3cc7$var$aliases.p224 = $04a4fea79a4d3cc7$var$aliases.secp224r1;
$04a4fea79a4d3cc7$var$aliases.p256 = $04a4fea79a4d3cc7$var$aliases.secp256r1 = $04a4fea79a4d3cc7$var$aliases.prime256v1;
$04a4fea79a4d3cc7$var$aliases.p192 = $04a4fea79a4d3cc7$var$aliases.secp192r1 = $04a4fea79a4d3cc7$var$aliases.prime192v1;
$04a4fea79a4d3cc7$var$aliases.p384 = $04a4fea79a4d3cc7$var$aliases.secp384r1;
$04a4fea79a4d3cc7$var$aliases.p521 = $04a4fea79a4d3cc7$var$aliases.secp521r1;
function $04a4fea79a4d3cc7$var$ECDH(curve) {
    this.curveType = $04a4fea79a4d3cc7$var$aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new $iAZAB.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
$04a4fea79a4d3cc7$var$ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
$04a4fea79a4d3cc7$var$ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!$04a4fea79a4d3cc7$require$Buffer.isBuffer(other)) other = new $04a4fea79a4d3cc7$require$Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return $04a4fea79a4d3cc7$var$formatReturnValue(out, enc, this.curveType.byteLength);
};
$04a4fea79a4d3cc7$var$ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return $04a4fea79a4d3cc7$var$formatReturnValue(key, enc);
};
$04a4fea79a4d3cc7$var$ECDH.prototype.getPrivateKey = function(enc) {
    return $04a4fea79a4d3cc7$var$formatReturnValue(this.keys.getPrivate(), enc);
};
$04a4fea79a4d3cc7$var$ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || 'utf8';
    if (!$04a4fea79a4d3cc7$require$Buffer.isBuffer(pub)) pub = new $04a4fea79a4d3cc7$require$Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
$04a4fea79a4d3cc7$var$ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || 'utf8';
    if (!$04a4fea79a4d3cc7$require$Buffer.isBuffer(priv)) priv = new $04a4fea79a4d3cc7$require$Buffer(priv, enc);
    var _priv = new $e7GsD(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function $04a4fea79a4d3cc7$var$formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new $04a4fea79a4d3cc7$require$Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new $04a4fea79a4d3cc7$require$Buffer(len - buf.length);
        zeros.fill(0);
        buf = $04a4fea79a4d3cc7$require$Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

});

parcelRequire.register("fAfe3", function(module, exports) {

$parcel$export(module.exports, "publicEncrypt", () => $b5860751d9589d40$export$512823e338ddb1b7, (v) => $b5860751d9589d40$export$512823e338ddb1b7 = v);
$parcel$export(module.exports, "privateDecrypt", () => $b5860751d9589d40$export$7efb24e2fddf99b9, (v) => $b5860751d9589d40$export$7efb24e2fddf99b9 = v);
$parcel$export(module.exports, "privateEncrypt", () => $b5860751d9589d40$export$9d0e0c0c4a8d30f3, (v) => $b5860751d9589d40$export$9d0e0c0c4a8d30f3 = v);
$parcel$export(module.exports, "publicDecrypt", () => $b5860751d9589d40$export$b9d55ff329113abd, (v) => $b5860751d9589d40$export$b9d55ff329113abd = v);
var $b5860751d9589d40$export$512823e338ddb1b7;
var $b5860751d9589d40$export$7efb24e2fddf99b9;
var $b5860751d9589d40$export$9d0e0c0c4a8d30f3;
var $b5860751d9589d40$export$b9d55ff329113abd;

$b5860751d9589d40$export$512823e338ddb1b7 = (parcelRequire("dmtA3"));

$b5860751d9589d40$export$7efb24e2fddf99b9 = (parcelRequire("idODD"));
$b5860751d9589d40$export$9d0e0c0c4a8d30f3 = function privateEncrypt(key, buf) {
    return $b5860751d9589d40$export$512823e338ddb1b7(key, buf, true);
};
$b5860751d9589d40$export$b9d55ff329113abd = function publicDecrypt(key, buf) {
    return $b5860751d9589d40$export$7efb24e2fddf99b9(key, buf, true);
};

});
parcelRequire.register("dmtA3", function(module, exports) {

var $1egYR = parcelRequire("1egYR");

var $lv4cL = parcelRequire("lv4cL");

var $2vuiV = parcelRequire("2vuiV");

var $kvpeI = parcelRequire("kvpeI");

var $75WxW = parcelRequire("75WxW");

var $e7GsD = parcelRequire("e7GsD");

var $9o8qx = parcelRequire("9o8qx");

var $jgpp4 = parcelRequire("jgpp4");

var $ahmAR = parcelRequire("ahmAR");
var $9ba4467c6a99c1a1$require$Buffer = $ahmAR.Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $1egYR(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = $9ba4467c6a99c1a1$var$oaep(key, msg);
    else if (padding === 1) paddedMsg = $9ba4467c6a99c1a1$var$pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new $e7GsD(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error('data too long for modulus');
    } else throw new Error('unknown padding');
    if (reverse) return $jgpp4(paddedMsg, key);
    else return $9o8qx(paddedMsg, key);
};
function $9ba4467c6a99c1a1$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = $2vuiV('sha1').update($9ba4467c6a99c1a1$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error('message too long');
    var ps = $9ba4467c6a99c1a1$require$Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = $lv4cL(hLen);
    var maskedDb = $75WxW($9ba4467c6a99c1a1$require$Buffer.concat([
        iHash,
        ps,
        $9ba4467c6a99c1a1$require$Buffer.alloc(1, 1),
        msg
    ], dblen), $kvpeI(seed, dblen));
    var maskedSeed = $75WxW(seed, $kvpeI(maskedDb, hLen));
    return new $e7GsD($9ba4467c6a99c1a1$require$Buffer.concat([
        $9ba4467c6a99c1a1$require$Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function $9ba4467c6a99c1a1$var$pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error('message too long');
    var ps;
    if (reverse) ps = $9ba4467c6a99c1a1$require$Buffer.alloc(k - mLen - 3, 255);
    else ps = $9ba4467c6a99c1a1$var$nonZero(k - mLen - 3);
    return new $e7GsD($9ba4467c6a99c1a1$require$Buffer.concat([
        $9ba4467c6a99c1a1$require$Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        $9ba4467c6a99c1a1$require$Buffer.alloc(1),
        msg
    ], k));
}
function $9ba4467c6a99c1a1$var$nonZero(len) {
    var out = $9ba4467c6a99c1a1$require$Buffer.allocUnsafe(len);
    var i = 0;
    var cache = $lv4cL(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = $lv4cL(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

});
parcelRequire.register("kvpeI", function(module, exports) {

var $2vuiV = parcelRequire("2vuiV");

var $ahmAR = parcelRequire("ahmAR");
var $eeda474acc4e079f$require$Buffer = $ahmAR.Buffer;
module.exports = function(seed, len) {
    var t = $eeda474acc4e079f$require$Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = $eeda474acc4e079f$var$i2ops(i++);
        t = $eeda474acc4e079f$require$Buffer.concat([
            t,
            $2vuiV('sha1').update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function $eeda474acc4e079f$var$i2ops(c) {
    var out = $eeda474acc4e079f$require$Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

});

parcelRequire.register("75WxW", function(module, exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

});

parcelRequire.register("9o8qx", function(module, exports) {

var $e7GsD = parcelRequire("e7GsD");

var $ahmAR = parcelRequire("ahmAR");
var $6d5ce45d57f12d85$require$Buffer = $ahmAR.Buffer;
function $6d5ce45d57f12d85$var$withPublic(paddedMsg, key) {
    return $6d5ce45d57f12d85$require$Buffer.from(paddedMsg.toRed($e7GsD.mont(key.modulus)).redPow(new $e7GsD(key.publicExponent)).fromRed().toArray());
}
module.exports = $6d5ce45d57f12d85$var$withPublic;

});


parcelRequire.register("idODD", function(module, exports) {

var $1egYR = parcelRequire("1egYR");

var $kvpeI = parcelRequire("kvpeI");

var $75WxW = parcelRequire("75WxW");

var $e7GsD = parcelRequire("e7GsD");

var $jgpp4 = parcelRequire("jgpp4");

var $2vuiV = parcelRequire("2vuiV");

var $9o8qx = parcelRequire("9o8qx");

var $ahmAR = parcelRequire("ahmAR");
var $d440b89587d4153a$require$Buffer = $ahmAR.Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $1egYR(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new $e7GsD(enc).cmp(key.modulus) >= 0) throw new Error('decryption error');
    var msg;
    if (reverse) msg = $9o8qx(new $e7GsD(enc), key);
    else msg = $jgpp4(enc, key);
    var zBuffer = $d440b89587d4153a$require$Buffer.alloc(k - msg.length);
    msg = $d440b89587d4153a$require$Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return $d440b89587d4153a$var$oaep(key, msg);
    else if (padding === 1) return $d440b89587d4153a$var$pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error('unknown padding');
};
function $d440b89587d4153a$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = $2vuiV('sha1').update($d440b89587d4153a$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error('decryption error');
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = $75WxW(maskedSeed, $kvpeI(maskedDb, hLen));
    var db = $75WxW(maskedDb, $kvpeI(seed, k - hLen - 1));
    if ($d440b89587d4153a$var$compare(iHash, db.slice(0, hLen))) throw new Error('decryption error');
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error('decryption error');
    return db.slice(i);
}
function $d440b89587d4153a$var$pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error('decryption error');
    return msg.slice(i);
}
function $d440b89587d4153a$var$compare(a, b) {
    a = $d440b89587d4153a$require$Buffer.from(a);
    b = $d440b89587d4153a$require$Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

});


parcelRequire.register("ghiGi", function(module, exports) {

$parcel$export(module.exports, "randomFill", () => $bd9cb99030988464$export$bb1abf2ce84fc7e8, (v) => $bd9cb99030988464$export$bb1abf2ce84fc7e8 = v);
$parcel$export(module.exports, "randomFillSync", () => $bd9cb99030988464$export$2f7171e78e524d5e, (v) => $bd9cb99030988464$export$2f7171e78e524d5e = v);
var $bd9cb99030988464$export$bb1abf2ce84fc7e8;
var $bd9cb99030988464$export$2f7171e78e524d5e;

var $7pjJT = parcelRequire("7pjJT");
'use strict';
function $bd9cb99030988464$var$oldBrowser() {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}

var $ahmAR = parcelRequire("ahmAR");

var $lv4cL = parcelRequire("lv4cL");
var $bd9cb99030988464$var$Buffer = $ahmAR.Buffer;
var $bd9cb99030988464$var$kBufferMaxLength = $ahmAR.kMaxLength;
var $bd9cb99030988464$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
var $bd9cb99030988464$var$kMaxUint32 = Math.pow(2, 32) - 1;
function $bd9cb99030988464$var$assertOffset(offset, length) {
    if (typeof offset !== 'number' || offset !== offset) throw new TypeError('offset must be a number');
    if (offset > $bd9cb99030988464$var$kMaxUint32 || offset < 0) throw new TypeError('offset must be a uint32');
    if (offset > $bd9cb99030988464$var$kBufferMaxLength || offset > length) throw new RangeError('offset out of range');
}
function $bd9cb99030988464$var$assertSize(size, offset, length) {
    if (typeof size !== 'number' || size !== size) throw new TypeError('size must be a number');
    if (size > $bd9cb99030988464$var$kMaxUint32 || size < 0) throw new TypeError('size must be a uint32');
    if (size + offset > length || size > $bd9cb99030988464$var$kBufferMaxLength) throw new RangeError('buffer too small');
}
if ($bd9cb99030988464$var$crypto && $bd9cb99030988464$var$crypto.getRandomValues || false) {
    $bd9cb99030988464$export$bb1abf2ce84fc7e8 = $bd9cb99030988464$var$randomFill;
    $bd9cb99030988464$export$2f7171e78e524d5e = $bd9cb99030988464$var$randomFillSync;
} else {
    $bd9cb99030988464$export$bb1abf2ce84fc7e8 = $bd9cb99030988464$var$oldBrowser;
    $bd9cb99030988464$export$2f7171e78e524d5e = $bd9cb99030988464$var$oldBrowser;
}
function $bd9cb99030988464$var$randomFill(buf, offset, size, cb) {
    if (!$bd9cb99030988464$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === 'function') {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === 'function') {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== 'function') throw new TypeError('"cb" argument must be a function');
    $bd9cb99030988464$var$assertOffset(offset, buf.length);
    $bd9cb99030988464$var$assertSize(size, offset, buf.length);
    return $bd9cb99030988464$var$actualFill(buf, offset, size, cb);
}
function $bd9cb99030988464$var$actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    $bd9cb99030988464$var$crypto.getRandomValues(uint);
    if (cb) {
        $7pjJT.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        $lv4cL(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes1 = $lv4cL(size);
    bytes1.copy(buf, offset);
    return buf;
}
function $bd9cb99030988464$var$randomFillSync(buf, offset, size) {
    if (typeof offset === 'undefined') offset = 0;
    if (!$bd9cb99030988464$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    $bd9cb99030988464$var$assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    $bd9cb99030988464$var$assertSize(size, offset, buf.length);
    return $bd9cb99030988464$var$actualFill(buf, offset, size);
}

});



var $868bb48821d209c4$var$detectRandomBytes = function() {
    if (typeof window !== 'undefined') {
        // browser crypto implementation(s)
        var target_1 = window.crypto || window.msCrypto; // allow for IE11
        if (target_1 && target_1.getRandomValues) return function(size) {
            return target_1.getRandomValues($868bb48821d209c4$var$buffer_1.alloc(size));
        };
    }
    if (typeof $parcel$global !== 'undefined' && $parcel$global.crypto && $parcel$global.crypto.getRandomValues) // allow for RN packages such as https://www.npmjs.com/package/react-native-get-random-values to populate global
    return function(size) {
        return $parcel$global.crypto.getRandomValues($868bb48821d209c4$var$buffer_1.alloc(size));
    };
    var requiredRandomBytes;
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        requiredRandomBytes = (parcelRequire("3vS5Y")).randomBytes;
    } catch (e) {
    // keep the fallback
    }
    // NOTE: in transpiled cases the above require might return null/undefined
    return requiredRandomBytes || $868bb48821d209c4$var$insecureRandomBytes;
};
var $868bb48821d209c4$var$randomBytes = $868bb48821d209c4$var$detectRandomBytes();
function $868bb48821d209c4$var$isAnyArrayBuffer(value) {
    return [
        '[object ArrayBuffer]',
        '[object SharedArrayBuffer]'
    ].includes(Object.prototype.toString.call(value));
}
function $868bb48821d209c4$var$isUint8Array(value) {
    return Object.prototype.toString.call(value) === '[object Uint8Array]';
}
function $868bb48821d209c4$var$isBigInt64Array(value) {
    return Object.prototype.toString.call(value) === '[object BigInt64Array]';
}
function $868bb48821d209c4$var$isBigUInt64Array(value) {
    return Object.prototype.toString.call(value) === '[object BigUint64Array]';
}
function $868bb48821d209c4$var$isRegExp(d) {
    return Object.prototype.toString.call(d) === '[object RegExp]';
}
function $868bb48821d209c4$var$isMap(d) {
    return Object.prototype.toString.call(d) === '[object Map]';
}
// To ensure that 0.4 of node works correctly
function $868bb48821d209c4$var$isDate(d) {
    return $868bb48821d209c4$var$isObjectLike(d) && Object.prototype.toString.call(d) === '[object Date]';
}
/**
 * @internal
 * this is to solve the `'someKey' in x` problem where x is unknown.
 * https://github.com/typescript-eslint/typescript-eslint/issues/1071#issuecomment-541955753
 */ function $868bb48821d209c4$var$isObjectLike(candidate) {
    return typeof candidate === 'object' && candidate !== null;
}
function $868bb48821d209c4$var$deprecate(fn, message) {
    var warned = false;
    function deprecated() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (!warned) {
            console.warn(message);
            warned = true;
        }
        return fn.apply(this, args);
    }
    return deprecated;
}
/**
 * Makes sure that, if a Uint8Array is passed in, it is wrapped in a Buffer.
 *
 * @param potentialBuffer - The potential buffer
 * @returns Buffer the input if potentialBuffer is a buffer, or a buffer that
 * wraps a passed in Uint8Array
 * @throws BSONTypeError If anything other than a Buffer or Uint8Array is passed in
 */ function $868bb48821d209c4$var$ensureBuffer(potentialBuffer) {
    if (ArrayBuffer.isView(potentialBuffer)) return $868bb48821d209c4$var$buffer_1.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);
    if ($868bb48821d209c4$var$isAnyArrayBuffer(potentialBuffer)) return $868bb48821d209c4$var$buffer_1.from(potentialBuffer);
    throw new $868bb48821d209c4$export$5f4690e5e32707d3('Must use either Buffer or TypedArray');
}
// Validation regex for v4 uuid (validates with or without dashes)
var $868bb48821d209c4$var$VALIDATION_REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15})$/i;
var $868bb48821d209c4$var$uuidValidateString = function(str) {
    return typeof str === 'string' && $868bb48821d209c4$var$VALIDATION_REGEX.test(str);
};
var $868bb48821d209c4$var$uuidHexStringToBuffer = function(hexString) {
    if (!$868bb48821d209c4$var$uuidValidateString(hexString)) throw new $868bb48821d209c4$export$5f4690e5e32707d3('UUID string representations must be a 32 or 36 character hex string (dashes excluded/included). Format: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" or "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".');
    var sanitizedHexString = hexString.replace(/-/g, '');
    return $868bb48821d209c4$var$buffer_1.from(sanitizedHexString, 'hex');
};
var $868bb48821d209c4$var$bufferToUuidHexString = function(buffer, includeDashes) {
    if (includeDashes === void 0) includeDashes = true;
    return includeDashes ? buffer.toString('hex', 0, 4) + '-' + buffer.toString('hex', 4, 6) + '-' + buffer.toString('hex', 6, 8) + '-' + buffer.toString('hex', 8, 10) + '-' + buffer.toString('hex', 10, 16) : buffer.toString('hex');
};
var $868bb48821d209c4$var$BYTE_LENGTH = 16;
var $868bb48821d209c4$var$kId$1 = Symbol('id');
/**
 * A class representation of the BSON UUID type.
 * @public
 */ var $868bb48821d209c4$export$bc35efed93511c4b = function() {
    /**
     * Create an UUID type
     *
     * @param input - Can be a 32 or 36 character hex string (dashes excluded/included) or a 16 byte binary Buffer.
     */ function UUID(input) {
        if (typeof input === 'undefined') // The most common use case (blank id, new UUID() instance)
        this.id = UUID.generate();
        else if (input instanceof UUID) {
            this[$868bb48821d209c4$var$kId$1] = $868bb48821d209c4$var$buffer_1.from(input.id);
            this.__id = input.__id;
        } else if (ArrayBuffer.isView(input) && input.byteLength === $868bb48821d209c4$var$BYTE_LENGTH) this.id = $868bb48821d209c4$var$ensureBuffer(input);
        else if (typeof input === 'string') this.id = $868bb48821d209c4$var$uuidHexStringToBuffer(input);
        else throw new $868bb48821d209c4$export$5f4690e5e32707d3('Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).');
    }
    Object.defineProperty(UUID.prototype, "id", {
        /**
         * The UUID bytes
         * @readonly
         */ get: function() {
            return this[$868bb48821d209c4$var$kId$1];
        },
        set: function(value) {
            this[$868bb48821d209c4$var$kId$1] = value;
            if (UUID.cacheHexString) this.__id = $868bb48821d209c4$var$bufferToUuidHexString(value);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Generate a 16 byte uuid v4 buffer used in UUIDs
     */ /**
     * Returns the UUID id as a 32 or 36 character hex string representation, excluding/including dashes (defaults to 36 character dash separated)
     * @param includeDashes - should the string exclude dash-separators.
     * */ UUID.prototype.toHexString = function(includeDashes) {
        if (includeDashes === void 0) includeDashes = true;
        if (UUID.cacheHexString && this.__id) return this.__id;
        var uuidHexString = $868bb48821d209c4$var$bufferToUuidHexString(this.id, includeDashes);
        if (UUID.cacheHexString) this.__id = uuidHexString;
        return uuidHexString;
    };
    /**
     * Converts the id into a 36 character (dashes included) hex string, unless a encoding is specified.
     */ UUID.prototype.toString = function(encoding) {
        return encoding ? this.id.toString(encoding) : this.toHexString();
    };
    /**
     * Converts the id into its JSON string representation.
     * A 36 character (dashes included) hex string in the format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
     */ UUID.prototype.toJSON = function() {
        return this.toHexString();
    };
    /**
     * Compares the equality of this UUID with `otherID`.
     *
     * @param otherId - UUID instance to compare against.
     */ UUID.prototype.equals = function(otherId) {
        if (!otherId) return false;
        if (otherId instanceof UUID) return otherId.id.equals(this.id);
        try {
            return new UUID(otherId).id.equals(this.id);
        } catch (_a) {
            return false;
        }
    };
    /**
     * Creates a Binary instance from the current UUID.
     */ UUID.prototype.toBinary = function() {
        return new $868bb48821d209c4$export$dbada097a9bd1de9(this.id, $868bb48821d209c4$export$dbada097a9bd1de9.SUBTYPE_UUID);
    };
    /**
     * Generates a populated buffer containing a v4 uuid
     */ UUID.generate = function() {
        var bytes = $868bb48821d209c4$var$randomBytes($868bb48821d209c4$var$BYTE_LENGTH);
        // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
        // Kindly borrowed from https://github.com/uuidjs/uuid/blob/master/src/v4.js
        bytes[6] = bytes[6] & 15 | 64;
        bytes[8] = bytes[8] & 63 | 128;
        return $868bb48821d209c4$var$buffer_1.from(bytes);
    };
    /**
     * Checks if a value is a valid bson UUID
     * @param input - UUID, string or Buffer to validate.
     */ UUID.isValid = function(input) {
        if (!input) return false;
        if (input instanceof UUID) return true;
        if (typeof input === 'string') return $868bb48821d209c4$var$uuidValidateString(input);
        if ($868bb48821d209c4$var$isUint8Array(input)) {
            // check for length & uuid version (https://tools.ietf.org/html/rfc4122#section-4.1.3)
            if (input.length !== $868bb48821d209c4$var$BYTE_LENGTH) return false;
            try {
                // get this byte as hex:             xxxxxxxx-xxxx-XXxx-xxxx-xxxxxxxxxxxx
                // check first part as uuid version: xxxxxxxx-xxxx-Xxxx-xxxx-xxxxxxxxxxxx
                return parseInt(input[6].toString(16)[0], 10) === $868bb48821d209c4$export$dbada097a9bd1de9.SUBTYPE_UUID;
            } catch (_a) {
                return false;
            }
        }
        return false;
    };
    /**
     * Creates an UUID from a hex string representation of an UUID.
     * @param hexString - 32 or 36 character hex string (dashes excluded/included).
     */ UUID.createFromHexString = function(hexString) {
        var buffer = $868bb48821d209c4$var$uuidHexStringToBuffer(hexString);
        return new UUID(buffer);
    };
    /**
     * Converts to a string representation of this Id.
     *
     * @returns return the 36 character hex string representation.
     * @internal
     */ UUID.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    UUID.prototype.inspect = function() {
        return "new UUID(\"" + this.toHexString() + "\")";
    };
    return UUID;
}();
Object.defineProperty($868bb48821d209c4$export$bc35efed93511c4b.prototype, '_bsontype', {
    value: 'UUID'
});
/**
 * A class representation of the BSON Binary type.
 * @public
 */ var $868bb48821d209c4$export$dbada097a9bd1de9 = function() {
    /**
     * @param buffer - a buffer object containing the binary data.
     * @param subType - the option binary type.
     */ function Binary(buffer, subType) {
        if (!(this instanceof Binary)) return new Binary(buffer, subType);
        if (!(buffer == null) && !(typeof buffer === 'string') && !ArrayBuffer.isView(buffer) && !(buffer instanceof ArrayBuffer) && !Array.isArray(buffer)) throw new $868bb48821d209c4$export$5f4690e5e32707d3('Binary can only be constructed from string, Buffer, TypedArray, or Array<number>');
        this.sub_type = subType !== null && subType !== void 0 ? subType : Binary.BSON_BINARY_SUBTYPE_DEFAULT;
        if (buffer == null) {
            // create an empty binary buffer
            this.buffer = $868bb48821d209c4$var$buffer_1.alloc(Binary.BUFFER_SIZE);
            this.position = 0;
        } else {
            if (typeof buffer === 'string') // string
            this.buffer = $868bb48821d209c4$var$buffer_1.from(buffer, 'binary');
            else if (Array.isArray(buffer)) // number[]
            this.buffer = $868bb48821d209c4$var$buffer_1.from(buffer);
            else // Buffer | TypedArray | ArrayBuffer
            this.buffer = $868bb48821d209c4$var$ensureBuffer(buffer);
            this.position = this.buffer.byteLength;
        }
    }
    /**
     * Updates this binary with byte_value.
     *
     * @param byteValue - a single byte we wish to write.
     */ Binary.prototype.put = function(byteValue) {
        // If it's a string and a has more than one character throw an error
        if (typeof byteValue === 'string' && byteValue.length !== 1) throw new $868bb48821d209c4$export$5f4690e5e32707d3('only accepts single character String');
        else if (typeof byteValue !== 'number' && byteValue.length !== 1) throw new $868bb48821d209c4$export$5f4690e5e32707d3('only accepts single character Uint8Array or Array');
        // Decode the byte value once
        var decodedByte;
        if (typeof byteValue === 'string') decodedByte = byteValue.charCodeAt(0);
        else if (typeof byteValue === 'number') decodedByte = byteValue;
        else decodedByte = byteValue[0];
        if (decodedByte < 0 || decodedByte > 255) throw new $868bb48821d209c4$export$5f4690e5e32707d3('only accepts number in a valid unsigned byte range 0-255');
        if (this.buffer.length > this.position) this.buffer[this.position++] = decodedByte;
        else {
            var buffer = $868bb48821d209c4$var$buffer_1.alloc(Binary.BUFFER_SIZE + this.buffer.length);
            // Combine the two buffers together
            this.buffer.copy(buffer, 0, 0, this.buffer.length);
            this.buffer = buffer;
            this.buffer[this.position++] = decodedByte;
        }
    };
    /**
     * Writes a buffer or string to the binary.
     *
     * @param sequence - a string or buffer to be written to the Binary BSON object.
     * @param offset - specify the binary of where to write the content.
     */ Binary.prototype.write = function(sequence, offset) {
        offset = typeof offset === 'number' ? offset : this.position;
        // If the buffer is to small let's extend the buffer
        if (this.buffer.length < offset + sequence.length) {
            var buffer = $868bb48821d209c4$var$buffer_1.alloc(this.buffer.length + sequence.length);
            this.buffer.copy(buffer, 0, 0, this.buffer.length);
            // Assign the new buffer
            this.buffer = buffer;
        }
        if (ArrayBuffer.isView(sequence)) {
            this.buffer.set($868bb48821d209c4$var$ensureBuffer(sequence), offset);
            this.position = offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;
        } else if (typeof sequence === 'string') {
            this.buffer.write(sequence, offset, sequence.length, 'binary');
            this.position = offset + sequence.length > this.position ? offset + sequence.length : this.position;
        }
    };
    /**
     * Reads **length** bytes starting at **position**.
     *
     * @param position - read from the given position in the Binary.
     * @param length - the number of bytes to read.
     */ Binary.prototype.read = function(position, length) {
        length = length && length > 0 ? length : this.position;
        // Let's return the data based on the type we have
        return this.buffer.slice(position, position + length);
    };
    /**
     * Returns the value of this binary as a string.
     * @param asRaw - Will skip converting to a string
     * @remarks
     * This is handy when calling this function conditionally for some key value pairs and not others
     */ Binary.prototype.value = function(asRaw) {
        asRaw = !!asRaw;
        // Optimize to serialize for the situation where the data == size of buffer
        if (asRaw && this.buffer.length === this.position) return this.buffer;
        // If it's a node.js buffer object
        if (asRaw) return this.buffer.slice(0, this.position);
        return this.buffer.toString('binary', 0, this.position);
    };
    /** the length of the binary sequence */ Binary.prototype.length = function() {
        return this.position;
    };
    Binary.prototype.toJSON = function() {
        return this.buffer.toString('base64');
    };
    Binary.prototype.toString = function(format) {
        return this.buffer.toString(format);
    };
    /** @internal */ Binary.prototype.toExtendedJSON = function(options) {
        options = options || {
        };
        var base64String = this.buffer.toString('base64');
        var subType = Number(this.sub_type).toString(16);
        if (options.legacy) return {
            $binary: base64String,
            $type: subType.length === 1 ? '0' + subType : subType
        };
        return {
            $binary: {
                base64: base64String,
                subType: subType.length === 1 ? '0' + subType : subType
            }
        };
    };
    Binary.prototype.toUUID = function() {
        if (this.sub_type === Binary.SUBTYPE_UUID) return new $868bb48821d209c4$export$bc35efed93511c4b(this.buffer.slice(0, this.position));
        throw new $868bb48821d209c4$export$dcd4c628d4081c37("Binary sub_type \"" + this.sub_type + "\" is not supported for converting to UUID. Only \"" + Binary.SUBTYPE_UUID + "\" is currently supported.");
    };
    /** @internal */ Binary.fromExtendedJSON = function(doc, options) {
        options = options || {
        };
        var data;
        var type;
        if ('$binary' in doc) {
            if (options.legacy && typeof doc.$binary === 'string' && '$type' in doc) {
                type = doc.$type ? parseInt(doc.$type, 16) : 0;
                data = $868bb48821d209c4$var$buffer_1.from(doc.$binary, 'base64');
            } else if (typeof doc.$binary !== 'string') {
                type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;
                data = $868bb48821d209c4$var$buffer_1.from(doc.$binary.base64, 'base64');
            }
        } else if ('$uuid' in doc) {
            type = 4;
            data = $868bb48821d209c4$var$uuidHexStringToBuffer(doc.$uuid);
        }
        if (!data) throw new $868bb48821d209c4$export$5f4690e5e32707d3("Unexpected Binary Extended JSON format " + JSON.stringify(doc));
        return new Binary(data, type);
    };
    /** @internal */ Binary.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    Binary.prototype.inspect = function() {
        var asBuffer = this.value(true);
        return "new Binary(Buffer.from(\"" + asBuffer.toString('hex') + "\", \"hex\"), " + this.sub_type + ")";
    };
    /**
     * Binary default subtype
     * @internal
     */ Binary.BSON_BINARY_SUBTYPE_DEFAULT = 0;
    /** Initial buffer default size */ Binary.BUFFER_SIZE = 256;
    /** Default BSON type */ Binary.SUBTYPE_DEFAULT = 0;
    /** Function BSON type */ Binary.SUBTYPE_FUNCTION = 1;
    /** Byte Array BSON type */ Binary.SUBTYPE_BYTE_ARRAY = 2;
    /** Deprecated UUID BSON type @deprecated Please use SUBTYPE_UUID */ Binary.SUBTYPE_UUID_OLD = 3;
    /** UUID BSON type */ Binary.SUBTYPE_UUID = 4;
    /** MD5 BSON type */ Binary.SUBTYPE_MD5 = 5;
    /** Encrypted BSON type */ Binary.SUBTYPE_ENCRYPTED = 6;
    /** Column BSON type */ Binary.SUBTYPE_COLUMN = 7;
    /** User BSON type */ Binary.SUBTYPE_USER_DEFINED = 128;
    return Binary;
}();
Object.defineProperty($868bb48821d209c4$export$dbada097a9bd1de9.prototype, '_bsontype', {
    value: 'Binary'
});
/**
 * A class representation of the BSON Code type.
 * @public
 */ var $868bb48821d209c4$export$52f0f02147b12c03 = function() {
    /**
     * @param code - a string or function.
     * @param scope - an optional scope for the function.
     */ function Code(code, scope) {
        if (!(this instanceof Code)) return new Code(code, scope);
        this.code = code;
        this.scope = scope;
    }
    Code.prototype.toJSON = function() {
        return {
            code: this.code,
            scope: this.scope
        };
    };
    /** @internal */ Code.prototype.toExtendedJSON = function() {
        if (this.scope) return {
            $code: this.code,
            $scope: this.scope
        };
        return {
            $code: this.code
        };
    };
    /** @internal */ Code.fromExtendedJSON = function(doc) {
        return new Code(doc.$code, doc.$scope);
    };
    /** @internal */ Code.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    Code.prototype.inspect = function() {
        var codeJson = this.toJSON();
        return "new Code(\"" + codeJson.code + "\"" + (codeJson.scope ? ", " + JSON.stringify(codeJson.scope) : '') + ")";
    };
    return Code;
}();
Object.defineProperty($868bb48821d209c4$export$52f0f02147b12c03.prototype, '_bsontype', {
    value: 'Code'
});
/** @internal */ function $868bb48821d209c4$var$isDBRefLike(value) {
    return $868bb48821d209c4$var$isObjectLike(value) && value.$id != null && typeof value.$ref === 'string' && (value.$db == null || typeof value.$db === 'string');
}
/**
 * A class representation of the BSON DBRef type.
 * @public
 */ var $868bb48821d209c4$export$90e456a500235b9 = function() {
    /**
     * @param collection - the collection name.
     * @param oid - the reference ObjectId.
     * @param db - optional db name, if omitted the reference is local to the current db.
     */ function DBRef(collection, oid, db, fields) {
        if (!(this instanceof DBRef)) return new DBRef(collection, oid, db, fields);
        // check if namespace has been provided
        var parts = collection.split('.');
        if (parts.length === 2) {
            db = parts.shift();
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            collection = parts.shift();
        }
        this.collection = collection;
        this.oid = oid;
        this.db = db;
        this.fields = fields || {
        };
    }
    Object.defineProperty(DBRef.prototype, "namespace", {
        // Property provided for compatibility with the 1.x parser
        // the 1.x parser used a "namespace" property, while 4.x uses "collection"
        /** @internal */ get: function() {
            return this.collection;
        },
        set: function(value) {
            this.collection = value;
        },
        enumerable: false,
        configurable: true
    });
    DBRef.prototype.toJSON = function() {
        var o = Object.assign({
            $ref: this.collection,
            $id: this.oid
        }, this.fields);
        if (this.db != null) o.$db = this.db;
        return o;
    };
    /** @internal */ DBRef.prototype.toExtendedJSON = function(options) {
        options = options || {
        };
        var o = {
            $ref: this.collection,
            $id: this.oid
        };
        if (options.legacy) return o;
        if (this.db) o.$db = this.db;
        o = Object.assign(o, this.fields);
        return o;
    };
    /** @internal */ DBRef.fromExtendedJSON = function(doc) {
        var copy = Object.assign({
        }, doc);
        delete copy.$ref;
        delete copy.$id;
        delete copy.$db;
        return new DBRef(doc.$ref, doc.$id, doc.$db, copy);
    };
    /** @internal */ DBRef.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    DBRef.prototype.inspect = function() {
        // NOTE: if OID is an ObjectId class it will just print the oid string.
        var oid = this.oid === undefined || this.oid.toString === undefined ? this.oid : this.oid.toString();
        return "new DBRef(\"" + this.namespace + "\", new ObjectId(\"" + oid + "\")" + (this.db ? ", \"" + this.db + "\"" : '') + ")";
    };
    return DBRef;
}();
Object.defineProperty($868bb48821d209c4$export$90e456a500235b9.prototype, '_bsontype', {
    value: 'DBRef'
});
/**
 * wasm optimizations, to do native i64 multiplication and divide
 */ var $868bb48821d209c4$var$wasm = undefined;
try {
    $868bb48821d209c4$var$wasm = new WebAssembly.Instance(new WebAssembly.Module(// prettier-ignore
    new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        13,
        2,
        96,
        0,
        1,
        127,
        96,
        4,
        127,
        127,
        127,
        127,
        1,
        127,
        3,
        7,
        6,
        0,
        1,
        1,
        1,
        1,
        1,
        6,
        6,
        1,
        127,
        1,
        65,
        0,
        11,
        7,
        50,
        6,
        3,
        109,
        117,
        108,
        0,
        1,
        5,
        100,
        105,
        118,
        95,
        115,
        0,
        2,
        5,
        100,
        105,
        118,
        95,
        117,
        0,
        3,
        5,
        114,
        101,
        109,
        95,
        115,
        0,
        4,
        5,
        114,
        101,
        109,
        95,
        117,
        0,
        5,
        8,
        103,
        101,
        116,
        95,
        104,
        105,
        103,
        104,
        0,
        0,
        10,
        191,
        1,
        6,
        4,
        0,
        35,
        0,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        126,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        127,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        128,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        129,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        130,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11
    ])), {
    }).exports;
} catch (_a1) {
// no wasm support
}
var $868bb48821d209c4$var$TWO_PWR_16_DBL = 65536;
var $868bb48821d209c4$var$TWO_PWR_24_DBL = 16777216;
var $868bb48821d209c4$var$TWO_PWR_32_DBL = $868bb48821d209c4$var$TWO_PWR_16_DBL * $868bb48821d209c4$var$TWO_PWR_16_DBL;
var $868bb48821d209c4$var$TWO_PWR_64_DBL = $868bb48821d209c4$var$TWO_PWR_32_DBL * $868bb48821d209c4$var$TWO_PWR_32_DBL;
var $868bb48821d209c4$var$TWO_PWR_63_DBL = $868bb48821d209c4$var$TWO_PWR_64_DBL / 2;
/** A cache of the Long representations of small integer values. */ var $868bb48821d209c4$var$INT_CACHE = {
};
/** A cache of the Long representations of small unsigned integer values. */ var $868bb48821d209c4$var$UINT_CACHE = {
};
/**
 * A class representing a 64-bit integer
 * @public
 * @remarks
 * The internal representation of a long is the two given signed, 32-bit values.
 * We use 32-bit pieces because these are the size of integers on which
 * Javascript performs bit-operations.  For operations like addition and
 * multiplication, we split each number into 16 bit pieces, which can easily be
 * multiplied within Javascript's floating-point representation without overflow
 * or change in sign.
 * In the algorithms below, we frequently reduce the negative case to the
 * positive case by negating the input(s) and then post-processing the result.
 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
 * a positive number, it overflows back into a negative).  Not handling this
 * case would often result in infinite recursion.
 * Common constant values ZERO, ONE, NEG_ONE, etc. are found as static properties on this class.
 */ var $868bb48821d209c4$export$12ac1d26449d9c2e = function() {
    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     *
     * Acceptable signatures are:
     * - Long(low, high, unsigned?)
     * - Long(bigint, unsigned?)
     * - Long(string, unsigned?)
     *
     * @param low - The low (signed) 32 bits of the long
     * @param high - The high (signed) 32 bits of the long
     * @param unsigned - Whether unsigned or not, defaults to signed
     */ function Long(low, high, unsigned) {
        if (low === void 0) low = 0;
        if (!(this instanceof Long)) return new Long(low, high, unsigned);
        if (typeof low === 'bigint') Object.assign(this, Long.fromBigInt(low, !!high));
        else if (typeof low === 'string') Object.assign(this, Long.fromString(low, !!high));
        else {
            this.low = low | 0;
            this.high = high | 0;
            this.unsigned = !!unsigned;
        }
        Object.defineProperty(this, '__isLong__', {
            value: true,
            configurable: false,
            writable: false,
            enumerable: false
        });
    }
    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits.
     * Each is assumed to use 32 bits.
     * @param lowBits - The low 32 bits
     * @param highBits - The high 32 bits
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */ Long.fromBits = function(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
    };
    /**
     * Returns a Long representing the given 32 bit integer value.
     * @param value - The 32 bit integer in question
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */ Long.fromInt = function(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
            value >>>= 0;
            if (cache = 0 <= value && value < 256) {
                cachedObj = $868bb48821d209c4$var$UINT_CACHE[value];
                if (cachedObj) return cachedObj;
            }
            obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);
            if (cache) $868bb48821d209c4$var$UINT_CACHE[value] = obj;
            return obj;
        } else {
            value |= 0;
            if (cache = -128 <= value && value < 128) {
                cachedObj = $868bb48821d209c4$var$INT_CACHE[value];
                if (cachedObj) return cachedObj;
            }
            obj = Long.fromBits(value, value < 0 ? -1 : 0, false);
            if (cache) $868bb48821d209c4$var$INT_CACHE[value] = obj;
            return obj;
        }
    };
    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @param value - The number in question
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */ Long.fromNumber = function(value, unsigned) {
        if (isNaN(value)) return unsigned ? Long.UZERO : Long.ZERO;
        if (unsigned) {
            if (value < 0) return Long.UZERO;
            if (value >= $868bb48821d209c4$var$TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;
        } else {
            if (value <= -$868bb48821d209c4$var$TWO_PWR_63_DBL) return Long.MIN_VALUE;
            if (value + 1 >= $868bb48821d209c4$var$TWO_PWR_63_DBL) return Long.MAX_VALUE;
        }
        if (value < 0) return Long.fromNumber(-value, unsigned).neg();
        return Long.fromBits(value % $868bb48821d209c4$var$TWO_PWR_32_DBL | 0, value / $868bb48821d209c4$var$TWO_PWR_32_DBL | 0, unsigned);
    };
    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @param value - The number in question
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */ Long.fromBigInt = function(value, unsigned) {
        return Long.fromString(value.toString(), unsigned);
    };
    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @param str - The textual representation of the Long
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @param radix - The radix in which the text is written (2-36), defaults to 10
     * @returns The corresponding Long value
     */ Long.fromString = function(str, unsigned, radix) {
        if (str.length === 0) throw Error('empty string');
        if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity') return Long.ZERO;
        if (typeof unsigned === 'number') // For goog.math.long compatibility
        radix = unsigned, unsigned = false;
        else unsigned = !!unsigned;
        radix = radix || 10;
        if (radix < 2 || 36 < radix) throw RangeError('radix');
        var p;
        if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');
        else if (p === 0) return Long.fromString(str.substring(1), unsigned, radix).neg();
        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 8));
        var result = Long.ZERO;
        for(var i = 0; i < str.length; i += 8){
            var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = Long.fromNumber(Math.pow(radix, size));
                result = result.mul(power).add(Long.fromNumber(value));
            } else {
                result = result.mul(radixToPower);
                result = result.add(Long.fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    };
    /**
     * Creates a Long from its byte representation.
     * @param bytes - Byte representation
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @param le - Whether little or big endian, defaults to big endian
     * @returns The corresponding Long value
     */ Long.fromBytes = function(bytes, unsigned, le) {
        return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
    };
    /**
     * Creates a Long from its little endian byte representation.
     * @param bytes - Little endian byte representation
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */ Long.fromBytesLE = function(bytes, unsigned) {
        return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
    };
    /**
     * Creates a Long from its big endian byte representation.
     * @param bytes - Big endian byte representation
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */ Long.fromBytesBE = function(bytes, unsigned) {
        return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
    };
    /**
     * Tests if the specified object is a Long.
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    Long.isLong = function(value) {
        return $868bb48821d209c4$var$isObjectLike(value) && value['__isLong__'] === true;
    };
    /**
     * Converts the specified value to a Long.
     * @param unsigned - Whether unsigned or not, defaults to signed
     */ Long.fromValue = function(val, unsigned) {
        if (typeof val === 'number') return Long.fromNumber(val, unsigned);
        if (typeof val === 'string') return Long.fromString(val, unsigned);
        // Throws for non-objects, converts non-instanceof Long:
        return Long.fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
    };
    /** Returns the sum of this and the specified Long. */ Long.prototype.add = function(addend) {
        if (!Long.isLong(addend)) addend = Long.fromValue(addend);
        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = addend.high >>> 16;
        var b32 = addend.high & 65535;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 + b48;
        c48 &= 65535;
        return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    /**
     * Returns the sum of this and the specified Long.
     * @returns Sum
     */ Long.prototype.and = function(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };
    /**
     * Compares this Long's value with the specified's.
     * @returns 0 if they are the same, 1 if the this is greater and -1 if the given one is greater
     */ Long.prototype.compare = function(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        if (this.eq(other)) return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg) return -1;
        if (!thisNeg && otherNeg) return 1;
        // At this point the sign bits are the same
        if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;
        // Both are positive if at least one is unsigned
        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
    };
    /** This is an alias of {@link Long.compare} */ Long.prototype.comp = function(other) {
        return this.compare(other);
    };
    /**
     * Returns this Long divided by the specified. The result is signed if this Long is signed or unsigned if this Long is unsigned.
     * @returns Quotient
     */ Long.prototype.divide = function(divisor) {
        if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);
        if (divisor.isZero()) throw Error('division by zero');
        // use wasm support if present
        if ($868bb48821d209c4$var$wasm) {
            // guard against signed division overflow: the largest
            // negative number / -1 would be 1 larger than the largest
            // positive number, due to two's complement.
            if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) // be consistent with non-wasm code path
            return this;
            var low = (this.unsigned ? $868bb48821d209c4$var$wasm.div_u : $868bb48821d209c4$var$wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
            return Long.fromBits(low, $868bb48821d209c4$var$wasm.get_high(), this.unsigned);
        }
        if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
            // This section is only relevant for signed longs and is derived from the
            // closure library as a whole.
            if (this.eq(Long.MIN_VALUE)) {
                if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE)) return Long.MIN_VALUE;
                else if (divisor.eq(Long.MIN_VALUE)) return Long.ONE;
                else {
                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                    var halfThis = this.shr(1);
                    approx = halfThis.div(divisor).shl(1);
                    if (approx.eq(Long.ZERO)) return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;
                    else {
                        rem = this.sub(divisor.mul(approx));
                        res = approx.add(rem.div(divisor));
                        return res;
                    }
                }
            } else if (divisor.eq(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;
            if (this.isNegative()) {
                if (divisor.isNegative()) return this.neg().div(divisor.neg());
                return this.neg().div(divisor).neg();
            } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();
            res = Long.ZERO;
        } else {
            // The algorithm below has not been made for unsigned longs. It's therefore
            // required to take special care of the MSB prior to running it.
            if (!divisor.unsigned) divisor = divisor.toUnsigned();
            if (divisor.gt(this)) return Long.UZERO;
            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return Long.UONE;
            res = Long.UZERO;
        }
        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        rem = this;
        while(rem.gte(divisor)){
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2);
            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
            // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
            var approxRes = Long.fromNumber(approx);
            var approxRem = approxRes.mul(divisor);
            while(approxRem.isNegative() || approxRem.gt(rem)){
                approx -= delta;
                approxRes = Long.fromNumber(approx, this.unsigned);
                approxRem = approxRes.mul(divisor);
            }
            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero()) approxRes = Long.ONE;
            res = res.add(approxRes);
            rem = rem.sub(approxRem);
        }
        return res;
    };
    /**This is an alias of {@link Long.divide} */ Long.prototype.div = function(divisor) {
        return this.divide(divisor);
    };
    /**
     * Tests if this Long's value equals the specified's.
     * @param other - Other value
     */ Long.prototype.equals = function(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
        return this.high === other.high && this.low === other.low;
    };
    /** This is an alias of {@link Long.equals} */ Long.prototype.eq = function(other) {
        return this.equals(other);
    };
    /** Gets the high 32 bits as a signed integer. */ Long.prototype.getHighBits = function() {
        return this.high;
    };
    /** Gets the high 32 bits as an unsigned integer. */ Long.prototype.getHighBitsUnsigned = function() {
        return this.high >>> 0;
    };
    /** Gets the low 32 bits as a signed integer. */ Long.prototype.getLowBits = function() {
        return this.low;
    };
    /** Gets the low 32 bits as an unsigned integer. */ Long.prototype.getLowBitsUnsigned = function() {
        return this.low >>> 0;
    };
    /** Gets the number of bits needed to represent the absolute value of this Long. */ Long.prototype.getNumBitsAbs = function() {
        if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high !== 0 ? this.high : this.low;
        var bit;
        for(bit = 31; bit > 0; bit--)if ((val & 1 << bit) !== 0) break;
        return this.high !== 0 ? bit + 33 : bit + 1;
    };
    /** Tests if this Long's value is greater than the specified's. */ Long.prototype.greaterThan = function(other) {
        return this.comp(other) > 0;
    };
    /** This is an alias of {@link Long.greaterThan} */ Long.prototype.gt = function(other) {
        return this.greaterThan(other);
    };
    /** Tests if this Long's value is greater than or equal the specified's. */ Long.prototype.greaterThanOrEqual = function(other) {
        return this.comp(other) >= 0;
    };
    /** This is an alias of {@link Long.greaterThanOrEqual} */ Long.prototype.gte = function(other) {
        return this.greaterThanOrEqual(other);
    };
    /** This is an alias of {@link Long.greaterThanOrEqual} */ Long.prototype.ge = function(other) {
        return this.greaterThanOrEqual(other);
    };
    /** Tests if this Long's value is even. */ Long.prototype.isEven = function() {
        return (this.low & 1) === 0;
    };
    /** Tests if this Long's value is negative. */ Long.prototype.isNegative = function() {
        return !this.unsigned && this.high < 0;
    };
    /** Tests if this Long's value is odd. */ Long.prototype.isOdd = function() {
        return (this.low & 1) === 1;
    };
    /** Tests if this Long's value is positive. */ Long.prototype.isPositive = function() {
        return this.unsigned || this.high >= 0;
    };
    /** Tests if this Long's value equals zero. */ Long.prototype.isZero = function() {
        return this.high === 0 && this.low === 0;
    };
    /** Tests if this Long's value is less than the specified's. */ Long.prototype.lessThan = function(other) {
        return this.comp(other) < 0;
    };
    /** This is an alias of {@link Long#lessThan}. */ Long.prototype.lt = function(other) {
        return this.lessThan(other);
    };
    /** Tests if this Long's value is less than or equal the specified's. */ Long.prototype.lessThanOrEqual = function(other) {
        return this.comp(other) <= 0;
    };
    /** This is an alias of {@link Long.lessThanOrEqual} */ Long.prototype.lte = function(other) {
        return this.lessThanOrEqual(other);
    };
    /** Returns this Long modulo the specified. */ Long.prototype.modulo = function(divisor) {
        if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);
        // use wasm support if present
        if ($868bb48821d209c4$var$wasm) {
            var low = (this.unsigned ? $868bb48821d209c4$var$wasm.rem_u : $868bb48821d209c4$var$wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
            return Long.fromBits(low, $868bb48821d209c4$var$wasm.get_high(), this.unsigned);
        }
        return this.sub(this.div(divisor).mul(divisor));
    };
    /** This is an alias of {@link Long.modulo} */ Long.prototype.mod = function(divisor) {
        return this.modulo(divisor);
    };
    /** This is an alias of {@link Long.modulo} */ Long.prototype.rem = function(divisor) {
        return this.modulo(divisor);
    };
    /**
     * Returns the product of this and the specified Long.
     * @param multiplier - Multiplier
     * @returns Product
     */ Long.prototype.multiply = function(multiplier) {
        if (this.isZero()) return Long.ZERO;
        if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);
        // use wasm support if present
        if ($868bb48821d209c4$var$wasm) {
            var low = $868bb48821d209c4$var$wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
            return Long.fromBits(low, $868bb48821d209c4$var$wasm.get_high(), this.unsigned);
        }
        if (multiplier.isZero()) return Long.ZERO;
        if (this.eq(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;
        if (multiplier.eq(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;
        if (this.isNegative()) {
            if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());
            else return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();
        // If both longs are small, use float multiplication
        if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24)) return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 65535;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 65535;
        return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    /** This is an alias of {@link Long.multiply} */ Long.prototype.mul = function(multiplier) {
        return this.multiply(multiplier);
    };
    /** Returns the Negation of this Long's value. */ Long.prototype.negate = function() {
        if (!this.unsigned && this.eq(Long.MIN_VALUE)) return Long.MIN_VALUE;
        return this.not().add(Long.ONE);
    };
    /** This is an alias of {@link Long.negate} */ Long.prototype.neg = function() {
        return this.negate();
    };
    /** Returns the bitwise NOT of this Long. */ Long.prototype.not = function() {
        return Long.fromBits(~this.low, ~this.high, this.unsigned);
    };
    /** Tests if this Long's value differs from the specified's. */ Long.prototype.notEquals = function(other) {
        return !this.equals(other);
    };
    /** This is an alias of {@link Long.notEquals} */ Long.prototype.neq = function(other) {
        return this.notEquals(other);
    };
    /** This is an alias of {@link Long.notEquals} */ Long.prototype.ne = function(other) {
        return this.notEquals(other);
    };
    /**
     * Returns the bitwise OR of this Long and the specified.
     */ Long.prototype.or = function(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };
    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param numBits - Number of bits
     * @returns Shifted Long
     */ Long.prototype.shiftLeft = function(numBits) {
        if (Long.isLong(numBits)) numBits = numBits.toInt();
        if ((numBits &= 63) === 0) return this;
        else if (numBits < 32) return Long.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
        else return Long.fromBits(0, this.low << numBits - 32, this.unsigned);
    };
    /** This is an alias of {@link Long.shiftLeft} */ Long.prototype.shl = function(numBits) {
        return this.shiftLeft(numBits);
    };
    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param numBits - Number of bits
     * @returns Shifted Long
     */ Long.prototype.shiftRight = function(numBits) {
        if (Long.isLong(numBits)) numBits = numBits.toInt();
        if ((numBits &= 63) === 0) return this;
        else if (numBits < 32) return Long.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
        else return Long.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    };
    /** This is an alias of {@link Long.shiftRight} */ Long.prototype.shr = function(numBits) {
        return this.shiftRight(numBits);
    };
    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param numBits - Number of bits
     * @returns Shifted Long
     */ Long.prototype.shiftRightUnsigned = function(numBits) {
        if (Long.isLong(numBits)) numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0) return this;
        else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
            } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);
            else return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);
        }
    };
    /** This is an alias of {@link Long.shiftRightUnsigned} */ Long.prototype.shr_u = function(numBits) {
        return this.shiftRightUnsigned(numBits);
    };
    /** This is an alias of {@link Long.shiftRightUnsigned} */ Long.prototype.shru = function(numBits) {
        return this.shiftRightUnsigned(numBits);
    };
    /**
     * Returns the difference of this and the specified Long.
     * @param subtrahend - Subtrahend
     * @returns Difference
     */ Long.prototype.subtract = function(subtrahend) {
        if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);
        return this.add(subtrahend.neg());
    };
    /** This is an alias of {@link Long.subtract} */ Long.prototype.sub = function(subtrahend) {
        return this.subtract(subtrahend);
    };
    /** Converts the Long to a 32 bit integer, assuming it is a 32 bit integer. */ Long.prototype.toInt = function() {
        return this.unsigned ? this.low >>> 0 : this.low;
    };
    /** Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa). */ Long.prototype.toNumber = function() {
        if (this.unsigned) return (this.high >>> 0) * $868bb48821d209c4$var$TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * $868bb48821d209c4$var$TWO_PWR_32_DBL + (this.low >>> 0);
    };
    /** Converts the Long to a BigInt (arbitrary precision). */ Long.prototype.toBigInt = function() {
        return BigInt(this.toString());
    };
    /**
     * Converts this Long to its byte representation.
     * @param le - Whether little or big endian, defaults to big endian
     * @returns Byte representation
     */ Long.prototype.toBytes = function(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
    };
    /**
     * Converts this Long to its little endian byte representation.
     * @returns Little endian byte representation
     */ Long.prototype.toBytesLE = function() {
        var hi = this.high, lo = this.low;
        return [
            lo & 255,
            lo >>> 8 & 255,
            lo >>> 16 & 255,
            lo >>> 24,
            hi & 255,
            hi >>> 8 & 255,
            hi >>> 16 & 255,
            hi >>> 24
        ];
    };
    /**
     * Converts this Long to its big endian byte representation.
     * @returns Big endian byte representation
     */ Long.prototype.toBytesBE = function() {
        var hi = this.high, lo = this.low;
        return [
            hi >>> 24,
            hi >>> 16 & 255,
            hi >>> 8 & 255,
            hi & 255,
            lo >>> 24,
            lo >>> 16 & 255,
            lo >>> 8 & 255,
            lo & 255
        ];
    };
    /**
     * Converts this Long to signed.
     */ Long.prototype.toSigned = function() {
        if (!this.unsigned) return this;
        return Long.fromBits(this.low, this.high, false);
    };
    /**
     * Converts the Long to a string written in the specified radix.
     * @param radix - Radix (2-36), defaults to 10
     * @throws RangeError If `radix` is out of range
     */ Long.prototype.toString = function(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix) throw RangeError('radix');
        if (this.isZero()) return '0';
        if (this.isNegative()) {
            // Unsigned Longs are never negative
            if (this.eq(Long.MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = Long.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
                return div.toString(radix) + rem1.toInt().toString(radix);
            } else return '-' + this.neg().toString(radix);
        }
        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var rem = this;
        var result = '';
        // eslint-disable-next-line no-constant-condition
        while(true){
            var remDiv = rem.div(radixToPower);
            var intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;
            var digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero()) return digits + result;
            else {
                while(digits.length < 6)digits = '0' + digits;
                result = '' + digits + result;
            }
        }
    };
    /** Converts this Long to unsigned. */ Long.prototype.toUnsigned = function() {
        if (this.unsigned) return this;
        return Long.fromBits(this.low, this.high, true);
    };
    /** Returns the bitwise XOR of this Long and the given one. */ Long.prototype.xor = function(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };
    /** This is an alias of {@link Long.isZero} */ Long.prototype.eqz = function() {
        return this.isZero();
    };
    /** This is an alias of {@link Long.lessThanOrEqual} */ Long.prototype.le = function(other) {
        return this.lessThanOrEqual(other);
    };
    /*
     ****************************************************************
     *                  BSON SPECIFIC ADDITIONS                     *
     ****************************************************************
     */ Long.prototype.toExtendedJSON = function(options) {
        if (options && options.relaxed) return this.toNumber();
        return {
            $numberLong: this.toString()
        };
    };
    Long.fromExtendedJSON = function(doc, options) {
        var result = Long.fromString(doc.$numberLong);
        return options && options.relaxed ? result.toNumber() : result;
    };
    /** @internal */ Long.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    Long.prototype.inspect = function() {
        return "new Long(\"" + this.toString() + "\"" + (this.unsigned ? ', true' : '') + ")";
    };
    Long.TWO_PWR_24 = Long.fromInt($868bb48821d209c4$var$TWO_PWR_24_DBL);
    /** Maximum unsigned value. */ Long.MAX_UNSIGNED_VALUE = Long.fromBits(-1, -1, true);
    /** Signed zero */ Long.ZERO = Long.fromInt(0);
    /** Unsigned zero. */ Long.UZERO = Long.fromInt(0, true);
    /** Signed one. */ Long.ONE = Long.fromInt(1);
    /** Unsigned one. */ Long.UONE = Long.fromInt(1, true);
    /** Signed negative one. */ Long.NEG_ONE = Long.fromInt(-1);
    /** Maximum signed value. */ Long.MAX_VALUE = Long.fromBits(-1, 2147483647, false);
    /** Minimum signed value. */ Long.MIN_VALUE = Long.fromBits(0, -2147483648, false);
    return Long;
}();
Object.defineProperty($868bb48821d209c4$export$12ac1d26449d9c2e.prototype, '__isLong__', {
    value: true
});
Object.defineProperty($868bb48821d209c4$export$12ac1d26449d9c2e.prototype, '_bsontype', {
    value: 'Long'
});
var $868bb48821d209c4$var$PARSE_STRING_REGEXP = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/;
var $868bb48821d209c4$var$PARSE_INF_REGEXP = /^(\+|-)?(Infinity|inf)$/i;
var $868bb48821d209c4$var$PARSE_NAN_REGEXP = /^(\+|-)?NaN$/i;
var $868bb48821d209c4$var$EXPONENT_MAX = 6111;
var $868bb48821d209c4$var$EXPONENT_MIN = -6176;
var $868bb48821d209c4$var$EXPONENT_BIAS = 6176;
var $868bb48821d209c4$var$MAX_DIGITS = 34;
// Nan value bits as 32 bit values (due to lack of longs)
var $868bb48821d209c4$var$NAN_BUFFER = [
    124,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
].reverse();
// Infinity value bits 32 bit values (due to lack of longs)
var $868bb48821d209c4$var$INF_NEGATIVE_BUFFER = [
    248,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
].reverse();
var $868bb48821d209c4$var$INF_POSITIVE_BUFFER = [
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
].reverse();
var $868bb48821d209c4$var$EXPONENT_REGEX = /^([-+])?(\d+)?$/;
// Extract least significant 5 bits
var $868bb48821d209c4$var$COMBINATION_MASK = 31;
// Extract least significant 14 bits
var $868bb48821d209c4$var$EXPONENT_MASK = 16383;
// Value of combination field for Inf
var $868bb48821d209c4$var$COMBINATION_INFINITY = 30;
// Value of combination field for NaN
var $868bb48821d209c4$var$COMBINATION_NAN = 31;
// Detect if the value is a digit
function $868bb48821d209c4$var$isDigit(value) {
    return !isNaN(parseInt(value, 10));
}
// Divide two uint128 values
function $868bb48821d209c4$var$divideu128(value) {
    var DIVISOR = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(1000000000);
    var _rem = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(0);
    if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) return {
        quotient: value,
        rem: _rem
    };
    for(var i = 0; i <= 3; i++){
        // Adjust remainder to match value of next dividend
        _rem = _rem.shiftLeft(32);
        // Add the divided to _rem
        _rem = _rem.add(new $868bb48821d209c4$export$12ac1d26449d9c2e(value.parts[i], 0));
        value.parts[i] = _rem.div(DIVISOR).low;
        _rem = _rem.modulo(DIVISOR);
    }
    return {
        quotient: value,
        rem: _rem
    };
}
// Multiply two Long values and return the 128 bit value
function $868bb48821d209c4$var$multiply64x2(left, right) {
    if (!left && !right) return {
        high: $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(0),
        low: $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(0)
    };
    var leftHigh = left.shiftRightUnsigned(32);
    var leftLow = new $868bb48821d209c4$export$12ac1d26449d9c2e(left.getLowBits(), 0);
    var rightHigh = right.shiftRightUnsigned(32);
    var rightLow = new $868bb48821d209c4$export$12ac1d26449d9c2e(right.getLowBits(), 0);
    var productHigh = leftHigh.multiply(rightHigh);
    var productMid = leftHigh.multiply(rightLow);
    var productMid2 = leftLow.multiply(rightHigh);
    var productLow = leftLow.multiply(rightLow);
    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productMid = new $868bb48821d209c4$export$12ac1d26449d9c2e(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));
    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productLow = productMid.shiftLeft(32).add(new $868bb48821d209c4$export$12ac1d26449d9c2e(productLow.getLowBits(), 0));
    // Return the 128 bit result
    return {
        high: productHigh,
        low: productLow
    };
}
function $868bb48821d209c4$var$lessThan(left, right) {
    // Make values unsigned
    var uhleft = left.high >>> 0;
    var uhright = right.high >>> 0;
    // Compare high bits first
    if (uhleft < uhright) return true;
    else if (uhleft === uhright) {
        var ulleft = left.low >>> 0;
        var ulright = right.low >>> 0;
        if (ulleft < ulright) return true;
    }
    return false;
}
function $868bb48821d209c4$var$invalidErr(string, message) {
    throw new $868bb48821d209c4$export$5f4690e5e32707d3("\"" + string + "\" is not a valid Decimal128 string - " + message);
}
/**
 * A class representation of the BSON Decimal128 type.
 * @public
 */ var $868bb48821d209c4$export$39efe8a3f1c2d4eb = function() {
    /**
     * @param bytes - a buffer containing the raw Decimal128 bytes in little endian order,
     *                or a string representation as returned by .toString()
     */ function Decimal128(bytes) {
        if (!(this instanceof Decimal128)) return new Decimal128(bytes);
        if (typeof bytes === 'string') this.bytes = Decimal128.fromString(bytes).bytes;
        else this.bytes = bytes;
    }
    /**
     * Create a Decimal128 instance from a string representation
     *
     * @param representation - a numeric string representation.
     */ Decimal128.fromString = function(representation) {
        // Parse state tracking
        var isNegative = false;
        var sawRadix = false;
        var foundNonZero = false;
        // Total number of significant digits (no leading or trailing zero)
        var significantDigits = 0;
        // Total number of significand digits read
        var nDigitsRead = 0;
        // Total number of digits (no leading zeros)
        var nDigits = 0;
        // The number of the digits after radix
        var radixPosition = 0;
        // The index of the first non-zero in *str*
        var firstNonZero = 0;
        // Digits Array
        var digits = [
            0
        ];
        // The number of digits in digits
        var nDigitsStored = 0;
        // Insertion pointer for digits
        var digitsInsert = 0;
        // The index of the first non-zero digit
        var firstDigit = 0;
        // The index of the last digit
        var lastDigit = 0;
        // Exponent
        var exponent = 0;
        // loop index over array
        var i = 0;
        // The high 17 digits of the significand
        var significandHigh = new $868bb48821d209c4$export$12ac1d26449d9c2e(0, 0);
        // The low 17 digits of the significand
        var significandLow = new $868bb48821d209c4$export$12ac1d26449d9c2e(0, 0);
        // The biased exponent
        var biasedExponent = 0;
        // Read index
        var index = 0;
        // Naively prevent against REDOS attacks.
        // TODO: implementing a custom parsing for this, or refactoring the regex would yield
        //       further gains.
        if (representation.length >= 7000) throw new $868bb48821d209c4$export$5f4690e5e32707d3('' + representation + ' not a valid Decimal128 string');
        // Results
        var stringMatch = representation.match($868bb48821d209c4$var$PARSE_STRING_REGEXP);
        var infMatch = representation.match($868bb48821d209c4$var$PARSE_INF_REGEXP);
        var nanMatch = representation.match($868bb48821d209c4$var$PARSE_NAN_REGEXP);
        // Validate the string
        if (!stringMatch && !infMatch && !nanMatch || representation.length === 0) throw new $868bb48821d209c4$export$5f4690e5e32707d3('' + representation + ' not a valid Decimal128 string');
        if (stringMatch) {
            // full_match = stringMatch[0]
            // sign = stringMatch[1]
            var unsignedNumber = stringMatch[2];
            // stringMatch[3] is undefined if a whole number (ex "1", 12")
            // but defined if a number w/ decimal in it (ex "1.0, 12.2")
            var e = stringMatch[4];
            var expSign = stringMatch[5];
            var expNumber = stringMatch[6];
            // they provided e, but didn't give an exponent number. for ex "1e"
            if (e && expNumber === undefined) $868bb48821d209c4$var$invalidErr(representation, 'missing exponent power');
            // they provided e, but didn't give a number before it. for ex "e1"
            if (e && unsignedNumber === undefined) $868bb48821d209c4$var$invalidErr(representation, 'missing exponent base');
            if (e === undefined && (expSign || expNumber)) $868bb48821d209c4$var$invalidErr(representation, 'missing e before exponent');
        }
        // Get the negative or positive sign
        if (representation[index] === '+' || representation[index] === '-') isNegative = representation[index++] === '-';
        // Check if user passed Infinity or NaN
        if (!$868bb48821d209c4$var$isDigit(representation[index]) && representation[index] !== '.') {
            if (representation[index] === 'i' || representation[index] === 'I') return new Decimal128($868bb48821d209c4$var$buffer_1.from(isNegative ? $868bb48821d209c4$var$INF_NEGATIVE_BUFFER : $868bb48821d209c4$var$INF_POSITIVE_BUFFER));
            else if (representation[index] === 'N') return new Decimal128($868bb48821d209c4$var$buffer_1.from($868bb48821d209c4$var$NAN_BUFFER));
        }
        // Read all the digits
        while($868bb48821d209c4$var$isDigit(representation[index]) || representation[index] === '.'){
            if (representation[index] === '.') {
                if (sawRadix) $868bb48821d209c4$var$invalidErr(representation, 'contains multiple periods');
                sawRadix = true;
                index = index + 1;
                continue;
            }
            if (nDigitsStored < 34) {
                if (representation[index] !== '0' || foundNonZero) {
                    if (!foundNonZero) firstNonZero = nDigitsRead;
                    foundNonZero = true;
                    // Only store 34 digits
                    digits[digitsInsert++] = parseInt(representation[index], 10);
                    nDigitsStored = nDigitsStored + 1;
                }
            }
            if (foundNonZero) nDigits = nDigits + 1;
            if (sawRadix) radixPosition = radixPosition + 1;
            nDigitsRead = nDigitsRead + 1;
            index = index + 1;
        }
        if (sawRadix && !nDigitsRead) throw new $868bb48821d209c4$export$5f4690e5e32707d3('' + representation + ' not a valid Decimal128 string');
        // Read exponent if exists
        if (representation[index] === 'e' || representation[index] === 'E') {
            // Read exponent digits
            var match = representation.substr(++index).match($868bb48821d209c4$var$EXPONENT_REGEX);
            // No digits read
            if (!match || !match[2]) return new Decimal128($868bb48821d209c4$var$buffer_1.from($868bb48821d209c4$var$NAN_BUFFER));
            // Get exponent
            exponent = parseInt(match[0], 10);
            // Adjust the index
            index = index + match[0].length;
        }
        // Return not a number
        if (representation[index]) return new Decimal128($868bb48821d209c4$var$buffer_1.from($868bb48821d209c4$var$NAN_BUFFER));
        // Done reading input
        // Find first non-zero digit in digits
        firstDigit = 0;
        if (!nDigitsStored) {
            firstDigit = 0;
            lastDigit = 0;
            digits[0] = 0;
            nDigits = 1;
            nDigitsStored = 1;
            significantDigits = 0;
        } else {
            lastDigit = nDigitsStored - 1;
            significantDigits = nDigits;
            if (significantDigits !== 1) while(digits[firstNonZero + significantDigits - 1] === 0)significantDigits = significantDigits - 1;
        }
        // Normalization of exponent
        // Correct exponent based on radix position, and shift significand as needed
        // to represent user input
        // Overflow prevention
        if (exponent <= radixPosition && radixPosition - exponent > 16384) exponent = $868bb48821d209c4$var$EXPONENT_MIN;
        else exponent = exponent - radixPosition;
        // Attempt to normalize the exponent
        while(exponent > $868bb48821d209c4$var$EXPONENT_MAX){
            // Shift exponent to significand and decrease
            lastDigit = lastDigit + 1;
            if (lastDigit - firstDigit > $868bb48821d209c4$var$MAX_DIGITS) {
                // Check if we have a zero then just hard clamp, otherwise fail
                var digitsString = digits.join('');
                if (digitsString.match(/^0+$/)) {
                    exponent = $868bb48821d209c4$var$EXPONENT_MAX;
                    break;
                }
                $868bb48821d209c4$var$invalidErr(representation, 'overflow');
            }
            exponent = exponent - 1;
        }
        while(exponent < $868bb48821d209c4$var$EXPONENT_MIN || nDigitsStored < nDigits){
            // Shift last digit. can only do this if < significant digits than # stored.
            if (lastDigit === 0 && significantDigits < nDigitsStored) {
                exponent = $868bb48821d209c4$var$EXPONENT_MIN;
                significantDigits = 0;
                break;
            }
            if (nDigitsStored < nDigits) // adjust to match digits not stored
            nDigits = nDigits - 1;
            else // adjust to round
            lastDigit = lastDigit - 1;
            if (exponent < $868bb48821d209c4$var$EXPONENT_MAX) exponent = exponent + 1;
            else {
                // Check if we have a zero then just hard clamp, otherwise fail
                var digitsString = digits.join('');
                if (digitsString.match(/^0+$/)) {
                    exponent = $868bb48821d209c4$var$EXPONENT_MAX;
                    break;
                }
                $868bb48821d209c4$var$invalidErr(representation, 'overflow');
            }
        }
        // Round
        // We've normalized the exponent, but might still need to round.
        if (lastDigit - firstDigit + 1 < significantDigits) {
            var endOfString = nDigitsRead;
            // If we have seen a radix point, 'string' is 1 longer than we have
            // documented with ndigits_read, so inc the position of the first nonzero
            // digit and the position that digits are read to.
            if (sawRadix) {
                firstNonZero = firstNonZero + 1;
                endOfString = endOfString + 1;
            }
            // if negative, we need to increment again to account for - sign at start.
            if (isNegative) {
                firstNonZero = firstNonZero + 1;
                endOfString = endOfString + 1;
            }
            var roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);
            var roundBit = 0;
            if (roundDigit >= 5) {
                roundBit = 1;
                if (roundDigit === 5) {
                    roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;
                    for(i = firstNonZero + lastDigit + 2; i < endOfString; i++)if (parseInt(representation[i], 10)) {
                        roundBit = 1;
                        break;
                    }
                }
            }
            if (roundBit) {
                var dIdx = lastDigit;
                for(; dIdx >= 0; dIdx--)if (++digits[dIdx] > 9) {
                    digits[dIdx] = 0;
                    // overflowed most significant digit
                    if (dIdx === 0) {
                        if (exponent < $868bb48821d209c4$var$EXPONENT_MAX) {
                            exponent = exponent + 1;
                            digits[dIdx] = 1;
                        } else return new Decimal128($868bb48821d209c4$var$buffer_1.from(isNegative ? $868bb48821d209c4$var$INF_NEGATIVE_BUFFER : $868bb48821d209c4$var$INF_POSITIVE_BUFFER));
                    }
                }
            }
        }
        // Encode significand
        // The high 17 digits of the significand
        significandHigh = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(0);
        // The low 17 digits of the significand
        significandLow = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(0);
        // read a zero
        if (significantDigits === 0) {
            significandHigh = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(0);
            significandLow = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(0);
        } else if (lastDigit - firstDigit < 17) {
            var dIdx = firstDigit;
            significandLow = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(digits[dIdx++]);
            significandHigh = new $868bb48821d209c4$export$12ac1d26449d9c2e(0, 0);
            for(; dIdx <= lastDigit; dIdx++){
                significandLow = significandLow.multiply($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(10));
                significandLow = significandLow.add($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(digits[dIdx]));
            }
        } else {
            var dIdx = firstDigit;
            significandHigh = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(digits[dIdx++]);
            for(; dIdx <= lastDigit - 17; dIdx++){
                significandHigh = significandHigh.multiply($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(10));
                significandHigh = significandHigh.add($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(digits[dIdx]));
            }
            significandLow = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(digits[dIdx++]);
            for(; dIdx <= lastDigit; dIdx++){
                significandLow = significandLow.multiply($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(10));
                significandLow = significandLow.add($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(digits[dIdx]));
            }
        }
        var significand = $868bb48821d209c4$var$multiply64x2(significandHigh, $868bb48821d209c4$export$12ac1d26449d9c2e.fromString('100000000000000000'));
        significand.low = significand.low.add(significandLow);
        if ($868bb48821d209c4$var$lessThan(significand.low, significandLow)) significand.high = significand.high.add($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(1));
        // Biased exponent
        biasedExponent = exponent + $868bb48821d209c4$var$EXPONENT_BIAS;
        var dec = {
            low: $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(0),
            high: $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(0)
        };
        // Encode combination, exponent, and significand.
        if (significand.high.shiftRightUnsigned(49).and($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(1)).equals($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(1))) {
            // Encode '11' into bits 1 to 3
            dec.high = dec.high.or($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(3).shiftLeft(61));
            dec.high = dec.high.or($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(biasedExponent).and($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(16383).shiftLeft(47)));
            dec.high = dec.high.or(significand.high.and($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(140737488355327)));
        } else {
            dec.high = dec.high.or($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(biasedExponent & 16383).shiftLeft(49));
            dec.high = dec.high.or(significand.high.and($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(562949953421311)));
        }
        dec.low = significand.low;
        // Encode sign
        if (isNegative) dec.high = dec.high.or($868bb48821d209c4$export$12ac1d26449d9c2e.fromString('9223372036854775808'));
        // Encode into a buffer
        var buffer = $868bb48821d209c4$var$buffer_1.alloc(16);
        index = 0;
        // Encode the low 64 bits of the decimal
        // Encode low bits
        buffer[index++] = dec.low.low & 255;
        buffer[index++] = dec.low.low >> 8 & 255;
        buffer[index++] = dec.low.low >> 16 & 255;
        buffer[index++] = dec.low.low >> 24 & 255;
        // Encode high bits
        buffer[index++] = dec.low.high & 255;
        buffer[index++] = dec.low.high >> 8 & 255;
        buffer[index++] = dec.low.high >> 16 & 255;
        buffer[index++] = dec.low.high >> 24 & 255;
        // Encode the high 64 bits of the decimal
        // Encode low bits
        buffer[index++] = dec.high.low & 255;
        buffer[index++] = dec.high.low >> 8 & 255;
        buffer[index++] = dec.high.low >> 16 & 255;
        buffer[index++] = dec.high.low >> 24 & 255;
        // Encode high bits
        buffer[index++] = dec.high.high & 255;
        buffer[index++] = dec.high.high >> 8 & 255;
        buffer[index++] = dec.high.high >> 16 & 255;
        buffer[index++] = dec.high.high >> 24 & 255;
        // Return the new Decimal128
        return new Decimal128(buffer);
    };
    /** Create a string representation of the raw Decimal128 value */ Decimal128.prototype.toString = function() {
        // Note: bits in this routine are referred to starting at 0,
        // from the sign bit, towards the coefficient.
        // decoded biased exponent (14 bits)
        var biased_exponent;
        // the number of significand digits
        var significand_digits = 0;
        // the base-10 digits in the significand
        var significand = new Array(36);
        for(var i = 0; i < significand.length; i++)significand[i] = 0;
        // read pointer into significand
        var index = 0;
        // true if the number is zero
        var is_zero = false;
        // the most significant significand bits (50-46)
        var significand_msb;
        // temporary storage for significand decoding
        var significand128 = {
            parts: [
                0,
                0,
                0,
                0
            ]
        };
        // indexing variables
        var j, k;
        // Output string
        var string = [];
        // Unpack index
        index = 0;
        // Buffer reference
        var buffer = this.bytes;
        // Unpack the low 64bits into a long
        // bits 96 - 127
        var low = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
        // bits 64 - 95
        var midl = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
        // Unpack the high 64bits into a long
        // bits 32 - 63
        var midh = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
        // bits 0 - 31
        var high = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
        // Unpack index
        index = 0;
        // Create the state of the decimal
        var dec = {
            low: new $868bb48821d209c4$export$12ac1d26449d9c2e(low, midl),
            high: new $868bb48821d209c4$export$12ac1d26449d9c2e(midh, high)
        };
        if (dec.high.lessThan($868bb48821d209c4$export$12ac1d26449d9c2e.ZERO)) string.push('-');
        // Decode combination field and exponent
        // bits 1 - 5
        var combination = high >> 26 & $868bb48821d209c4$var$COMBINATION_MASK;
        if (combination >> 3 === 3) {
            // Check for 'special' values
            if (combination === $868bb48821d209c4$var$COMBINATION_INFINITY) return string.join('') + 'Infinity';
            else if (combination === $868bb48821d209c4$var$COMBINATION_NAN) return 'NaN';
            else {
                biased_exponent = high >> 15 & $868bb48821d209c4$var$EXPONENT_MASK;
                significand_msb = 8 + (high >> 14 & 1);
            }
        } else {
            significand_msb = high >> 14 & 7;
            biased_exponent = high >> 17 & $868bb48821d209c4$var$EXPONENT_MASK;
        }
        // unbiased exponent
        var exponent = biased_exponent - $868bb48821d209c4$var$EXPONENT_BIAS;
        // Create string of significand digits
        // Convert the 114-bit binary number represented by
        // (significand_high, significand_low) to at most 34 decimal
        // digits through modulo and division.
        significand128.parts[0] = (high & 16383) + ((significand_msb & 15) << 14);
        significand128.parts[1] = midh;
        significand128.parts[2] = midl;
        significand128.parts[3] = low;
        if (significand128.parts[0] === 0 && significand128.parts[1] === 0 && significand128.parts[2] === 0 && significand128.parts[3] === 0) is_zero = true;
        else for(k = 3; k >= 0; k--){
            var least_digits = 0;
            // Perform the divide
            var result = $868bb48821d209c4$var$divideu128(significand128);
            significand128 = result.quotient;
            least_digits = result.rem.low;
            // We now have the 9 least significant digits (in base 2).
            // Convert and output to string.
            if (!least_digits) continue;
            for(j = 8; j >= 0; j--){
                // significand[k * 9 + j] = Math.round(least_digits % 10);
                significand[k * 9 + j] = least_digits % 10;
                // least_digits = Math.round(least_digits / 10);
                least_digits = Math.floor(least_digits / 10);
            }
        }
        // Output format options:
        // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd
        // Regular    - ddd.ddd
        if (is_zero) {
            significand_digits = 1;
            significand[index] = 0;
        } else {
            significand_digits = 36;
            while(!significand[index]){
                significand_digits = significand_digits - 1;
                index = index + 1;
            }
        }
        // the exponent if scientific notation is used
        var scientific_exponent = significand_digits - 1 + exponent;
        // The scientific exponent checks are dictated by the string conversion
        // specification and are somewhat arbitrary cutoffs.
        //
        // We must check exponent > 0, because if this is the case, the number
        // has trailing zeros.  However, we *cannot* output these trailing zeros,
        // because doing so would change the precision of the value, and would
        // change stored data if the string converted number is round tripped.
        if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {
            // Scientific format
            // if there are too many significant digits, we should just be treating numbers
            // as + or - 0 and using the non-scientific exponent (this is for the "invalid
            // representation should be treated as 0/-0" spec cases in decimal128-1.json)
            if (significand_digits > 34) {
                string.push("0");
                if (exponent > 0) string.push('E+' + exponent);
                else if (exponent < 0) string.push('E' + exponent);
                return string.join('');
            }
            string.push("" + significand[index++]);
            significand_digits = significand_digits - 1;
            if (significand_digits) string.push('.');
            for(var i = 0; i < significand_digits; i++)string.push("" + significand[index++]);
            // Exponent
            string.push('E');
            if (scientific_exponent > 0) string.push('+' + scientific_exponent);
            else string.push("" + scientific_exponent);
        } else {
            // Regular format with no decimal place
            if (exponent >= 0) for(var i = 0; i < significand_digits; i++)string.push("" + significand[index++]);
            else {
                var radix_position = significand_digits + exponent;
                // non-zero digits before radix
                if (radix_position > 0) for(var i = 0; i < radix_position; i++)string.push("" + significand[index++]);
                else string.push('0');
                string.push('.');
                // add leading zeros after radix
                while(radix_position++ < 0)string.push('0');
                for(var i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++)string.push("" + significand[index++]);
            }
        }
        return string.join('');
    };
    Decimal128.prototype.toJSON = function() {
        return {
            $numberDecimal: this.toString()
        };
    };
    /** @internal */ Decimal128.prototype.toExtendedJSON = function() {
        return {
            $numberDecimal: this.toString()
        };
    };
    /** @internal */ Decimal128.fromExtendedJSON = function(doc) {
        return Decimal128.fromString(doc.$numberDecimal);
    };
    /** @internal */ Decimal128.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    Decimal128.prototype.inspect = function() {
        return "new Decimal128(\"" + this.toString() + "\")";
    };
    return Decimal128;
}();
Object.defineProperty($868bb48821d209c4$export$39efe8a3f1c2d4eb.prototype, '_bsontype', {
    value: 'Decimal128'
});
/**
 * A class representation of the BSON Double type.
 * @public
 */ var $868bb48821d209c4$export$340e583a64e26663 = function() {
    /**
     * Create a Double type
     *
     * @param value - the number we want to represent as a double.
     */ function Double(value) {
        if (!(this instanceof Double)) return new Double(value);
        if (value instanceof Number) value = value.valueOf();
        this.value = +value;
    }
    /**
     * Access the number value.
     *
     * @returns returns the wrapped double number.
     */ Double.prototype.valueOf = function() {
        return this.value;
    };
    Double.prototype.toJSON = function() {
        return this.value;
    };
    Double.prototype.toString = function(radix) {
        return this.value.toString(radix);
    };
    /** @internal */ Double.prototype.toExtendedJSON = function(options) {
        if (options && (options.legacy || options.relaxed && isFinite(this.value))) return this.value;
        // NOTE: JavaScript has +0 and -0, apparently to model limit calculations. If a user
        // explicitly provided `-0` then we need to ensure the sign makes it into the output
        if (Object.is(Math.sign(this.value), -0)) return {
            $numberDouble: "-" + this.value.toFixed(1)
        };
        var $numberDouble;
        if (Number.isInteger(this.value)) {
            $numberDouble = this.value.toFixed(1);
            if ($numberDouble.length >= 13) $numberDouble = this.value.toExponential(13).toUpperCase();
        } else $numberDouble = this.value.toString();
        return {
            $numberDouble: $numberDouble
        };
    };
    /** @internal */ Double.fromExtendedJSON = function(doc, options) {
        var doubleValue = parseFloat(doc.$numberDouble);
        return options && options.relaxed ? doubleValue : new Double(doubleValue);
    };
    /** @internal */ Double.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    Double.prototype.inspect = function() {
        var eJSON = this.toExtendedJSON();
        return "new Double(" + eJSON.$numberDouble + ")";
    };
    return Double;
}();
Object.defineProperty($868bb48821d209c4$export$340e583a64e26663.prototype, '_bsontype', {
    value: 'Double'
});
/**
 * A class representation of a BSON Int32 type.
 * @public
 */ var $868bb48821d209c4$export$493726e231866ac3 = function() {
    /**
     * Create an Int32 type
     *
     * @param value - the number we want to represent as an int32.
     */ function Int32(value) {
        if (!(this instanceof Int32)) return new Int32(value);
        if (value instanceof Number) value = value.valueOf();
        this.value = +value | 0;
    }
    /**
     * Access the number value.
     *
     * @returns returns the wrapped int32 number.
     */ Int32.prototype.valueOf = function() {
        return this.value;
    };
    Int32.prototype.toString = function(radix) {
        return this.value.toString(radix);
    };
    Int32.prototype.toJSON = function() {
        return this.value;
    };
    /** @internal */ Int32.prototype.toExtendedJSON = function(options) {
        if (options && (options.relaxed || options.legacy)) return this.value;
        return {
            $numberInt: this.value.toString()
        };
    };
    /** @internal */ Int32.fromExtendedJSON = function(doc, options) {
        return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);
    };
    /** @internal */ Int32.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    Int32.prototype.inspect = function() {
        return "new Int32(" + this.valueOf() + ")";
    };
    return Int32;
}();
Object.defineProperty($868bb48821d209c4$export$493726e231866ac3.prototype, '_bsontype', {
    value: 'Int32'
});
/**
 * A class representation of the BSON MaxKey type.
 * @public
 */ var $868bb48821d209c4$export$d380297cb28b8de0 = function() {
    function MaxKey() {
        if (!(this instanceof MaxKey)) return new MaxKey();
    }
    /** @internal */ MaxKey.prototype.toExtendedJSON = function() {
        return {
            $maxKey: 1
        };
    };
    /** @internal */ MaxKey.fromExtendedJSON = function() {
        return new MaxKey();
    };
    /** @internal */ MaxKey.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    MaxKey.prototype.inspect = function() {
        return 'new MaxKey()';
    };
    return MaxKey;
}();
Object.defineProperty($868bb48821d209c4$export$d380297cb28b8de0.prototype, '_bsontype', {
    value: 'MaxKey'
});
/**
 * A class representation of the BSON MinKey type.
 * @public
 */ var $868bb48821d209c4$export$aa9d11358976b3cc = function() {
    function MinKey() {
        if (!(this instanceof MinKey)) return new MinKey();
    }
    /** @internal */ MinKey.prototype.toExtendedJSON = function() {
        return {
            $minKey: 1
        };
    };
    /** @internal */ MinKey.fromExtendedJSON = function() {
        return new MinKey();
    };
    /** @internal */ MinKey.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    MinKey.prototype.inspect = function() {
        return 'new MinKey()';
    };
    return MinKey;
}();
Object.defineProperty($868bb48821d209c4$export$aa9d11358976b3cc.prototype, '_bsontype', {
    value: 'MinKey'
});
// Regular expression that checks for hex value
var $868bb48821d209c4$var$checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');
// Unique sequence for the current process (initialized on first use)
var $868bb48821d209c4$var$PROCESS_UNIQUE = null;
var $868bb48821d209c4$var$kId = Symbol('id');
/**
 * A class representation of the BSON ObjectId type.
 * @public
 */ var $868bb48821d209c4$export$e68967d37d049767 = function() {
    /**
     * Create an ObjectId type
     *
     * @param inputId - Can be a 24 character hex string, 12 byte binary Buffer, or a number.
     */ function ObjectId(inputId) {
        if (!(this instanceof ObjectId)) return new ObjectId(inputId);
        // workingId is set based on type of input and whether valid id exists for the input
        var workingId;
        if (typeof inputId === 'object' && inputId && 'id' in inputId) {
            if (typeof inputId.id !== 'string' && !ArrayBuffer.isView(inputId.id)) throw new $868bb48821d209c4$export$5f4690e5e32707d3('Argument passed in must have an id that is of type string or Buffer');
            if ('toHexString' in inputId && typeof inputId.toHexString === 'function') workingId = $868bb48821d209c4$var$buffer_1.from(inputId.toHexString(), 'hex');
            else workingId = inputId.id;
        } else workingId = inputId;
        // the following cases use workingId to construct an ObjectId
        if (workingId == null || typeof workingId === 'number') // The most common use case (blank id, new objectId instance)
        // Generate a new id
        this[$868bb48821d209c4$var$kId] = ObjectId.generate(typeof workingId === 'number' ? workingId : undefined);
        else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) this[$868bb48821d209c4$var$kId] = $868bb48821d209c4$var$ensureBuffer(workingId);
        else if (typeof workingId === 'string') {
            if (workingId.length === 12) {
                var bytes = $868bb48821d209c4$var$buffer_1.from(workingId);
                if (bytes.byteLength === 12) this[$868bb48821d209c4$var$kId] = bytes;
                else throw new $868bb48821d209c4$export$5f4690e5e32707d3('Argument passed in must be a string of 12 bytes');
            } else if (workingId.length === 24 && $868bb48821d209c4$var$checkForHexRegExp.test(workingId)) this[$868bb48821d209c4$var$kId] = $868bb48821d209c4$var$buffer_1.from(workingId, 'hex');
            else throw new $868bb48821d209c4$export$5f4690e5e32707d3('Argument passed in must be a string of 12 bytes or a string of 24 hex characters');
        } else throw new $868bb48821d209c4$export$5f4690e5e32707d3('Argument passed in does not match the accepted types');
        // If we are caching the hex string
        if (ObjectId.cacheHexString) this.__id = this.id.toString('hex');
    }
    Object.defineProperty(ObjectId.prototype, "id", {
        /**
         * The ObjectId bytes
         * @readonly
         */ get: function() {
            return this[$868bb48821d209c4$var$kId];
        },
        set: function(value) {
            this[$868bb48821d209c4$var$kId] = value;
            if (ObjectId.cacheHexString) this.__id = value.toString('hex');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObjectId.prototype, "generationTime", {
        /**
         * The generation time of this ObjectId instance
         * @deprecated Please use getTimestamp / createFromTime which returns an int32 epoch
         */ get: function() {
            return this.id.readInt32BE(0);
        },
        set: function(value) {
            // Encode time into first 4 bytes
            this.id.writeUInt32BE(value, 0);
        },
        enumerable: false,
        configurable: true
    });
    /** Returns the ObjectId id as a 24 character hex string representation */ ObjectId.prototype.toHexString = function() {
        if (ObjectId.cacheHexString && this.__id) return this.__id;
        var hexString = this.id.toString('hex');
        if (ObjectId.cacheHexString && !this.__id) this.__id = hexString;
        return hexString;
    };
    /**
     * Update the ObjectId index
     * @privateRemarks
     * Used in generating new ObjectId's on the driver
     * @internal
     */ ObjectId.getInc = function() {
        return ObjectId.index = (ObjectId.index + 1) % 16777215;
    };
    /**
     * Generate a 12 byte id buffer used in ObjectId's
     *
     * @param time - pass in a second based timestamp.
     */ ObjectId.generate = function(time) {
        if ('number' !== typeof time) time = Math.floor(Date.now() / 1000);
        var inc = ObjectId.getInc();
        var buffer = $868bb48821d209c4$var$buffer_1.alloc(12);
        // 4-byte timestamp
        buffer.writeUInt32BE(time, 0);
        // set PROCESS_UNIQUE if yet not initialized
        if ($868bb48821d209c4$var$PROCESS_UNIQUE === null) $868bb48821d209c4$var$PROCESS_UNIQUE = $868bb48821d209c4$var$randomBytes(5);
        // 5-byte process unique
        buffer[4] = $868bb48821d209c4$var$PROCESS_UNIQUE[0];
        buffer[5] = $868bb48821d209c4$var$PROCESS_UNIQUE[1];
        buffer[6] = $868bb48821d209c4$var$PROCESS_UNIQUE[2];
        buffer[7] = $868bb48821d209c4$var$PROCESS_UNIQUE[3];
        buffer[8] = $868bb48821d209c4$var$PROCESS_UNIQUE[4];
        // 3-byte counter
        buffer[11] = inc & 255;
        buffer[10] = inc >> 8 & 255;
        buffer[9] = inc >> 16 & 255;
        return buffer;
    };
    /**
     * Converts the id into a 24 character hex string for printing
     *
     * @param format - The Buffer toString format parameter.
     */ ObjectId.prototype.toString = function(format) {
        // Is the id a buffer then use the buffer toString method to return the format
        if (format) return this.id.toString(format);
        return this.toHexString();
    };
    /** Converts to its JSON the 24 character hex string representation. */ ObjectId.prototype.toJSON = function() {
        return this.toHexString();
    };
    /**
     * Compares the equality of this ObjectId with `otherID`.
     *
     * @param otherId - ObjectId instance to compare against.
     */ ObjectId.prototype.equals = function(otherId) {
        if (otherId === undefined || otherId === null) return false;
        if (otherId instanceof ObjectId) return this.toString() === otherId.toString();
        if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12 && $868bb48821d209c4$var$isUint8Array(this.id)) return otherId === $868bb48821d209c4$var$buffer_1.prototype.toString.call(this.id, 'latin1');
        if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 24) return otherId.toLowerCase() === this.toHexString();
        if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12) return $868bb48821d209c4$var$buffer_1.from(otherId).equals(this.id);
        if (typeof otherId === 'object' && 'toHexString' in otherId && typeof otherId.toHexString === 'function') return otherId.toHexString() === this.toHexString();
        return false;
    };
    /** Returns the generation date (accurate up to the second) that this ID was generated. */ ObjectId.prototype.getTimestamp = function() {
        var timestamp = new Date();
        var time = this.id.readUInt32BE(0);
        timestamp.setTime(Math.floor(time) * 1000);
        return timestamp;
    };
    /** @internal */ ObjectId.createPk = function() {
        return new ObjectId();
    };
    /**
     * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. Used for comparisons or sorting the ObjectId.
     *
     * @param time - an integer number representing a number of seconds.
     */ ObjectId.createFromTime = function(time) {
        var buffer = $868bb48821d209c4$var$buffer_1.from([
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]);
        // Encode time into first 4 bytes
        buffer.writeUInt32BE(time, 0);
        // Return the new objectId
        return new ObjectId(buffer);
    };
    /**
     * Creates an ObjectId from a hex string representation of an ObjectId.
     *
     * @param hexString - create a ObjectId from a passed in 24 character hexstring.
     */ ObjectId.createFromHexString = function(hexString) {
        // Throw an error if it's not a valid setup
        if (typeof hexString === 'undefined' || hexString != null && hexString.length !== 24) throw new $868bb48821d209c4$export$5f4690e5e32707d3('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');
        return new ObjectId($868bb48821d209c4$var$buffer_1.from(hexString, 'hex'));
    };
    /**
     * Checks if a value is a valid bson ObjectId
     *
     * @param id - ObjectId instance to validate.
     */ ObjectId.isValid = function(id) {
        if (id == null) return false;
        if (typeof id === 'number') return true;
        if (typeof id === 'string') return id.length === 12 || id.length === 24 && $868bb48821d209c4$var$checkForHexRegExp.test(id);
        if (id instanceof ObjectId) return true;
        if ($868bb48821d209c4$var$isUint8Array(id) && id.length === 12) return true;
        // Duck-Typing detection of ObjectId like objects
        if (typeof id === 'object' && 'toHexString' in id && typeof id.toHexString === 'function') {
            if (typeof id.id === 'string') return id.id.length === 12;
            return id.toHexString().length === 24 && $868bb48821d209c4$var$checkForHexRegExp.test(id.id.toString('hex'));
        }
        return false;
    };
    /** @internal */ ObjectId.prototype.toExtendedJSON = function() {
        if (this.toHexString) return {
            $oid: this.toHexString()
        };
        return {
            $oid: this.toString('hex')
        };
    };
    /** @internal */ ObjectId.fromExtendedJSON = function(doc) {
        return new ObjectId(doc.$oid);
    };
    /**
     * Converts to a string representation of this Id.
     *
     * @returns return the 24 character hex string representation.
     * @internal
     */ ObjectId.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    ObjectId.prototype.inspect = function() {
        return "new ObjectId(\"" + this.toHexString() + "\")";
    };
    /** @internal */ ObjectId.index = Math.floor(Math.random() * 16777215);
    return ObjectId;
}();
// Deprecated methods
Object.defineProperty($868bb48821d209c4$export$e68967d37d049767.prototype, 'generate', {
    value: $868bb48821d209c4$var$deprecate(function(time) {
        return $868bb48821d209c4$export$e68967d37d049767.generate(time);
    }, 'Please use the static `ObjectId.generate(time)` instead')
});
Object.defineProperty($868bb48821d209c4$export$e68967d37d049767.prototype, 'getInc', {
    value: $868bb48821d209c4$var$deprecate(function() {
        return $868bb48821d209c4$export$e68967d37d049767.getInc();
    }, 'Please use the static `ObjectId.getInc()` instead')
});
Object.defineProperty($868bb48821d209c4$export$e68967d37d049767.prototype, 'get_inc', {
    value: $868bb48821d209c4$var$deprecate(function() {
        return $868bb48821d209c4$export$e68967d37d049767.getInc();
    }, 'Please use the static `ObjectId.getInc()` instead')
});
Object.defineProperty($868bb48821d209c4$export$e68967d37d049767, 'get_inc', {
    value: $868bb48821d209c4$var$deprecate(function() {
        return $868bb48821d209c4$export$e68967d37d049767.getInc();
    }, 'Please use the static `ObjectId.getInc()` instead')
});
Object.defineProperty($868bb48821d209c4$export$e68967d37d049767.prototype, '_bsontype', {
    value: 'ObjectID'
});
function $868bb48821d209c4$var$alphabetize(str) {
    return str.split('').sort().join('');
}
/**
 * A class representation of the BSON RegExp type.
 * @public
 */ var $868bb48821d209c4$export$f7fea3e08dc99c1d = function() {
    /**
     * @param pattern - The regular expression pattern to match
     * @param options - The regular expression options
     */ function BSONRegExp(pattern, options) {
        if (!(this instanceof BSONRegExp)) return new BSONRegExp(pattern, options);
        this.pattern = pattern;
        this.options = $868bb48821d209c4$var$alphabetize(options !== null && options !== void 0 ? options : '');
        if (this.pattern.indexOf('\x00') !== -1) throw new $868bb48821d209c4$export$dcd4c628d4081c37("BSON Regex patterns cannot contain null bytes, found: " + JSON.stringify(this.pattern));
        if (this.options.indexOf('\x00') !== -1) throw new $868bb48821d209c4$export$dcd4c628d4081c37("BSON Regex options cannot contain null bytes, found: " + JSON.stringify(this.options));
        // Validate options
        for(var i = 0; i < this.options.length; i++){
            if (!(this.options[i] === 'i' || this.options[i] === 'm' || this.options[i] === 'x' || this.options[i] === 'l' || this.options[i] === 's' || this.options[i] === 'u')) throw new $868bb48821d209c4$export$dcd4c628d4081c37("The regular expression option [" + this.options[i] + "] is not supported");
        }
    }
    BSONRegExp.parseOptions = function(options) {
        return options ? options.split('').sort().join('') : '';
    };
    /** @internal */ BSONRegExp.prototype.toExtendedJSON = function(options) {
        options = options || {
        };
        if (options.legacy) return {
            $regex: this.pattern,
            $options: this.options
        };
        return {
            $regularExpression: {
                pattern: this.pattern,
                options: this.options
            }
        };
    };
    /** @internal */ BSONRegExp.fromExtendedJSON = function(doc) {
        if ('$regex' in doc) {
            if (typeof doc.$regex !== 'string') {
                // This is for $regex query operators that have extended json values.
                if (doc.$regex._bsontype === 'BSONRegExp') return doc;
            } else return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));
        }
        if ('$regularExpression' in doc) return new BSONRegExp(doc.$regularExpression.pattern, BSONRegExp.parseOptions(doc.$regularExpression.options));
        throw new $868bb48821d209c4$export$5f4690e5e32707d3("Unexpected BSONRegExp EJSON object form: " + JSON.stringify(doc));
    };
    return BSONRegExp;
}();
Object.defineProperty($868bb48821d209c4$export$f7fea3e08dc99c1d.prototype, '_bsontype', {
    value: 'BSONRegExp'
});
/**
 * A class representation of the BSON Symbol type.
 * @public
 */ var $868bb48821d209c4$export$8251e971c2f12361 = function() {
    /**
     * @param value - the string representing the symbol.
     */ function BSONSymbol(value) {
        if (!(this instanceof BSONSymbol)) return new BSONSymbol(value);
        this.value = value;
    }
    /** Access the wrapped string value. */ BSONSymbol.prototype.valueOf = function() {
        return this.value;
    };
    BSONSymbol.prototype.toString = function() {
        return this.value;
    };
    /** @internal */ BSONSymbol.prototype.inspect = function() {
        return "new BSONSymbol(\"" + this.value + "\")";
    };
    BSONSymbol.prototype.toJSON = function() {
        return this.value;
    };
    /** @internal */ BSONSymbol.prototype.toExtendedJSON = function() {
        return {
            $symbol: this.value
        };
    };
    /** @internal */ BSONSymbol.fromExtendedJSON = function(doc) {
        return new BSONSymbol(doc.$symbol);
    };
    /** @internal */ BSONSymbol.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    return BSONSymbol;
}();
Object.defineProperty($868bb48821d209c4$export$8251e971c2f12361.prototype, '_bsontype', {
    value: 'Symbol'
});
/** @public */ var $868bb48821d209c4$export$d76d2ce407344c9c = $868bb48821d209c4$export$12ac1d26449d9c2e;
/** @public */ var $868bb48821d209c4$export$d9bcbd5e1ff81430 = function(_super) {
    $868bb48821d209c4$var$__extends(Timestamp, _super);
    function Timestamp(low, high) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        ///@ts-expect-error
        if (!(_this instanceof Timestamp)) return new Timestamp(low, high);
        if ($868bb48821d209c4$export$12ac1d26449d9c2e.isLong(low)) _this = _super.call(this, low.low, low.high, true) || this;
        else if ($868bb48821d209c4$var$isObjectLike(low) && typeof low.t !== 'undefined' && typeof low.i !== 'undefined') _this = _super.call(this, low.i, low.t, true) || this;
        else _this = _super.call(this, low, high, true) || this;
        Object.defineProperty(_this, '_bsontype', {
            value: 'Timestamp',
            writable: false,
            configurable: false,
            enumerable: false
        });
        return _this;
    }
    Timestamp.prototype.toJSON = function() {
        return {
            $timestamp: this.toString()
        };
    };
    /** Returns a Timestamp represented by the given (32-bit) integer value. */ Timestamp.fromInt = function(value) {
        return new Timestamp($868bb48821d209c4$export$12ac1d26449d9c2e.fromInt(value, true));
    };
    /** Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned. */ Timestamp.fromNumber = function(value) {
        return new Timestamp($868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(value, true));
    };
    /**
     * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.
     *
     * @param lowBits - the low 32-bits.
     * @param highBits - the high 32-bits.
     */ Timestamp.fromBits = function(lowBits, highBits) {
        return new Timestamp(lowBits, highBits);
    };
    /**
     * Returns a Timestamp from the given string, optionally using the given radix.
     *
     * @param str - the textual representation of the Timestamp.
     * @param optRadix - the radix in which the text is written.
     */ Timestamp.fromString = function(str, optRadix) {
        return new Timestamp($868bb48821d209c4$export$12ac1d26449d9c2e.fromString(str, true, optRadix));
    };
    /** @internal */ Timestamp.prototype.toExtendedJSON = function() {
        return {
            $timestamp: {
                t: this.high >>> 0,
                i: this.low >>> 0
            }
        };
    };
    /** @internal */ Timestamp.fromExtendedJSON = function(doc) {
        return new Timestamp(doc.$timestamp);
    };
    /** @internal */ Timestamp.prototype[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return this.inspect();
    };
    Timestamp.prototype.inspect = function() {
        return "new Timestamp({ t: " + this.getHighBits() + ", i: " + this.getLowBits() + " })";
    };
    Timestamp.MAX_VALUE = $868bb48821d209c4$export$12ac1d26449d9c2e.MAX_UNSIGNED_VALUE;
    return Timestamp;
}($868bb48821d209c4$export$d76d2ce407344c9c);
function $868bb48821d209c4$var$isBSONType(value) {
    return $868bb48821d209c4$var$isObjectLike(value) && Reflect.has(value, '_bsontype') && typeof value._bsontype === 'string';
}
// INT32 boundaries
var $868bb48821d209c4$var$BSON_INT32_MAX$1 = 2147483647;
var $868bb48821d209c4$var$BSON_INT32_MIN$1 = -2147483648;
// INT64 boundaries
var $868bb48821d209c4$var$BSON_INT64_MAX$1 = 9223372036854776000;
var $868bb48821d209c4$var$BSON_INT64_MIN$1 = -9223372036854776000;
// all the types where we don't need to do any special processing and can just pass the EJSON
//straight to type.fromExtendedJSON
var $868bb48821d209c4$var$keysToCodecs = {
    $oid: $868bb48821d209c4$export$e68967d37d049767,
    $binary: $868bb48821d209c4$export$dbada097a9bd1de9,
    $uuid: $868bb48821d209c4$export$dbada097a9bd1de9,
    $symbol: $868bb48821d209c4$export$8251e971c2f12361,
    $numberInt: $868bb48821d209c4$export$493726e231866ac3,
    $numberDecimal: $868bb48821d209c4$export$39efe8a3f1c2d4eb,
    $numberDouble: $868bb48821d209c4$export$340e583a64e26663,
    $numberLong: $868bb48821d209c4$export$12ac1d26449d9c2e,
    $minKey: $868bb48821d209c4$export$aa9d11358976b3cc,
    $maxKey: $868bb48821d209c4$export$d380297cb28b8de0,
    $regex: $868bb48821d209c4$export$f7fea3e08dc99c1d,
    $regularExpression: $868bb48821d209c4$export$f7fea3e08dc99c1d,
    $timestamp: $868bb48821d209c4$export$d9bcbd5e1ff81430
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function $868bb48821d209c4$var$deserializeValue(value, options) {
    if (options === void 0) options = {
    };
    if (typeof value === 'number') {
        if (options.relaxed || options.legacy) return value;
        // if it's an integer, should interpret as smallest BSON integer
        // that can represent it exactly. (if out of range, interpret as double.)
        if (Math.floor(value) === value) {
            if (value >= $868bb48821d209c4$var$BSON_INT32_MIN$1 && value <= $868bb48821d209c4$var$BSON_INT32_MAX$1) return new $868bb48821d209c4$export$493726e231866ac3(value);
            if (value >= $868bb48821d209c4$var$BSON_INT64_MIN$1 && value <= $868bb48821d209c4$var$BSON_INT64_MAX$1) return $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(value);
        }
        // If the number is a non-integer or out of integer range, should interpret as BSON Double.
        return new $868bb48821d209c4$export$340e583a64e26663(value);
    }
    // from here on out we're looking for bson types, so bail if its not an object
    if (value == null || typeof value !== 'object') return value;
    // upgrade deprecated undefined to null
    if (value.$undefined) return null;
    var keys = Object.keys(value).filter(function(k) {
        return k.startsWith('$') && value[k] != null;
    });
    for(var i = 0; i < keys.length; i++){
        var c = $868bb48821d209c4$var$keysToCodecs[keys[i]];
        if (c) return c.fromExtendedJSON(value, options);
    }
    if (value.$date != null) {
        var d = value.$date;
        var date = new Date();
        if (options.legacy) {
            if (typeof d === 'number') date.setTime(d);
            else if (typeof d === 'string') date.setTime(Date.parse(d));
        } else {
            if (typeof d === 'string') date.setTime(Date.parse(d));
            else if ($868bb48821d209c4$export$12ac1d26449d9c2e.isLong(d)) date.setTime(d.toNumber());
            else if (typeof d === 'number' && options.relaxed) date.setTime(d);
        }
        return date;
    }
    if (value.$code != null) {
        var copy = Object.assign({
        }, value);
        if (value.$scope) copy.$scope = $868bb48821d209c4$var$deserializeValue(value.$scope);
        return $868bb48821d209c4$export$52f0f02147b12c03.fromExtendedJSON(value);
    }
    if ($868bb48821d209c4$var$isDBRefLike(value) || value.$dbPointer) {
        var v = value.$ref ? value : value.$dbPointer;
        // we run into this in a "degenerate EJSON" case (with $id and $ref order flipped)
        // because of the order JSON.parse goes through the document
        if (v instanceof $868bb48821d209c4$export$90e456a500235b9) return v;
        var dollarKeys = Object.keys(v).filter(function(k) {
            return k.startsWith('$');
        });
        var valid_1 = true;
        dollarKeys.forEach(function(k) {
            if ([
                '$ref',
                '$id',
                '$db'
            ].indexOf(k) === -1) valid_1 = false;
        });
        // only make DBRef if $ keys are all valid
        if (valid_1) return $868bb48821d209c4$export$90e456a500235b9.fromExtendedJSON(v);
    }
    return value;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function $868bb48821d209c4$var$serializeArray(array, options) {
    return array.map(function(v, index) {
        options.seenObjects.push({
            propertyName: "index " + index,
            obj: null
        });
        try {
            return $868bb48821d209c4$var$serializeValue(v, options);
        } finally{
            options.seenObjects.pop();
        }
    });
}
function $868bb48821d209c4$var$getISOString(date) {
    var isoStr = date.toISOString();
    // we should only show milliseconds in timestamp if they're non-zero
    return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function $868bb48821d209c4$var$serializeValue(value, options) {
    if ((typeof value === 'object' || typeof value === 'function') && value !== null) {
        var index = options.seenObjects.findIndex(function(entry) {
            return entry.obj === value;
        });
        if (index !== -1) {
            var props = options.seenObjects.map(function(entry) {
                return entry.propertyName;
            });
            var leadingPart = props.slice(0, index).map(function(prop) {
                return prop + " -> ";
            }).join('');
            var alreadySeen = props[index];
            var circularPart = ' -> ' + props.slice(index + 1, props.length - 1).map(function(prop) {
                return prop + " -> ";
            }).join('');
            var current = props[props.length - 1];
            var leadingSpace = ' '.repeat(leadingPart.length + alreadySeen.length / 2);
            var dashes = '-'.repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);
            throw new $868bb48821d209c4$export$5f4690e5e32707d3('Converting circular structure to EJSON:\n' + ("    " + leadingPart + alreadySeen + circularPart + current + "\n") + ("    " + leadingSpace + "\\" + dashes + "/"));
        }
        options.seenObjects[options.seenObjects.length - 1].obj = value;
    }
    if (Array.isArray(value)) return $868bb48821d209c4$var$serializeArray(value, options);
    if (value === undefined) return null;
    if (value instanceof Date || $868bb48821d209c4$var$isDate(value)) {
        var dateNum = value.getTime(), // is it in year range 1970-9999?
        inRange = dateNum > -1 && dateNum < 253402318800000;
        if (options.legacy) return options.relaxed && inRange ? {
            $date: value.getTime()
        } : {
            $date: $868bb48821d209c4$var$getISOString(value)
        };
        return options.relaxed && inRange ? {
            $date: $868bb48821d209c4$var$getISOString(value)
        } : {
            $date: {
                $numberLong: value.getTime().toString()
            }
        };
    }
    if (typeof value === 'number' && (!options.relaxed || !isFinite(value))) {
        // it's an integer
        if (Math.floor(value) === value) {
            var int32Range = value >= $868bb48821d209c4$var$BSON_INT32_MIN$1 && value <= $868bb48821d209c4$var$BSON_INT32_MAX$1, int64Range = value >= $868bb48821d209c4$var$BSON_INT64_MIN$1 && value <= $868bb48821d209c4$var$BSON_INT64_MAX$1;
            // interpret as being of the smallest BSON integer type that can represent the number exactly
            if (int32Range) return {
                $numberInt: value.toString()
            };
            if (int64Range) return {
                $numberLong: value.toString()
            };
        }
        return {
            $numberDouble: value.toString()
        };
    }
    if (value instanceof RegExp || $868bb48821d209c4$var$isRegExp(value)) {
        var flags = value.flags;
        if (flags === undefined) {
            var match = value.toString().match(/[gimuy]*$/);
            if (match) flags = match[0];
        }
        var rx = new $868bb48821d209c4$export$f7fea3e08dc99c1d(value.source, flags);
        return rx.toExtendedJSON(options);
    }
    if (value != null && typeof value === 'object') return $868bb48821d209c4$var$serializeDocument(value, options);
    return value;
}
var $868bb48821d209c4$var$BSON_TYPE_MAPPINGS = {
    Binary: function(o) {
        return new $868bb48821d209c4$export$dbada097a9bd1de9(o.value(), o.sub_type);
    },
    Code: function(o) {
        return new $868bb48821d209c4$export$52f0f02147b12c03(o.code, o.scope);
    },
    DBRef: function(o) {
        return new $868bb48821d209c4$export$90e456a500235b9(o.collection || o.namespace, o.oid, o.db, o.fields);
    },
    Decimal128: function(o) {
        return new $868bb48821d209c4$export$39efe8a3f1c2d4eb(o.bytes);
    },
    Double: function(o) {
        return new $868bb48821d209c4$export$340e583a64e26663(o.value);
    },
    Int32: function(o) {
        return new $868bb48821d209c4$export$493726e231866ac3(o.value);
    },
    Long: function(o) {
        return $868bb48821d209c4$export$12ac1d26449d9c2e.fromBits(// underscore variants for 1.x backwards compatibility
        o.low != null ? o.low : o.low_, o.low != null ? o.high : o.high_, o.low != null ? o.unsigned : o.unsigned_);
    },
    MaxKey: function() {
        return new $868bb48821d209c4$export$d380297cb28b8de0();
    },
    MinKey: function() {
        return new $868bb48821d209c4$export$aa9d11358976b3cc();
    },
    ObjectID: function(o) {
        return new $868bb48821d209c4$export$e68967d37d049767(o);
    },
    ObjectId: function(o) {
        return new $868bb48821d209c4$export$e68967d37d049767(o);
    },
    BSONRegExp: function(o) {
        return new $868bb48821d209c4$export$f7fea3e08dc99c1d(o.pattern, o.options);
    },
    Symbol: function(o) {
        return new $868bb48821d209c4$export$8251e971c2f12361(o.value);
    },
    Timestamp: function(o) {
        return $868bb48821d209c4$export$d9bcbd5e1ff81430.fromBits(o.low, o.high);
    }
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function $868bb48821d209c4$var$serializeDocument(doc, options) {
    if (doc == null || typeof doc !== 'object') throw new $868bb48821d209c4$export$dcd4c628d4081c37('not an object instance');
    var bsontype = doc._bsontype;
    if (typeof bsontype === 'undefined') {
        // It's a regular object. Recursively serialize its property values.
        var _doc = {
        };
        for(var name in doc){
            options.seenObjects.push({
                propertyName: name,
                obj: null
            });
            try {
                _doc[name] = $868bb48821d209c4$var$serializeValue(doc[name], options);
            } finally{
                options.seenObjects.pop();
            }
        }
        return _doc;
    } else if ($868bb48821d209c4$var$isBSONType(doc)) {
        // the "document" is really just a BSON type object
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var outDoc = doc;
        if (typeof outDoc.toExtendedJSON !== 'function') {
            // There's no EJSON serialization function on the object. It's probably an
            // object created by a previous version of this library (or another library)
            // that's duck-typing objects to look like they were generated by this library).
            // Copy the object into this library's version of that type.
            var mapper = $868bb48821d209c4$var$BSON_TYPE_MAPPINGS[doc._bsontype];
            if (!mapper) throw new $868bb48821d209c4$export$5f4690e5e32707d3('Unrecognized or invalid _bsontype: ' + doc._bsontype);
            outDoc = mapper(outDoc);
        }
        // Two BSON types may have nested objects that may need to be serialized too
        if (bsontype === 'Code' && outDoc.scope) outDoc = new $868bb48821d209c4$export$52f0f02147b12c03(outDoc.code, $868bb48821d209c4$var$serializeValue(outDoc.scope, options));
        else if (bsontype === 'DBRef' && outDoc.oid) outDoc = new $868bb48821d209c4$export$90e456a500235b9($868bb48821d209c4$var$serializeValue(outDoc.collection, options), $868bb48821d209c4$var$serializeValue(outDoc.oid, options), $868bb48821d209c4$var$serializeValue(outDoc.db, options), $868bb48821d209c4$var$serializeValue(outDoc.fields, options));
        return outDoc.toExtendedJSON(options);
    } else throw new $868bb48821d209c4$export$dcd4c628d4081c37('_bsontype must be a string, but was: ' + typeof bsontype);
}
/**
 * EJSON parse / stringify API
 * @public
 */ // the namespace here is used to emulate `export * as EJSON from '...'`
// which as of now (sept 2020) api-extractor does not support
// eslint-disable-next-line @typescript-eslint/no-namespace
var $868bb48821d209c4$export$88f9200ef2b97bb5;
(function(EJSON) {
    /**
     * Parse an Extended JSON string, constructing the JavaScript value or object described by that
     * string.
     *
     * @example
     * ```js
     * const { EJSON } = require('bson');
     * const text = '{ "int32": { "$numberInt": "10" } }';
     *
     * // prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }
     * console.log(EJSON.parse(text, { relaxed: false }));
     *
     * // prints { int32: 10 }
     * console.log(EJSON.parse(text));
     * ```
     */ function parse(text, options) {
        var finalOptions = Object.assign({
        }, {
            relaxed: true,
            legacy: false
        }, options);
        // relaxed implies not strict
        if (typeof finalOptions.relaxed === 'boolean') finalOptions.strict = !finalOptions.relaxed;
        if (typeof finalOptions.strict === 'boolean') finalOptions.relaxed = !finalOptions.strict;
        return JSON.parse(text, function(key, value) {
            if (key.indexOf('\x00') !== -1) throw new $868bb48821d209c4$export$dcd4c628d4081c37("BSON Document field names cannot contain null bytes, found: " + JSON.stringify(key));
            return $868bb48821d209c4$var$deserializeValue(value, finalOptions);
        });
    }
    EJSON.parse = parse;
    /**
     * Converts a BSON document to an Extended JSON string, optionally replacing values if a replacer
     * function is specified or optionally including only the specified properties if a replacer array
     * is specified.
     *
     * @param value - The value to convert to extended JSON
     * @param replacer - A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string
     * @param space - A String or Number object that's used to insert white space into the output JSON string for readability purposes.
     * @param options - Optional settings
     *
     * @example
     * ```js
     * const { EJSON } = require('bson');
     * const Int32 = require('mongodb').Int32;
     * const doc = { int32: new Int32(10) };
     *
     * // prints '{"int32":{"$numberInt":"10"}}'
     * console.log(EJSON.stringify(doc, { relaxed: false }));
     *
     * // prints '{"int32":10}'
     * console.log(EJSON.stringify(doc));
     * ```
     */ function stringify(value, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    replacer, space, options) {
        if (space != null && typeof space === 'object') {
            options = space;
            space = 0;
        }
        if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {
            options = replacer;
            replacer = undefined;
            space = 0;
        }
        var serializeOptions = Object.assign({
            relaxed: true,
            legacy: false
        }, options, {
            seenObjects: [
                {
                    propertyName: '(root)',
                    obj: null
                }
            ]
        });
        var doc = $868bb48821d209c4$var$serializeValue(value, serializeOptions);
        return JSON.stringify(doc, replacer, space);
    }
    EJSON.stringify = stringify;
    /**
     * Serializes an object to an Extended JSON string, and reparse it as a JavaScript object.
     *
     * @param value - The object to serialize
     * @param options - Optional settings passed to the `stringify` function
     */ function serialize(value, options) {
        options = options || {
        };
        return JSON.parse(stringify(value, options));
    }
    EJSON.serialize = serialize;
    /**
     * Deserializes an Extended JSON object into a plain JavaScript object with native/BSON types
     *
     * @param ejson - The Extended JSON object to deserialize
     * @param options - Optional settings passed to the parse method
     */ function deserialize(ejson, options) {
        options = options || {
        };
        return parse(JSON.stringify(ejson), options);
    }
    EJSON.deserialize = deserialize;
})($868bb48821d209c4$export$88f9200ef2b97bb5 || ($868bb48821d209c4$export$88f9200ef2b97bb5 = {
}));
/* eslint-disable @typescript-eslint/no-explicit-any */ /** @public */ var $868bb48821d209c4$export$a5c7b93649eaf8f8;
var $868bb48821d209c4$var$bsonGlobal = $868bb48821d209c4$var$getGlobal();
if ($868bb48821d209c4$var$bsonGlobal.Map) $868bb48821d209c4$export$a5c7b93649eaf8f8 = $868bb48821d209c4$var$bsonGlobal.Map;
else // We will return a polyfill
$868bb48821d209c4$export$a5c7b93649eaf8f8 = (function() {
    function Map(array) {
        if (array === void 0) array = [];
        this._keys = [];
        this._values = {
        };
        for(var i = 0; i < array.length; i++){
            if (array[i] == null) continue; // skip null and undefined
            var entry = array[i];
            var key = entry[0];
            var value = entry[1];
            // Add the key to the list of keys in order
            this._keys.push(key);
            // Add the key and value to the values dictionary with a point
            // to the location in the ordered keys list
            this._values[key] = {
                v: value,
                i: this._keys.length - 1
            };
        }
    }
    Map.prototype.clear = function() {
        this._keys = [];
        this._values = {
        };
    };
    Map.prototype.delete = function(key) {
        var value = this._values[key];
        if (value == null) return false;
        // Delete entry
        delete this._values[key];
        // Remove the key from the ordered keys list
        this._keys.splice(value.i, 1);
        return true;
    };
    Map.prototype.entries = function() {
        var _this = this;
        var index = 0;
        return {
            next: function() {
                var key = _this._keys[index++];
                return {
                    value: key !== undefined ? [
                        key,
                        _this._values[key].v
                    ] : undefined,
                    done: key !== undefined ? false : true
                };
            }
        };
    };
    Map.prototype.forEach = function(callback, self) {
        self = self || this;
        for(var i = 0; i < this._keys.length; i++){
            var key = this._keys[i];
            // Call the forEach callback
            callback.call(self, this._values[key].v, key, self);
        }
    };
    Map.prototype.get = function(key) {
        return this._values[key] ? this._values[key].v : undefined;
    };
    Map.prototype.has = function(key) {
        return this._values[key] != null;
    };
    Map.prototype.keys = function() {
        var _this = this;
        var index = 0;
        return {
            next: function() {
                var key = _this._keys[index++];
                return {
                    value: key !== undefined ? key : undefined,
                    done: key !== undefined ? false : true
                };
            }
        };
    };
    Map.prototype.set = function(key, value) {
        if (this._values[key]) {
            this._values[key].v = value;
            return this;
        }
        // Add the key to the list of keys in order
        this._keys.push(key);
        // Add the key and value to the values dictionary with a point
        // to the location in the ordered keys list
        this._values[key] = {
            v: value,
            i: this._keys.length - 1
        };
        return this;
    };
    Map.prototype.values = function() {
        var _this = this;
        var index = 0;
        return {
            next: function() {
                var key = _this._keys[index++];
                return {
                    value: key !== undefined ? _this._values[key].v : undefined,
                    done: key !== undefined ? false : true
                };
            }
        };
    };
    Object.defineProperty(Map.prototype, "size", {
        get: function() {
            return this._keys.length;
        },
        enumerable: false,
        configurable: true
    });
    return Map;
})();
/** @internal */ var $868bb48821d209c4$export$af352521c8649ed7 = 2147483647;
/** @internal */ var $868bb48821d209c4$export$250fc463de59e142 = -2147483648;
/** @internal */ var $868bb48821d209c4$export$327cb7fa26f74edd = Math.pow(2, 63) - 1;
/** @internal */ var $868bb48821d209c4$export$4a86b4076bf575d = -Math.pow(2, 63);
/**
 * Any integer up to 2^53 can be precisely represented by a double.
 * @internal
 */ var $868bb48821d209c4$var$JS_INT_MAX = Math.pow(2, 53);
/**
 * Any integer down to -2^53 can be precisely represented by a double.
 * @internal
 */ var $868bb48821d209c4$var$JS_INT_MIN = -Math.pow(2, 53);
/** Number BSON Type @internal */ var $868bb48821d209c4$export$8a26a5fd67132695 = 1;
/** String BSON Type @internal */ var $868bb48821d209c4$export$2ce63c0cc3c9284 = 2;
/** Object BSON Type @internal */ var $868bb48821d209c4$export$5a91d81c75e64abe = 3;
/** Array BSON Type @internal */ var $868bb48821d209c4$export$a158b7540a414b0 = 4;
/** Binary BSON Type @internal */ var $868bb48821d209c4$export$a6d049d73c03641 = 5;
/** Binary BSON Type @internal */ var $868bb48821d209c4$export$d4e0c9abd56073d0 = 6;
/** ObjectId BSON Type @internal */ var $868bb48821d209c4$export$9c296bef3f2e3a80 = 7;
/** Boolean BSON Type @internal */ var $868bb48821d209c4$export$ddfe5b18c2cb4c61 = 8;
/** Date BSON Type @internal */ var $868bb48821d209c4$export$ff98a022f476c9f6 = 9;
/** null BSON Type @internal */ var $868bb48821d209c4$export$a9d27ecf911c8e2d = 10;
/** RegExp BSON Type @internal */ var $868bb48821d209c4$export$73020e19fe1a5dcb = 11;
/** Code BSON Type @internal */ var $868bb48821d209c4$export$e22680776caf5882 = 12;
/** Code BSON Type @internal */ var $868bb48821d209c4$export$4d96c08829372834 = 13;
/** Symbol BSON Type @internal */ var $868bb48821d209c4$export$d18896fc584f464b = 14;
/** Code with Scope BSON Type @internal */ var $868bb48821d209c4$export$959338844bb54803 = 15;
/** 32 bit Integer BSON Type @internal */ var $868bb48821d209c4$export$6b19edc38baa1a8c = 16;
/** Timestamp BSON Type @internal */ var $868bb48821d209c4$export$86ca409d085d6fb2 = 17;
/** Long BSON Type @internal */ var $868bb48821d209c4$export$c07849652d011312 = 18;
/** Decimal128 BSON Type @internal */ var $868bb48821d209c4$export$cde5e2a4f8adcb68 = 19;
/** MinKey BSON Type @internal */ var $868bb48821d209c4$export$988fa02d40535509 = 255;
/** MaxKey BSON Type @internal */ var $868bb48821d209c4$export$42679d8c82a5a5a0 = 127;
/** Binary Default Type @internal */ var $868bb48821d209c4$export$f0f029beb8f8c664 = 0;
/** Binary Function Type @internal */ var $868bb48821d209c4$export$de4f3e691990aafd = 1;
/** Binary Byte Array Type @internal */ var $868bb48821d209c4$export$48d3f182699ad59 = 2;
/** Binary Deprecated UUID Type @deprecated Please use BSON_BINARY_SUBTYPE_UUID_NEW @internal */ var $868bb48821d209c4$export$35df332a732975a2 = 3;
/** Binary UUID Type @internal */ var $868bb48821d209c4$export$17bbee584f46fa68 = 4;
/** Binary MD5 Type @internal */ var $868bb48821d209c4$export$3480b2b0e04d2c71 = 5;
/** Encrypted BSON type @internal */ var $868bb48821d209c4$export$2d0bb20574033770 = 6;
/** Column BSON type @internal */ var $868bb48821d209c4$export$4de8045685e588e4 = 7;
/** Binary User Defined Type @internal */ var $868bb48821d209c4$export$ae7a7cdb3769db69 = 128;
function $868bb48821d209c4$var$calculateObjectSize$1(object, serializeFunctions, ignoreUndefined) {
    var totalLength = 5;
    if (Array.isArray(object)) for(var i = 0; i < object.length; i++)totalLength += $868bb48821d209c4$var$calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined);
    else {
        // If we have toBSON defined, override the current object
        if (object.toBSON) object = object.toBSON();
        // Calculate size
        for(var key in object)totalLength += $868bb48821d209c4$var$calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);
    }
    return totalLength;
}
/** @internal */ function $868bb48821d209c4$var$calculateElement(name, // eslint-disable-next-line @typescript-eslint/no-explicit-any
value, serializeFunctions, isArray, ignoreUndefined) {
    if (serializeFunctions === void 0) serializeFunctions = false;
    if (isArray === void 0) isArray = false;
    if (ignoreUndefined === void 0) ignoreUndefined = false;
    // If we have toBSON defined, override the current object
    if (value && value.toBSON) value = value.toBSON();
    switch(typeof value){
        case 'string':
            return 1 + $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 + 4 + $868bb48821d209c4$var$buffer_1.byteLength(value, 'utf8') + 1;
        case 'number':
            if (Math.floor(value) === value && value >= $868bb48821d209c4$var$JS_INT_MIN && value <= $868bb48821d209c4$var$JS_INT_MAX) {
                if (value >= $868bb48821d209c4$export$250fc463de59e142 && value <= $868bb48821d209c4$export$af352521c8649ed7) // 32 bit
                return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 5;
                else return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 9;
            } else // 64 bit
            return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 9;
        case 'undefined':
            if (isArray || !ignoreUndefined) return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1;
            return 0;
        case 'boolean':
            return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 2;
        case 'object':
            if (value == null || value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1;
            else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 13;
            else if (value instanceof Date || $868bb48821d209c4$var$isDate(value)) return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 9;
            else if (ArrayBuffer.isView(value) || value instanceof ArrayBuffer || $868bb48821d209c4$var$isAnyArrayBuffer(value)) return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 6 + value.byteLength;
            else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Double' || value['_bsontype'] === 'Timestamp') return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 9;
            else if (value['_bsontype'] === 'Decimal128') return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 17;
            else if (value['_bsontype'] === 'Code') {
                // Calculate size depending on the availability of a scope
                if (value.scope != null && Object.keys(value.scope).length > 0) return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + 4 + $868bb48821d209c4$var$buffer_1.byteLength(value.code.toString(), 'utf8') + 1 + $868bb48821d209c4$var$calculateObjectSize$1(value.scope, serializeFunctions, ignoreUndefined);
                else return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + $868bb48821d209c4$var$buffer_1.byteLength(value.code.toString(), 'utf8') + 1;
            } else if (value['_bsontype'] === 'Binary') {
                // Check what kind of subtype we have
                if (value.sub_type === $868bb48821d209c4$export$dbada097a9bd1de9.SUBTYPE_BYTE_ARRAY) return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1 + 4);
                else return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1);
            } else if (value['_bsontype'] === 'Symbol') return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + $868bb48821d209c4$var$buffer_1.byteLength(value.value, 'utf8') + 4 + 1 + 1;
            else if (value['_bsontype'] === 'DBRef') {
                // Set up correct object for serialization
                var ordered_values = Object.assign({
                    $ref: value.collection,
                    $id: value.oid
                }, value.fields);
                // Add db reference if it exists
                if (value.db != null) ordered_values['$db'] = value.db;
                return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1 + $868bb48821d209c4$var$calculateObjectSize$1(ordered_values, serializeFunctions, ignoreUndefined);
            } else if (value instanceof RegExp || $868bb48821d209c4$var$isRegExp(value)) return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1 + $868bb48821d209c4$var$buffer_1.byteLength(value.source, 'utf8') + 1 + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1;
            else if (value['_bsontype'] === 'BSONRegExp') return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1 + $868bb48821d209c4$var$buffer_1.byteLength(value.pattern, 'utf8') + 1 + $868bb48821d209c4$var$buffer_1.byteLength(value.options, 'utf8') + 1;
            else return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + $868bb48821d209c4$var$calculateObjectSize$1(value, serializeFunctions, ignoreUndefined) + 1;
        case 'function':
            // WTF for 0.4.X where typeof /someregexp/ === 'function'
            if (value instanceof RegExp || $868bb48821d209c4$var$isRegExp(value) || String.call(value) === '[object RegExp]') return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1 + $868bb48821d209c4$var$buffer_1.byteLength(value.source, 'utf8') + 1 + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1;
            else {
                if (serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + 4 + $868bb48821d209c4$var$buffer_1.byteLength($868bb48821d209c4$var$normalizedFunctionString(value), 'utf8') + 1 + $868bb48821d209c4$var$calculateObjectSize$1(value.scope, serializeFunctions, ignoreUndefined);
                else if (serializeFunctions) return (name != null ? $868bb48821d209c4$var$buffer_1.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + $868bb48821d209c4$var$buffer_1.byteLength($868bb48821d209c4$var$normalizedFunctionString(value), 'utf8') + 1;
            }
    }
    return 0;
}
var $868bb48821d209c4$var$FIRST_BIT = 128;
var $868bb48821d209c4$var$FIRST_TWO_BITS = 192;
var $868bb48821d209c4$var$FIRST_THREE_BITS = 224;
var $868bb48821d209c4$var$FIRST_FOUR_BITS = 240;
var $868bb48821d209c4$var$FIRST_FIVE_BITS = 248;
var $868bb48821d209c4$var$TWO_BIT_CHAR = 192;
var $868bb48821d209c4$var$THREE_BIT_CHAR = 224;
var $868bb48821d209c4$var$FOUR_BIT_CHAR = 240;
var $868bb48821d209c4$var$CONTINUING_CHAR = 128;
/**
 * Determines if the passed in bytes are valid utf8
 * @param bytes - An array of 8-bit bytes. Must be indexable and have length property
 * @param start - The index to start validating
 * @param end - The index to end validating
 */ function $868bb48821d209c4$var$validateUtf8(bytes, start, end) {
    var continuation = 0;
    for(var i = start; i < end; i += 1){
        var byte = bytes[i];
        if (continuation) {
            if ((byte & $868bb48821d209c4$var$FIRST_TWO_BITS) !== $868bb48821d209c4$var$CONTINUING_CHAR) return false;
            continuation -= 1;
        } else if (byte & $868bb48821d209c4$var$FIRST_BIT) {
            if ((byte & $868bb48821d209c4$var$FIRST_THREE_BITS) === $868bb48821d209c4$var$TWO_BIT_CHAR) continuation = 1;
            else if ((byte & $868bb48821d209c4$var$FIRST_FOUR_BITS) === $868bb48821d209c4$var$THREE_BIT_CHAR) continuation = 2;
            else if ((byte & $868bb48821d209c4$var$FIRST_FIVE_BITS) === $868bb48821d209c4$var$FOUR_BIT_CHAR) continuation = 3;
            else return false;
        }
    }
    return !continuation;
}
// Internal long versions
var $868bb48821d209c4$var$JS_INT_MAX_LONG = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber($868bb48821d209c4$var$JS_INT_MAX);
var $868bb48821d209c4$var$JS_INT_MIN_LONG = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber($868bb48821d209c4$var$JS_INT_MIN);
var $868bb48821d209c4$var$functionCache = {
};
function $868bb48821d209c4$var$deserialize$1(buffer, options, isArray) {
    options = options == null ? {
    } : options;
    var index = options && options.index ? options.index : 0;
    // Read the document size
    var size = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
    if (size < 5) throw new $868bb48821d209c4$export$dcd4c628d4081c37("bson size must be >= 5, is " + size);
    if (options.allowObjectSmallerThanBufferSize && buffer.length < size) throw new $868bb48821d209c4$export$dcd4c628d4081c37("buffer length " + buffer.length + " must be >= bson size " + size);
    if (!options.allowObjectSmallerThanBufferSize && buffer.length !== size) throw new $868bb48821d209c4$export$dcd4c628d4081c37("buffer length " + buffer.length + " must === bson size " + size);
    if (size + index > buffer.byteLength) throw new $868bb48821d209c4$export$dcd4c628d4081c37("(bson size " + size + " + options.index " + index + " must be <= buffer length " + buffer.byteLength + ")");
    // Illegal end value
    if (buffer[index + size - 1] !== 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");
    // Start deserializtion
    return $868bb48821d209c4$var$deserializeObject(buffer, index, options, isArray);
}
var $868bb48821d209c4$var$allowedDBRefKeys = /^\$ref$|^\$id$|^\$db$/;
function $868bb48821d209c4$var$deserializeObject(buffer, index, options, isArray) {
    if (isArray === void 0) isArray = false;
    var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];
    var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];
    var fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];
    // Return raw bson buffer instead of parsing it
    var raw = options['raw'] == null ? false : options['raw'];
    // Return BSONRegExp objects instead of native regular expressions
    var bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;
    // Controls the promotion of values vs wrapper classes
    var promoteBuffers = options['promoteBuffers'] == null ? false : options['promoteBuffers'];
    var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];
    var promoteValues = options['promoteValues'] == null ? true : options['promoteValues'];
    // Ensures default validation option if none given
    var validation = options.validation == null ? {
        utf8: true
    } : options.validation;
    // Shows if global utf-8 validation is enabled or disabled
    var globalUTFValidation = true;
    // Reflects utf-8 validation setting regardless of global or specific key validation
    var validationSetting;
    // Set of keys either to enable or disable validation on
    var utf8KeysSet = new Set();
    // Check for boolean uniformity and empty validation option
    var utf8ValidatedKeys = validation.utf8;
    if (typeof utf8ValidatedKeys === 'boolean') validationSetting = utf8ValidatedKeys;
    else {
        globalUTFValidation = false;
        var utf8ValidationValues = Object.keys(utf8ValidatedKeys).map(function(key) {
            return utf8ValidatedKeys[key];
        });
        if (utf8ValidationValues.length === 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('UTF-8 validation setting cannot be empty');
        if (typeof utf8ValidationValues[0] !== 'boolean') throw new $868bb48821d209c4$export$dcd4c628d4081c37('Invalid UTF-8 validation option, must specify boolean values');
        validationSetting = utf8ValidationValues[0];
        // Ensures boolean uniformity in utf-8 validation (all true or all false)
        if (!utf8ValidationValues.every(function(item) {
            return item === validationSetting;
        })) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Invalid UTF-8 validation option - keys must be all true or all false');
    }
    // Add keys to set that will either be validated or not based on validationSetting
    if (!globalUTFValidation) for(var _i = 0, _a = Object.keys(utf8ValidatedKeys); _i < _a.length; _i++){
        var key = _a[_i];
        utf8KeysSet.add(key);
    }
    // Set the start index
    var startIndex = index;
    // Validate that we have at least 4 bytes of buffer
    if (buffer.length < 5) throw new $868bb48821d209c4$export$dcd4c628d4081c37('corrupt bson message < 5 bytes long');
    // Read the document size
    var size = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
    // Ensure buffer is valid size
    if (size < 5 || size > buffer.length) throw new $868bb48821d209c4$export$dcd4c628d4081c37('corrupt bson message');
    // Create holding object
    var object = isArray ? [] : {
    };
    // Used for arrays to skip having to perform utf8 decoding
    var arrayIndex = 0;
    var done = false;
    var isPossibleDBRef = isArray ? false : null;
    // While we have more left data left keep parsing
    while(!done){
        // Read the type
        var elementType = buffer[index++];
        // If we get a zero it's the last byte, exit
        if (elementType === 0) break;
        // Get the start search index
        var i = index;
        // Locate the end of the c string
        while(buffer[i] !== 0 && i < buffer.length)i++;
        // If are at the end of the buffer there is a problem with the document
        if (i >= buffer.byteLength) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Bad BSON Document: illegal CString');
        // Represents the key
        var name = isArray ? arrayIndex++ : buffer.toString('utf8', index, i);
        // shouldValidateKey is true if the key should be validated, false otherwise
        var shouldValidateKey = true;
        if (globalUTFValidation || utf8KeysSet.has(name)) shouldValidateKey = validationSetting;
        else shouldValidateKey = !validationSetting;
        if (isPossibleDBRef !== false && name[0] === '$') isPossibleDBRef = $868bb48821d209c4$var$allowedDBRefKeys.test(name);
        var value = void 0;
        index = i + 1;
        if (elementType === $868bb48821d209c4$export$2ce63c0cc3c9284) {
            var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('bad string length in bson');
            value = $868bb48821d209c4$var$getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);
            index = index + stringSize;
        } else if (elementType === $868bb48821d209c4$export$9c296bef3f2e3a80) {
            var oid = $868bb48821d209c4$var$buffer_1.alloc(12);
            buffer.copy(oid, 0, index, index + 12);
            value = new $868bb48821d209c4$export$e68967d37d049767(oid);
            index = index + 12;
        } else if (elementType === $868bb48821d209c4$export$6b19edc38baa1a8c && promoteValues === false) value = new $868bb48821d209c4$export$493726e231866ac3(buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24);
        else if (elementType === $868bb48821d209c4$export$6b19edc38baa1a8c) value = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
        else if (elementType === $868bb48821d209c4$export$8a26a5fd67132695 && promoteValues === false) {
            value = new $868bb48821d209c4$export$340e583a64e26663(buffer.readDoubleLE(index));
            index = index + 8;
        } else if (elementType === $868bb48821d209c4$export$8a26a5fd67132695) {
            value = buffer.readDoubleLE(index);
            index = index + 8;
        } else if (elementType === $868bb48821d209c4$export$ff98a022f476c9f6) {
            var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            value = new Date(new $868bb48821d209c4$export$12ac1d26449d9c2e(lowBits, highBits).toNumber());
        } else if (elementType === $868bb48821d209c4$export$ddfe5b18c2cb4c61) {
            if (buffer[index] !== 0 && buffer[index] !== 1) throw new $868bb48821d209c4$export$dcd4c628d4081c37('illegal boolean type value');
            value = buffer[index++] === 1;
        } else if (elementType === $868bb48821d209c4$export$5a91d81c75e64abe) {
            var _index = index;
            var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
            if (objectSize <= 0 || objectSize > buffer.length - index) throw new $868bb48821d209c4$export$dcd4c628d4081c37('bad embedded document length in bson');
            // We have a raw value
            if (raw) value = buffer.slice(index, index + objectSize);
            else {
                var objectOptions = options;
                if (!globalUTFValidation) objectOptions = $868bb48821d209c4$var$_assign($868bb48821d209c4$var$_assign({
                }, options), {
                    validation: {
                        utf8: shouldValidateKey
                    }
                });
                value = $868bb48821d209c4$var$deserializeObject(buffer, _index, objectOptions, false);
            }
            index = index + objectSize;
        } else if (elementType === $868bb48821d209c4$export$a158b7540a414b0) {
            var _index = index;
            var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
            var arrayOptions = options;
            // Stop index
            var stopIndex = index + objectSize;
            // All elements of array to be returned as raw bson
            if (fieldsAsRaw && fieldsAsRaw[name]) {
                arrayOptions = {
                };
                for(var n in options)arrayOptions[n] = options[n];
                arrayOptions['raw'] = true;
            }
            if (!globalUTFValidation) arrayOptions = $868bb48821d209c4$var$_assign($868bb48821d209c4$var$_assign({
            }, arrayOptions), {
                validation: {
                    utf8: shouldValidateKey
                }
            });
            value = $868bb48821d209c4$var$deserializeObject(buffer, _index, arrayOptions, true);
            index = index + objectSize;
            if (buffer[index - 1] !== 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('invalid array terminator byte');
            if (index !== stopIndex) throw new $868bb48821d209c4$export$dcd4c628d4081c37('corrupted array bson');
        } else if (elementType === $868bb48821d209c4$export$d4e0c9abd56073d0) value = undefined;
        else if (elementType === $868bb48821d209c4$export$a9d27ecf911c8e2d) value = null;
        else if (elementType === $868bb48821d209c4$export$c07849652d011312) {
            // Unpack the low and high bits
            var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            var long = new $868bb48821d209c4$export$12ac1d26449d9c2e(lowBits, highBits);
            // Promote the long if possible
            if (promoteLongs && promoteValues === true) value = long.lessThanOrEqual($868bb48821d209c4$var$JS_INT_MAX_LONG) && long.greaterThanOrEqual($868bb48821d209c4$var$JS_INT_MIN_LONG) ? long.toNumber() : long;
            else value = long;
        } else if (elementType === $868bb48821d209c4$export$cde5e2a4f8adcb68) {
            // Buffer to contain the decimal bytes
            var bytes = $868bb48821d209c4$var$buffer_1.alloc(16);
            // Copy the next 16 bytes into the bytes buffer
            buffer.copy(bytes, 0, index, index + 16);
            // Update index
            index = index + 16;
            // Assign the new Decimal128 value
            var decimal128 = new $868bb48821d209c4$export$39efe8a3f1c2d4eb(bytes);
            // If we have an alternative mapper use that
            if ('toObject' in decimal128 && typeof decimal128.toObject === 'function') value = decimal128.toObject();
            else value = decimal128;
        } else if (elementType === $868bb48821d209c4$export$a6d049d73c03641) {
            var binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            var totalBinarySize = binarySize;
            var subType = buffer[index++];
            // Did we have a negative binary size, throw
            if (binarySize < 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Negative binary type element size found');
            // Is the length longer than the document
            if (binarySize > buffer.byteLength) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Binary type size larger than document size');
            // Decode as raw Buffer object if options specifies it
            if (buffer['slice'] != null) {
                // If we have subtype 2 skip the 4 bytes for the size
                if (subType === $868bb48821d209c4$export$dbada097a9bd1de9.SUBTYPE_BYTE_ARRAY) {
                    binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
                    if (binarySize < 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Negative binary type element size found for subtype 0x02');
                    if (binarySize > totalBinarySize - 4) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Binary type with subtype 0x02 contains too long binary size');
                    if (binarySize < totalBinarySize - 4) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Binary type with subtype 0x02 contains too short binary size');
                }
                if (promoteBuffers && promoteValues) value = buffer.slice(index, index + binarySize);
                else value = new $868bb48821d209c4$export$dbada097a9bd1de9(buffer.slice(index, index + binarySize), subType);
            } else {
                var _buffer = $868bb48821d209c4$var$buffer_1.alloc(binarySize);
                // If we have subtype 2 skip the 4 bytes for the size
                if (subType === $868bb48821d209c4$export$dbada097a9bd1de9.SUBTYPE_BYTE_ARRAY) {
                    binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
                    if (binarySize < 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Negative binary type element size found for subtype 0x02');
                    if (binarySize > totalBinarySize - 4) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Binary type with subtype 0x02 contains too long binary size');
                    if (binarySize < totalBinarySize - 4) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Binary type with subtype 0x02 contains too short binary size');
                }
                // Copy the data
                for(i = 0; i < binarySize; i++)_buffer[i] = buffer[index + i];
                if (promoteBuffers && promoteValues) value = _buffer;
                else value = new $868bb48821d209c4$export$dbada097a9bd1de9(_buffer, subType);
            }
            // Update the index
            index = index + binarySize;
        } else if (elementType === $868bb48821d209c4$export$73020e19fe1a5dcb && bsonRegExp === false) {
            // Get the start search index
            i = index;
            // Locate the end of the c string
            while(buffer[i] !== 0 && i < buffer.length)i++;
            // If are at the end of the buffer there is a problem with the document
            if (i >= buffer.length) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Bad BSON Document: illegal CString');
            // Return the C string
            var source = buffer.toString('utf8', index, i);
            // Create the regexp
            index = i + 1;
            // Get the start search index
            i = index;
            // Locate the end of the c string
            while(buffer[i] !== 0 && i < buffer.length)i++;
            // If are at the end of the buffer there is a problem with the document
            if (i >= buffer.length) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Bad BSON Document: illegal CString');
            // Return the C string
            var regExpOptions = buffer.toString('utf8', index, i);
            index = i + 1;
            // For each option add the corresponding one for javascript
            var optionsArray = new Array(regExpOptions.length);
            // Parse options
            for(i = 0; i < regExpOptions.length; i++)switch(regExpOptions[i]){
                case 'm':
                    optionsArray[i] = 'm';
                    break;
                case 's':
                    optionsArray[i] = 'g';
                    break;
                case 'i':
                    optionsArray[i] = 'i';
                    break;
            }
            value = new RegExp(source, optionsArray.join(''));
        } else if (elementType === $868bb48821d209c4$export$73020e19fe1a5dcb && bsonRegExp === true) {
            // Get the start search index
            i = index;
            // Locate the end of the c string
            while(buffer[i] !== 0 && i < buffer.length)i++;
            // If are at the end of the buffer there is a problem with the document
            if (i >= buffer.length) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Bad BSON Document: illegal CString');
            // Return the C string
            var source = buffer.toString('utf8', index, i);
            index = i + 1;
            // Get the start search index
            i = index;
            // Locate the end of the c string
            while(buffer[i] !== 0 && i < buffer.length)i++;
            // If are at the end of the buffer there is a problem with the document
            if (i >= buffer.length) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Bad BSON Document: illegal CString');
            // Return the C string
            var regExpOptions = buffer.toString('utf8', index, i);
            index = i + 1;
            // Set the object
            value = new $868bb48821d209c4$export$f7fea3e08dc99c1d(source, regExpOptions);
        } else if (elementType === $868bb48821d209c4$export$d18896fc584f464b) {
            var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('bad string length in bson');
            var symbol = $868bb48821d209c4$var$getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);
            value = promoteValues ? symbol : new $868bb48821d209c4$export$8251e971c2f12361(symbol);
            index = index + stringSize;
        } else if (elementType === $868bb48821d209c4$export$86ca409d085d6fb2) {
            var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            value = new $868bb48821d209c4$export$d9bcbd5e1ff81430(lowBits, highBits);
        } else if (elementType === $868bb48821d209c4$export$988fa02d40535509) value = new $868bb48821d209c4$export$aa9d11358976b3cc();
        else if (elementType === $868bb48821d209c4$export$42679d8c82a5a5a0) value = new $868bb48821d209c4$export$d380297cb28b8de0();
        else if (elementType === $868bb48821d209c4$export$4d96c08829372834) {
            var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('bad string length in bson');
            var functionString = $868bb48821d209c4$var$getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);
            // If we are evaluating the functions
            if (evalFunctions) {
                // If we have cache enabled let's look for the md5 of the function in the cache
                if (cacheFunctions) // Got to do this to avoid V8 deoptimizing the call due to finding eval
                value = $868bb48821d209c4$var$isolateEval(functionString, $868bb48821d209c4$var$functionCache, object);
                else value = $868bb48821d209c4$var$isolateEval(functionString);
            } else value = new $868bb48821d209c4$export$52f0f02147b12c03(functionString);
            // Update parse index position
            index = index + stringSize;
        } else if (elementType === $868bb48821d209c4$export$959338844bb54803) {
            var totalSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            // Element cannot be shorter than totalSize + stringSize + documentSize + terminator
            if (totalSize < 13) throw new $868bb48821d209c4$export$dcd4c628d4081c37('code_w_scope total size shorter minimum expected length');
            // Get the code string size
            var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            // Check if we have a valid string
            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('bad string length in bson');
            // Javascript function
            var functionString = $868bb48821d209c4$var$getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);
            // Update parse index position
            index = index + stringSize;
            // Parse the element
            var _index = index;
            // Decode the size of the object document
            var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
            // Decode the scope object
            var scopeObject = $868bb48821d209c4$var$deserializeObject(buffer, _index, options, false);
            // Adjust the index
            index = index + objectSize;
            // Check if field length is too short
            if (totalSize < 8 + objectSize + stringSize) throw new $868bb48821d209c4$export$dcd4c628d4081c37('code_w_scope total size is too short, truncating scope');
            // Check if totalSize field is too long
            if (totalSize > 8 + objectSize + stringSize) throw new $868bb48821d209c4$export$dcd4c628d4081c37('code_w_scope total size is too long, clips outer document');
            // If we are evaluating the functions
            if (evalFunctions) {
                // If we have cache enabled let's look for the md5 of the function in the cache
                if (cacheFunctions) // Got to do this to avoid V8 deoptimizing the call due to finding eval
                value = $868bb48821d209c4$var$isolateEval(functionString, $868bb48821d209c4$var$functionCache, object);
                else value = $868bb48821d209c4$var$isolateEval(functionString);
                value.scope = scopeObject;
            } else value = new $868bb48821d209c4$export$52f0f02147b12c03(functionString, scopeObject);
        } else if (elementType === $868bb48821d209c4$export$e22680776caf5882) {
            // Get the code string size
            var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
            // Check if we have a valid string
            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) throw new $868bb48821d209c4$export$dcd4c628d4081c37('bad string length in bson');
            // Namespace
            if (validation != null && validation.utf8) {
                if (!$868bb48821d209c4$var$validateUtf8(buffer, index, index + stringSize - 1)) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Invalid UTF-8 string in BSON document');
            }
            var namespace = buffer.toString('utf8', index, index + stringSize - 1);
            // Update parse index position
            index = index + stringSize;
            // Read the oid
            var oidBuffer = $868bb48821d209c4$var$buffer_1.alloc(12);
            buffer.copy(oidBuffer, 0, index, index + 12);
            var oid = new $868bb48821d209c4$export$e68967d37d049767(oidBuffer);
            // Update the index
            index = index + 12;
            // Upgrade to DBRef type
            value = new $868bb48821d209c4$export$90e456a500235b9(namespace, oid);
        } else throw new $868bb48821d209c4$export$dcd4c628d4081c37('Detected unknown BSON type ' + elementType.toString(16) + ' for fieldname "' + name + '"');
        if (name === '__proto__') Object.defineProperty(object, name, {
            value: value,
            writable: true,
            enumerable: true,
            configurable: true
        });
        else object[name] = value;
    }
    // Check if the deserialization was against a valid array/object
    if (size !== index - startIndex) {
        if (isArray) throw new $868bb48821d209c4$export$dcd4c628d4081c37('corrupt array bson');
        throw new $868bb48821d209c4$export$dcd4c628d4081c37('corrupt object bson');
    }
    // if we did not find "$ref", "$id", "$db", or found an extraneous $key, don't make a DBRef
    if (!isPossibleDBRef) return object;
    if ($868bb48821d209c4$var$isDBRefLike(object)) {
        var copy = Object.assign({
        }, object);
        delete copy.$ref;
        delete copy.$id;
        delete copy.$db;
        return new $868bb48821d209c4$export$90e456a500235b9(object.$ref, object.$id, object.$db, copy);
    }
    return object;
}
/**
 * Ensure eval is isolated, store the result in functionCache.
 *
 * @internal
 */ function $868bb48821d209c4$var$isolateEval(functionString, functionCache, object) {
    if (!functionCache) return new Function(functionString);
    // Check for cache hit, eval if missing and return cached function
    if (functionCache[functionString] == null) functionCache[functionString] = new Function(functionString);
    // Set the object
    return functionCache[functionString].bind(object);
}
function $868bb48821d209c4$var$getValidatedString(buffer, start, end, shouldValidateUtf8) {
    var value = buffer.toString('utf8', start, end);
    // if utf8 validation is on, do the check
    if (shouldValidateUtf8) {
        for(var i = 0; i < value.length; i++)if (value.charCodeAt(i) === 65533) {
            if (!$868bb48821d209c4$var$validateUtf8(buffer, start, end)) throw new $868bb48821d209c4$export$dcd4c628d4081c37('Invalid UTF-8 string in BSON document');
            break;
        }
    }
    return value;
}
// Copyright (c) 2008, Fair Oaks Labs, Inc.
function $868bb48821d209c4$var$writeIEEE754(buffer, value, offset, endian, mLen, nBytes) {
    var e;
    var m;
    var c;
    var bBE = endian === 'big';
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = bBE ? nBytes - 1 : 0;
    var d = bBE ? -1 : 1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    if (isNaN(value)) m = 0;
    while(mLen >= 8){
        buffer[offset + i] = m & 255;
        i += d;
        m /= 256;
        mLen -= 8;
    }
    e = e << mLen | m;
    if (isNaN(value)) e += 8;
    eLen += mLen;
    while(eLen > 0){
        buffer[offset + i] = e & 255;
        i += d;
        e /= 256;
        eLen -= 8;
    }
    buffer[offset + i - d] |= s * 128;
}
var $868bb48821d209c4$var$regexp = /\x00/; // eslint-disable-line no-control-regex
var $868bb48821d209c4$var$ignoreKeys = new Set([
    '$db',
    '$ref',
    '$id',
    '$clusterTime'
]);
/*
 * isArray indicates if we are writing to a BSON array (type 0x04)
 * which forces the "key" which really an array index as a string to be written as ascii
 * This will catch any errors in index as a string generation
 */ function $868bb48821d209c4$var$serializeString(buffer, key, value, index, isArray) {
    // Encode String type
    buffer[index++] = $868bb48821d209c4$export$2ce63c0cc3c9284;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes + 1;
    buffer[index - 1] = 0;
    // Write the string
    var size = buffer.write(value, index + 4, undefined, 'utf8');
    // Write the size of the string to buffer
    buffer[index + 3] = size + 1 >> 24 & 255;
    buffer[index + 2] = size + 1 >> 16 & 255;
    buffer[index + 1] = size + 1 >> 8 & 255;
    buffer[index] = size + 1 & 255;
    // Update index
    index = index + 4 + size;
    // Write zero
    buffer[index++] = 0;
    return index;
}
function $868bb48821d209c4$var$serializeNumber(buffer, key, value, index, isArray) {
    // We have an integer value
    // TODO(NODE-2529): Add support for big int
    if (Number.isInteger(value) && value >= $868bb48821d209c4$export$250fc463de59e142 && value <= $868bb48821d209c4$export$af352521c8649ed7) {
        // If the value fits in 32 bits encode as int32
        // Set int type 32 bits or less
        buffer[index++] = $868bb48821d209c4$export$6b19edc38baa1a8c;
        // Number of written bytes
        var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Write the int value
        buffer[index++] = value & 255;
        buffer[index++] = value >> 8 & 255;
        buffer[index++] = value >> 16 & 255;
        buffer[index++] = value >> 24 & 255;
    } else {
        // Encode as double
        buffer[index++] = $868bb48821d209c4$export$8a26a5fd67132695;
        // Number of written bytes
        var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Write float
        $868bb48821d209c4$var$writeIEEE754(buffer, value, index, 'little', 52, 8);
        // Adjust index
        index = index + 8;
    }
    return index;
}
function $868bb48821d209c4$var$serializeNull(buffer, key, _, index, isArray) {
    // Set long type
    buffer[index++] = $868bb48821d209c4$export$a9d27ecf911c8e2d;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    return index;
}
function $868bb48821d209c4$var$serializeBoolean(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = $868bb48821d209c4$export$ddfe5b18c2cb4c61;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Encode the boolean value
    buffer[index++] = value ? 1 : 0;
    return index;
}
function $868bb48821d209c4$var$serializeDate(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = $868bb48821d209c4$export$ff98a022f476c9f6;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the date
    var dateInMilis = $868bb48821d209c4$export$12ac1d26449d9c2e.fromNumber(value.getTime());
    var lowBits = dateInMilis.getLowBits();
    var highBits = dateInMilis.getHighBits();
    // Encode low bits
    buffer[index++] = lowBits & 255;
    buffer[index++] = lowBits >> 8 & 255;
    buffer[index++] = lowBits >> 16 & 255;
    buffer[index++] = lowBits >> 24 & 255;
    // Encode high bits
    buffer[index++] = highBits & 255;
    buffer[index++] = highBits >> 8 & 255;
    buffer[index++] = highBits >> 16 & 255;
    buffer[index++] = highBits >> 24 & 255;
    return index;
}
function $868bb48821d209c4$var$serializeRegExp(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = $868bb48821d209c4$export$73020e19fe1a5dcb;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    if (value.source && value.source.match($868bb48821d209c4$var$regexp) != null) throw Error('value ' + value.source + ' must not contain null bytes');
    // Adjust the index
    index = index + buffer.write(value.source, index, undefined, 'utf8');
    // Write zero
    buffer[index++] = 0;
    // Write the parameters
    if (value.ignoreCase) buffer[index++] = 105; // i
    if (value.global) buffer[index++] = 115; // s
    if (value.multiline) buffer[index++] = 109; // m
    // Add ending zero
    buffer[index++] = 0;
    return index;
}
function $868bb48821d209c4$var$serializeBSONRegExp(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = $868bb48821d209c4$export$73020e19fe1a5dcb;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Check the pattern for 0 bytes
    if (value.pattern.match($868bb48821d209c4$var$regexp) != null) // The BSON spec doesn't allow keys with null bytes because keys are
    // null-terminated.
    throw Error('pattern ' + value.pattern + ' must not contain null bytes');
    // Adjust the index
    index = index + buffer.write(value.pattern, index, undefined, 'utf8');
    // Write zero
    buffer[index++] = 0;
    // Write the options
    index = index + buffer.write(value.options.split('').sort().join(''), index, undefined, 'utf8');
    // Add ending zero
    buffer[index++] = 0;
    return index;
}
function $868bb48821d209c4$var$serializeMinMax(buffer, key, value, index, isArray) {
    // Write the type of either min or max key
    if (value === null) buffer[index++] = $868bb48821d209c4$export$a9d27ecf911c8e2d;
    else if (value._bsontype === 'MinKey') buffer[index++] = $868bb48821d209c4$export$988fa02d40535509;
    else buffer[index++] = $868bb48821d209c4$export$42679d8c82a5a5a0;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    return index;
}
function $868bb48821d209c4$var$serializeObjectId(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = $868bb48821d209c4$export$9c296bef3f2e3a80;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the objectId into the shared buffer
    if (typeof value.id === 'string') buffer.write(value.id, index, undefined, 'binary');
    else if ($868bb48821d209c4$var$isUint8Array(value.id)) // Use the standard JS methods here because buffer.copy() is buggy with the
    // browser polyfill
    buffer.set(value.id.subarray(0, 12), index);
    else throw new $868bb48821d209c4$export$5f4690e5e32707d3('object [' + JSON.stringify(value) + '] is not a valid ObjectId');
    // Adjust index
    return index + 12;
}
function $868bb48821d209c4$var$serializeBuffer(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = $868bb48821d209c4$export$a6d049d73c03641;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Get size of the buffer (current write point)
    var size = value.length;
    // Write the size of the string to buffer
    buffer[index++] = size & 255;
    buffer[index++] = size >> 8 & 255;
    buffer[index++] = size >> 16 & 255;
    buffer[index++] = size >> 24 & 255;
    // Write the default subtype
    buffer[index++] = $868bb48821d209c4$export$f0f029beb8f8c664;
    // Copy the content form the binary field to the buffer
    buffer.set($868bb48821d209c4$var$ensureBuffer(value), index);
    // Adjust the index
    index = index + size;
    return index;
}
function $868bb48821d209c4$var$serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray, path) {
    if (checkKeys === void 0) checkKeys = false;
    if (depth === void 0) depth = 0;
    if (serializeFunctions === void 0) serializeFunctions = false;
    if (ignoreUndefined === void 0) ignoreUndefined = true;
    if (isArray === void 0) isArray = false;
    if (path === void 0) path = [];
    for(var i = 0; i < path.length; i++){
        if (path[i] === value) throw new $868bb48821d209c4$export$dcd4c628d4081c37('cyclic dependency detected');
    }
    // Push value to stack
    path.push(value);
    // Write the type
    buffer[index++] = Array.isArray(value) ? $868bb48821d209c4$export$a158b7540a414b0 : $868bb48821d209c4$export$5a91d81c75e64abe;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    var endIndex = $868bb48821d209c4$var$serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);
    // Pop stack
    path.pop();
    return endIndex;
}
function $868bb48821d209c4$var$serializeDecimal128(buffer, key, value, index, isArray) {
    buffer[index++] = $868bb48821d209c4$export$cde5e2a4f8adcb68;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the data from the value
    // Prefer the standard JS methods because their typechecking is not buggy,
    // unlike the `buffer` polyfill's.
    buffer.set(value.bytes.subarray(0, 16), index);
    return index + 16;
}
function $868bb48821d209c4$var$serializeLong(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = value._bsontype === 'Long' ? $868bb48821d209c4$export$c07849652d011312 : $868bb48821d209c4$export$86ca409d085d6fb2;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the date
    var lowBits = value.getLowBits();
    var highBits = value.getHighBits();
    // Encode low bits
    buffer[index++] = lowBits & 255;
    buffer[index++] = lowBits >> 8 & 255;
    buffer[index++] = lowBits >> 16 & 255;
    buffer[index++] = lowBits >> 24 & 255;
    // Encode high bits
    buffer[index++] = highBits & 255;
    buffer[index++] = highBits >> 8 & 255;
    buffer[index++] = highBits >> 16 & 255;
    buffer[index++] = highBits >> 24 & 255;
    return index;
}
function $868bb48821d209c4$var$serializeInt32(buffer, key, value, index, isArray) {
    value = value.valueOf();
    // Set int type 32 bits or less
    buffer[index++] = $868bb48821d209c4$export$6b19edc38baa1a8c;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the int value
    buffer[index++] = value & 255;
    buffer[index++] = value >> 8 & 255;
    buffer[index++] = value >> 16 & 255;
    buffer[index++] = value >> 24 & 255;
    return index;
}
function $868bb48821d209c4$var$serializeDouble(buffer, key, value, index, isArray) {
    // Encode as double
    buffer[index++] = $868bb48821d209c4$export$8a26a5fd67132695;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write float
    $868bb48821d209c4$var$writeIEEE754(buffer, value.value, index, 'little', 52, 8);
    // Adjust index
    index = index + 8;
    return index;
}
function $868bb48821d209c4$var$serializeFunction(buffer, key, value, index, _checkKeys, _depth, isArray) {
    buffer[index++] = $868bb48821d209c4$export$4d96c08829372834;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Function string
    var functionString = $868bb48821d209c4$var$normalizedFunctionString(value);
    // Write the string
    var size = buffer.write(functionString, index + 4, undefined, 'utf8') + 1;
    // Write the size of the string to buffer
    buffer[index] = size & 255;
    buffer[index + 1] = size >> 8 & 255;
    buffer[index + 2] = size >> 16 & 255;
    buffer[index + 3] = size >> 24 & 255;
    // Update index
    index = index + 4 + size - 1;
    // Write zero
    buffer[index++] = 0;
    return index;
}
function $868bb48821d209c4$var$serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray) {
    if (checkKeys === void 0) checkKeys = false;
    if (depth === void 0) depth = 0;
    if (serializeFunctions === void 0) serializeFunctions = false;
    if (ignoreUndefined === void 0) ignoreUndefined = true;
    if (isArray === void 0) isArray = false;
    if (value.scope && typeof value.scope === 'object') {
        // Write the type
        buffer[index++] = $868bb48821d209c4$export$959338844bb54803;
        // Number of written bytes
        var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Starting index
        var startIndex = index;
        // Serialize the function
        // Get the function string
        var functionString = typeof value.code === 'string' ? value.code : value.code.toString();
        // Index adjustment
        index = index + 4;
        // Write string into buffer
        var codeSize = buffer.write(functionString, index + 4, undefined, 'utf8') + 1;
        // Write the size of the string to buffer
        buffer[index] = codeSize & 255;
        buffer[index + 1] = codeSize >> 8 & 255;
        buffer[index + 2] = codeSize >> 16 & 255;
        buffer[index + 3] = codeSize >> 24 & 255;
        // Write end 0
        buffer[index + 4 + codeSize - 1] = 0;
        // Write the
        index = index + codeSize + 4;
        //
        // Serialize the scope value
        var endIndex = $868bb48821d209c4$var$serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined);
        index = endIndex - 1;
        // Writ the total
        var totalSize = endIndex - startIndex;
        // Write the total size of the object
        buffer[startIndex++] = totalSize & 255;
        buffer[startIndex++] = totalSize >> 8 & 255;
        buffer[startIndex++] = totalSize >> 16 & 255;
        buffer[startIndex++] = totalSize >> 24 & 255;
        // Write trailing zero
        buffer[index++] = 0;
    } else {
        buffer[index++] = $868bb48821d209c4$export$4d96c08829372834;
        // Number of written bytes
        var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Function string
        var functionString = value.code.toString();
        // Write the string
        var size = buffer.write(functionString, index + 4, undefined, 'utf8') + 1;
        // Write the size of the string to buffer
        buffer[index] = size & 255;
        buffer[index + 1] = size >> 8 & 255;
        buffer[index + 2] = size >> 16 & 255;
        buffer[index + 3] = size >> 24 & 255;
        // Update index
        index = index + 4 + size - 1;
        // Write zero
        buffer[index++] = 0;
    }
    return index;
}
function $868bb48821d209c4$var$serializeBinary(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = $868bb48821d209c4$export$a6d049d73c03641;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Extract the buffer
    var data = value.value(true);
    // Calculate size
    var size = value.position;
    // Add the deprecated 02 type 4 bytes of size to total
    if (value.sub_type === $868bb48821d209c4$export$dbada097a9bd1de9.SUBTYPE_BYTE_ARRAY) size = size + 4;
    // Write the size of the string to buffer
    buffer[index++] = size & 255;
    buffer[index++] = size >> 8 & 255;
    buffer[index++] = size >> 16 & 255;
    buffer[index++] = size >> 24 & 255;
    // Write the subtype to the buffer
    buffer[index++] = value.sub_type;
    // If we have binary type 2 the 4 first bytes are the size
    if (value.sub_type === $868bb48821d209c4$export$dbada097a9bd1de9.SUBTYPE_BYTE_ARRAY) {
        size = size - 4;
        buffer[index++] = size & 255;
        buffer[index++] = size >> 8 & 255;
        buffer[index++] = size >> 16 & 255;
        buffer[index++] = size >> 24 & 255;
    }
    // Write the data to the object
    buffer.set(data, index);
    // Adjust the index
    index = index + value.position;
    return index;
}
function $868bb48821d209c4$var$serializeSymbol(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = $868bb48821d209c4$export$d18896fc584f464b;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the string
    var size = buffer.write(value.value, index + 4, undefined, 'utf8') + 1;
    // Write the size of the string to buffer
    buffer[index] = size & 255;
    buffer[index + 1] = size >> 8 & 255;
    buffer[index + 2] = size >> 16 & 255;
    buffer[index + 3] = size >> 24 & 255;
    // Update index
    index = index + 4 + size - 1;
    // Write zero
    buffer[index++] = 0;
    return index;
}
function $868bb48821d209c4$var$serializeDBRef(buffer, key, value, index, depth, serializeFunctions, isArray) {
    // Write the type
    buffer[index++] = $868bb48821d209c4$export$5a91d81c75e64abe;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, undefined, 'utf8') : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    var startIndex = index;
    var output = {
        $ref: value.collection || value.namespace,
        $id: value.oid
    };
    if (value.db != null) output.$db = value.db;
    output = Object.assign(output, value.fields);
    var endIndex = $868bb48821d209c4$var$serializeInto(buffer, output, false, index, depth + 1, serializeFunctions);
    // Calculate object size
    var size = endIndex - startIndex;
    // Write the size
    buffer[startIndex++] = size & 255;
    buffer[startIndex++] = size >> 8 & 255;
    buffer[startIndex++] = size >> 16 & 255;
    buffer[startIndex++] = size >> 24 & 255;
    // Set index
    return endIndex;
}
function $868bb48821d209c4$var$serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {
    if (checkKeys === void 0) checkKeys = false;
    if (startingIndex === void 0) startingIndex = 0;
    if (depth === void 0) depth = 0;
    if (serializeFunctions === void 0) serializeFunctions = false;
    if (ignoreUndefined === void 0) ignoreUndefined = true;
    if (path === void 0) path = [];
    startingIndex = startingIndex || 0;
    path = path || [];
    // Push the object to the path
    path.push(object);
    // Start place to serialize into
    var index = startingIndex + 4;
    // Special case isArray
    if (Array.isArray(object)) // Get object keys
    for(var i = 0; i < object.length; i++){
        var key = '' + i;
        var value = object[i];
        // Is there an override value
        if (value && value.toBSON) {
            if (typeof value.toBSON !== 'function') throw new $868bb48821d209c4$export$5f4690e5e32707d3('toBSON is not a function');
            value = value.toBSON();
        }
        if (typeof value === 'string') index = $868bb48821d209c4$var$serializeString(buffer, key, value, index, true);
        else if (typeof value === 'number') index = $868bb48821d209c4$var$serializeNumber(buffer, key, value, index, true);
        else if (typeof value === 'bigint') throw new $868bb48821d209c4$export$5f4690e5e32707d3('Unsupported type BigInt, please use Decimal128');
        else if (typeof value === 'boolean') index = $868bb48821d209c4$var$serializeBoolean(buffer, key, value, index, true);
        else if (value instanceof Date || $868bb48821d209c4$var$isDate(value)) index = $868bb48821d209c4$var$serializeDate(buffer, key, value, index, true);
        else if (value === undefined) index = $868bb48821d209c4$var$serializeNull(buffer, key, value, index, true);
        else if (value === null) index = $868bb48821d209c4$var$serializeNull(buffer, key, value, index, true);
        else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') index = $868bb48821d209c4$var$serializeObjectId(buffer, key, value, index, true);
        else if ($868bb48821d209c4$var$isUint8Array(value)) index = $868bb48821d209c4$var$serializeBuffer(buffer, key, value, index, true);
        else if (value instanceof RegExp || $868bb48821d209c4$var$isRegExp(value)) index = $868bb48821d209c4$var$serializeRegExp(buffer, key, value, index, true);
        else if (typeof value === 'object' && value['_bsontype'] == null) index = $868bb48821d209c4$var$serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true, path);
        else if (typeof value === 'object' && $868bb48821d209c4$var$isBSONType(value) && value._bsontype === 'Decimal128') index = $868bb48821d209c4$var$serializeDecimal128(buffer, key, value, index, true);
        else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') index = $868bb48821d209c4$var$serializeLong(buffer, key, value, index, true);
        else if (value['_bsontype'] === 'Double') index = $868bb48821d209c4$var$serializeDouble(buffer, key, value, index, true);
        else if (typeof value === 'function' && serializeFunctions) index = $868bb48821d209c4$var$serializeFunction(buffer, key, value, index, checkKeys, depth, true);
        else if (value['_bsontype'] === 'Code') index = $868bb48821d209c4$var$serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true);
        else if (value['_bsontype'] === 'Binary') index = $868bb48821d209c4$var$serializeBinary(buffer, key, value, index, true);
        else if (value['_bsontype'] === 'Symbol') index = $868bb48821d209c4$var$serializeSymbol(buffer, key, value, index, true);
        else if (value['_bsontype'] === 'DBRef') index = $868bb48821d209c4$var$serializeDBRef(buffer, key, value, index, depth, serializeFunctions, true);
        else if (value['_bsontype'] === 'BSONRegExp') index = $868bb48821d209c4$var$serializeBSONRegExp(buffer, key, value, index, true);
        else if (value['_bsontype'] === 'Int32') index = $868bb48821d209c4$var$serializeInt32(buffer, key, value, index, true);
        else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') index = $868bb48821d209c4$var$serializeMinMax(buffer, key, value, index, true);
        else if (typeof value['_bsontype'] !== 'undefined') throw new $868bb48821d209c4$export$5f4690e5e32707d3('Unrecognized or invalid _bsontype: ' + value['_bsontype']);
    }
    else if (object instanceof $868bb48821d209c4$export$a5c7b93649eaf8f8 || $868bb48821d209c4$var$isMap(object)) {
        var iterator = object.entries();
        var done = false;
        while(!done){
            // Unpack the next entry
            var entry = iterator.next();
            done = !!entry.done;
            // Are we done, then skip and terminate
            if (done) continue;
            // Get the entry values
            var key = entry.value[0];
            var value = entry.value[1];
            // Check the type of the value
            var type = typeof value;
            // Check the key and throw error if it's illegal
            if (typeof key === 'string' && !$868bb48821d209c4$var$ignoreKeys.has(key)) {
                if (key.match($868bb48821d209c4$var$regexp) != null) // The BSON spec doesn't allow keys with null bytes because keys are
                // null-terminated.
                throw Error('key ' + key + ' must not contain null bytes');
                if (checkKeys) {
                    if ('$' === key[0]) throw Error('key ' + key + " must not start with '$'");
                    else if (~key.indexOf('.')) throw Error('key ' + key + " must not contain '.'");
                }
            }
            if (type === 'string') index = $868bb48821d209c4$var$serializeString(buffer, key, value, index);
            else if (type === 'number') index = $868bb48821d209c4$var$serializeNumber(buffer, key, value, index);
            else if (type === 'bigint' || $868bb48821d209c4$var$isBigInt64Array(value) || $868bb48821d209c4$var$isBigUInt64Array(value)) throw new $868bb48821d209c4$export$5f4690e5e32707d3('Unsupported type BigInt, please use Decimal128');
            else if (type === 'boolean') index = $868bb48821d209c4$var$serializeBoolean(buffer, key, value, index);
            else if (value instanceof Date || $868bb48821d209c4$var$isDate(value)) index = $868bb48821d209c4$var$serializeDate(buffer, key, value, index);
            else if (value === null || value === undefined && ignoreUndefined === false) index = $868bb48821d209c4$var$serializeNull(buffer, key, value, index);
            else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') index = $868bb48821d209c4$var$serializeObjectId(buffer, key, value, index);
            else if ($868bb48821d209c4$var$isUint8Array(value)) index = $868bb48821d209c4$var$serializeBuffer(buffer, key, value, index);
            else if (value instanceof RegExp || $868bb48821d209c4$var$isRegExp(value)) index = $868bb48821d209c4$var$serializeRegExp(buffer, key, value, index);
            else if (type === 'object' && value['_bsontype'] == null) index = $868bb48821d209c4$var$serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);
            else if (type === 'object' && value['_bsontype'] === 'Decimal128') index = $868bb48821d209c4$var$serializeDecimal128(buffer, key, value, index);
            else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') index = $868bb48821d209c4$var$serializeLong(buffer, key, value, index);
            else if (value['_bsontype'] === 'Double') index = $868bb48821d209c4$var$serializeDouble(buffer, key, value, index);
            else if (value['_bsontype'] === 'Code') index = $868bb48821d209c4$var$serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
            else if (typeof value === 'function' && serializeFunctions) index = $868bb48821d209c4$var$serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);
            else if (value['_bsontype'] === 'Binary') index = $868bb48821d209c4$var$serializeBinary(buffer, key, value, index);
            else if (value['_bsontype'] === 'Symbol') index = $868bb48821d209c4$var$serializeSymbol(buffer, key, value, index);
            else if (value['_bsontype'] === 'DBRef') index = $868bb48821d209c4$var$serializeDBRef(buffer, key, value, index, depth, serializeFunctions);
            else if (value['_bsontype'] === 'BSONRegExp') index = $868bb48821d209c4$var$serializeBSONRegExp(buffer, key, value, index);
            else if (value['_bsontype'] === 'Int32') index = $868bb48821d209c4$var$serializeInt32(buffer, key, value, index);
            else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') index = $868bb48821d209c4$var$serializeMinMax(buffer, key, value, index);
            else if (typeof value['_bsontype'] !== 'undefined') throw new $868bb48821d209c4$export$5f4690e5e32707d3('Unrecognized or invalid _bsontype: ' + value['_bsontype']);
        }
    } else {
        // Did we provide a custom serialization method
        if (object.toBSON) {
            if (typeof object.toBSON !== 'function') throw new $868bb48821d209c4$export$5f4690e5e32707d3('toBSON is not a function');
            object = object.toBSON();
            if (object != null && typeof object !== 'object') throw new $868bb48821d209c4$export$5f4690e5e32707d3('toBSON function did not return an object');
        }
        // Iterate over all the keys
        for(var key in object){
            var value = object[key];
            // Is there an override value
            if (value && value.toBSON) {
                if (typeof value.toBSON !== 'function') throw new $868bb48821d209c4$export$5f4690e5e32707d3('toBSON is not a function');
                value = value.toBSON();
            }
            // Check the type of the value
            var type = typeof value;
            // Check the key and throw error if it's illegal
            if (typeof key === 'string' && !$868bb48821d209c4$var$ignoreKeys.has(key)) {
                if (key.match($868bb48821d209c4$var$regexp) != null) // The BSON spec doesn't allow keys with null bytes because keys are
                // null-terminated.
                throw Error('key ' + key + ' must not contain null bytes');
                if (checkKeys) {
                    if ('$' === key[0]) throw Error('key ' + key + " must not start with '$'");
                    else if (~key.indexOf('.')) throw Error('key ' + key + " must not contain '.'");
                }
            }
            if (type === 'string') index = $868bb48821d209c4$var$serializeString(buffer, key, value, index);
            else if (type === 'number') index = $868bb48821d209c4$var$serializeNumber(buffer, key, value, index);
            else if (type === 'bigint') throw new $868bb48821d209c4$export$5f4690e5e32707d3('Unsupported type BigInt, please use Decimal128');
            else if (type === 'boolean') index = $868bb48821d209c4$var$serializeBoolean(buffer, key, value, index);
            else if (value instanceof Date || $868bb48821d209c4$var$isDate(value)) index = $868bb48821d209c4$var$serializeDate(buffer, key, value, index);
            else if (value === undefined) {
                if (ignoreUndefined === false) index = $868bb48821d209c4$var$serializeNull(buffer, key, value, index);
            } else if (value === null) index = $868bb48821d209c4$var$serializeNull(buffer, key, value, index);
            else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') index = $868bb48821d209c4$var$serializeObjectId(buffer, key, value, index);
            else if ($868bb48821d209c4$var$isUint8Array(value)) index = $868bb48821d209c4$var$serializeBuffer(buffer, key, value, index);
            else if (value instanceof RegExp || $868bb48821d209c4$var$isRegExp(value)) index = $868bb48821d209c4$var$serializeRegExp(buffer, key, value, index);
            else if (type === 'object' && value['_bsontype'] == null) index = $868bb48821d209c4$var$serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);
            else if (type === 'object' && value['_bsontype'] === 'Decimal128') index = $868bb48821d209c4$var$serializeDecimal128(buffer, key, value, index);
            else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') index = $868bb48821d209c4$var$serializeLong(buffer, key, value, index);
            else if (value['_bsontype'] === 'Double') index = $868bb48821d209c4$var$serializeDouble(buffer, key, value, index);
            else if (value['_bsontype'] === 'Code') index = $868bb48821d209c4$var$serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
            else if (typeof value === 'function' && serializeFunctions) index = $868bb48821d209c4$var$serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);
            else if (value['_bsontype'] === 'Binary') index = $868bb48821d209c4$var$serializeBinary(buffer, key, value, index);
            else if (value['_bsontype'] === 'Symbol') index = $868bb48821d209c4$var$serializeSymbol(buffer, key, value, index);
            else if (value['_bsontype'] === 'DBRef') index = $868bb48821d209c4$var$serializeDBRef(buffer, key, value, index, depth, serializeFunctions);
            else if (value['_bsontype'] === 'BSONRegExp') index = $868bb48821d209c4$var$serializeBSONRegExp(buffer, key, value, index);
            else if (value['_bsontype'] === 'Int32') index = $868bb48821d209c4$var$serializeInt32(buffer, key, value, index);
            else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') index = $868bb48821d209c4$var$serializeMinMax(buffer, key, value, index);
            else if (typeof value['_bsontype'] !== 'undefined') throw new $868bb48821d209c4$export$5f4690e5e32707d3('Unrecognized or invalid _bsontype: ' + value['_bsontype']);
        }
    }
    // Remove the path
    path.pop();
    // Final padding byte for object
    buffer[index++] = 0;
    // Final size
    var size = index - startingIndex;
    // Write the size of the object
    buffer[startingIndex++] = size & 255;
    buffer[startingIndex++] = size >> 8 & 255;
    buffer[startingIndex++] = size >> 16 & 255;
    buffer[startingIndex++] = size >> 24 & 255;
    return index;
}
/** @internal */ // Default Max Size
var $868bb48821d209c4$var$MAXSIZE = 17825792;
// Current Internal Temporary Serialization Buffer
var $868bb48821d209c4$var$buffer = $868bb48821d209c4$var$buffer_1.alloc($868bb48821d209c4$var$MAXSIZE);
/**
 * Sets the size of the internal serialization buffer.
 *
 * @param size - The desired size for the internal serialization buffer
 * @public
 */ function $868bb48821d209c4$export$da02f1c3bf0006e3(size) {
    // Resize the internal serialization buffer if needed
    if ($868bb48821d209c4$var$buffer.length < size) $868bb48821d209c4$var$buffer = $868bb48821d209c4$var$buffer_1.alloc(size);
}
/**
 * Serialize a Javascript object.
 *
 * @param object - the Javascript object to serialize.
 * @returns Buffer object containing the serialized object.
 * @public
 */ function $868bb48821d209c4$export$dfdc1655ccc5b9cb(object, options) {
    if (options === void 0) options = {
    };
    // Unpack the options
    var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;
    var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
    var minInternalBufferSize = typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : $868bb48821d209c4$var$MAXSIZE;
    // Resize the internal serialization buffer if needed
    if ($868bb48821d209c4$var$buffer.length < minInternalBufferSize) $868bb48821d209c4$var$buffer = $868bb48821d209c4$var$buffer_1.alloc(minInternalBufferSize);
    // Attempt to serialize
    var serializationIndex = $868bb48821d209c4$var$serializeInto($868bb48821d209c4$var$buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, []);
    // Create the final buffer
    var finishedBuffer = $868bb48821d209c4$var$buffer_1.alloc(serializationIndex);
    // Copy into the finished buffer
    $868bb48821d209c4$var$buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);
    // Return the buffer
    return finishedBuffer;
}
/**
 * Serialize a Javascript object using a predefined Buffer and index into the buffer,
 * useful when pre-allocating the space for serialization.
 *
 * @param object - the Javascript object to serialize.
 * @param finalBuffer - the Buffer you pre-allocated to store the serialized BSON object.
 * @returns the index pointing to the last written byte in the buffer.
 * @public
 */ function $868bb48821d209c4$export$b6fb208a7f4c2b5b(object, finalBuffer, options) {
    if (options === void 0) options = {
    };
    // Unpack the options
    var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;
    var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
    var startIndex = typeof options.index === 'number' ? options.index : 0;
    // Attempt to serialize
    var serializationIndex = $868bb48821d209c4$var$serializeInto($868bb48821d209c4$var$buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined);
    $868bb48821d209c4$var$buffer.copy(finalBuffer, startIndex, 0, serializationIndex);
    // Return the index
    return startIndex + serializationIndex - 1;
}
/**
 * Deserialize data as BSON.
 *
 * @param buffer - the buffer containing the serialized set of BSON documents.
 * @returns returns the deserialized Javascript Object.
 * @public
 */ function $868bb48821d209c4$export$efcd34ab6248d3cd(buffer, options) {
    if (options === void 0) options = {
    };
    return $868bb48821d209c4$var$deserialize$1(buffer instanceof $868bb48821d209c4$var$buffer_1 ? buffer : $868bb48821d209c4$var$ensureBuffer(buffer), options);
}
/**
 * Calculate the bson size for a passed in Javascript object.
 *
 * @param object - the Javascript object to calculate the BSON byte size for
 * @returns size of BSON object in bytes
 * @public
 */ function $868bb48821d209c4$export$fd38f60ee2e3ec4b(object, options) {
    if (options === void 0) options = {
    };
    options = options || {
    };
    var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
    return $868bb48821d209c4$var$calculateObjectSize$1(object, serializeFunctions, ignoreUndefined);
}
/**
 * Deserialize stream data as BSON documents.
 *
 * @param data - the buffer containing the serialized set of BSON documents.
 * @param startIndex - the start index in the data Buffer where the deserialization is to start.
 * @param numberOfDocuments - number of documents to deserialize.
 * @param documents - an array where to store the deserialized documents.
 * @param docStartIndex - the index in the documents array from where to start inserting documents.
 * @param options - additional options used for the deserialization.
 * @returns next index in the buffer after deserialization **x** numbers of documents.
 * @public
 */ function $868bb48821d209c4$export$3f552121051cff1b(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {
    var internalOptions = Object.assign({
        allowObjectSmallerThanBufferSize: true,
        index: 0
    }, options);
    var bufferData = $868bb48821d209c4$var$ensureBuffer(data);
    var index = startIndex;
    // Loop over all documents
    for(var i = 0; i < numberOfDocuments; i++){
        // Find size of the document
        var size = bufferData[index] | bufferData[index + 1] << 8 | bufferData[index + 2] << 16 | bufferData[index + 3] << 24;
        // Update options with index
        internalOptions.index = index;
        // Parse the document at this point
        documents[docStartIndex + i] = $868bb48821d209c4$var$deserialize$1(bufferData, internalOptions);
        // Adjust index by the document size
        index = index + size;
    }
    // Return object containing end index of parsing and list of documents
    return index;
}
/**
 * BSON default export
 * @deprecated Please use named exports
 * @privateRemarks
 * We want to someday deprecate the default export,
 * so none of the new TS types are being exported on the default
 * @public
 */ var $868bb48821d209c4$var$BSON = {
    Binary: $868bb48821d209c4$export$dbada097a9bd1de9,
    Code: $868bb48821d209c4$export$52f0f02147b12c03,
    DBRef: $868bb48821d209c4$export$90e456a500235b9,
    Decimal128: $868bb48821d209c4$export$39efe8a3f1c2d4eb,
    Double: $868bb48821d209c4$export$340e583a64e26663,
    Int32: $868bb48821d209c4$export$493726e231866ac3,
    Long: $868bb48821d209c4$export$12ac1d26449d9c2e,
    UUID: $868bb48821d209c4$export$bc35efed93511c4b,
    Map: $868bb48821d209c4$export$a5c7b93649eaf8f8,
    MaxKey: $868bb48821d209c4$export$d380297cb28b8de0,
    MinKey: $868bb48821d209c4$export$aa9d11358976b3cc,
    ObjectId: $868bb48821d209c4$export$e68967d37d049767,
    ObjectID: $868bb48821d209c4$export$e68967d37d049767,
    BSONRegExp: $868bb48821d209c4$export$f7fea3e08dc99c1d,
    BSONSymbol: $868bb48821d209c4$export$8251e971c2f12361,
    Timestamp: $868bb48821d209c4$export$d9bcbd5e1ff81430,
    EJSON: $868bb48821d209c4$export$88f9200ef2b97bb5,
    setInternalBufferSize: $868bb48821d209c4$export$da02f1c3bf0006e3,
    serialize: $868bb48821d209c4$export$dfdc1655ccc5b9cb,
    serializeWithBufferAndIndex: $868bb48821d209c4$export$b6fb208a7f4c2b5b,
    deserialize: $868bb48821d209c4$export$efcd34ab6248d3cd,
    calculateObjectSize: $868bb48821d209c4$export$fd38f60ee2e3ec4b,
    deserializeStream: $868bb48821d209c4$export$3f552121051cff1b,
    BSONError: $868bb48821d209c4$export$dcd4c628d4081c37,
    BSONTypeError: $868bb48821d209c4$export$5f4690e5e32707d3
};
var $868bb48821d209c4$export$2e2bcd8739ae039 = $868bb48821d209c4$var$BSON;


var $777797f781e144aa$exports = {};

$parcel$export($777797f781e144aa$exports, "extract", () => $777797f781e144aa$export$f9380c9a627682d3, (v) => $777797f781e144aa$export$f9380c9a627682d3 = v);
$parcel$export($777797f781e144aa$exports, "parse", () => $777797f781e144aa$export$98e6a39c04603d36, (v) => $777797f781e144aa$export$98e6a39c04603d36 = v);
$parcel$export($777797f781e144aa$exports, "stringify", () => $777797f781e144aa$export$fac44ee5b035f737, (v) => $777797f781e144aa$export$fac44ee5b035f737 = v);
var $777797f781e144aa$export$f9380c9a627682d3;
var $777797f781e144aa$export$98e6a39c04603d36;
var $777797f781e144aa$export$fac44ee5b035f737;
'use strict';
var $27e5514b36efaeb5$exports = {};
'use strict';
$27e5514b36efaeb5$exports = function(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
};


var $d6ffec2e52d6b077$exports = {};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var $d6ffec2e52d6b077$var$getOwnPropertySymbols = Object.getOwnPropertySymbols;
var $d6ffec2e52d6b077$var$hasOwnProperty = Object.prototype.hasOwnProperty;
var $d6ffec2e52d6b077$var$propIsEnumerable = Object.prototype.propertyIsEnumerable;
function $d6ffec2e52d6b077$var$toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function $d6ffec2e52d6b077$var$shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
$d6ffec2e52d6b077$exports = $d6ffec2e52d6b077$var$shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = $d6ffec2e52d6b077$var$toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if ($d6ffec2e52d6b077$var$hasOwnProperty.call(from, key)) to[key] = from[key];
        if ($d6ffec2e52d6b077$var$getOwnPropertySymbols) {
            symbols = $d6ffec2e52d6b077$var$getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if ($d6ffec2e52d6b077$var$propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};


function $777797f781e144aa$var$encoderForArrayFormat(opts) {
    switch(opts.arrayFormat){
        case 'index':
            return function(key, value, index) {
                return value === null ? [
                    $777797f781e144aa$var$encode(key, opts),
                    '[',
                    index,
                    ']'
                ].join('') : [
                    $777797f781e144aa$var$encode(key, opts),
                    '[',
                    $777797f781e144aa$var$encode(index, opts),
                    ']=',
                    $777797f781e144aa$var$encode(value, opts)
                ].join('');
            };
        case 'bracket':
            return function(key, value) {
                return value === null ? $777797f781e144aa$var$encode(key, opts) : [
                    $777797f781e144aa$var$encode(key, opts),
                    '[]=',
                    $777797f781e144aa$var$encode(value, opts)
                ].join('');
            };
        default:
            return function(key, value) {
                return value === null ? $777797f781e144aa$var$encode(key, opts) : [
                    $777797f781e144aa$var$encode(key, opts),
                    '=',
                    $777797f781e144aa$var$encode(value, opts)
                ].join('');
            };
    }
}
function $777797f781e144aa$var$parserForArrayFormat(opts) {
    var result;
    switch(opts.arrayFormat){
        case 'index':
            return function(key, value, accumulator) {
                result = /\[(\d*)\]$/.exec(key);
                key = key.replace(/\[\d*\]$/, '');
                if (!result) {
                    accumulator[key] = value;
                    return;
                }
                if (accumulator[key] === undefined) accumulator[key] = {
                };
                accumulator[key][result[1]] = value;
            };
        case 'bracket':
            return function(key, value, accumulator) {
                result = /(\[\])$/.exec(key);
                key = key.replace(/\[\]$/, '');
                if (!result) {
                    accumulator[key] = value;
                    return;
                } else if (accumulator[key] === undefined) {
                    accumulator[key] = [
                        value
                    ];
                    return;
                }
                accumulator[key] = [].concat(accumulator[key], value);
            };
        default:
            return function(key, value, accumulator) {
                if (accumulator[key] === undefined) {
                    accumulator[key] = value;
                    return;
                }
                accumulator[key] = [].concat(accumulator[key], value);
            };
    }
}
function $777797f781e144aa$var$encode(value, opts) {
    if (opts.encode) return opts.strict ? $27e5514b36efaeb5$exports(value) : encodeURIComponent(value);
    return value;
}
function $777797f781e144aa$var$keysSorter(input) {
    if (Array.isArray(input)) return input.sort();
    else if (typeof input === 'object') return $777797f781e144aa$var$keysSorter(Object.keys(input)).sort(function(a, b) {
        return Number(a) - Number(b);
    }).map(function(key) {
        return input[key];
    });
    return input;
}
$777797f781e144aa$export$f9380c9a627682d3 = function(str) {
    return str.split('?')[1] || '';
};
$777797f781e144aa$export$98e6a39c04603d36 = function(str, opts) {
    opts = $d6ffec2e52d6b077$exports({
        arrayFormat: 'none'
    }, opts);
    var formatter = $777797f781e144aa$var$parserForArrayFormat(opts);
    // Create an object with no prototype
    // https://github.com/sindresorhus/query-string/issues/47
    var ret = Object.create(null);
    if (typeof str !== 'string') return ret;
    str = str.trim().replace(/^(\?|#|&)/, '');
    if (!str) return ret;
    str.split('&').forEach(function(param) {
        var parts = param.replace(/\+/g, ' ').split('=');
        // Firefox (pre 40) decodes `%3D` to `=`
        // https://github.com/sindresorhus/query-string/pull/37
        var key = parts.shift();
        var val = parts.length > 0 ? parts.join('=') : undefined;
        // missing `=` should be `null`:
        // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
        val = val === undefined ? null : decodeURIComponent(val);
        formatter(decodeURIComponent(key), val, ret);
    });
    return Object.keys(ret).sort().reduce(function(result, key) {
        var val = ret[key];
        if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) // Sort object keys, not values
        result[key] = $777797f781e144aa$var$keysSorter(val);
        else result[key] = val;
        return result;
    }, Object.create(null));
};
$777797f781e144aa$export$fac44ee5b035f737 = function(obj, opts) {
    var defaults = {
        encode: true,
        strict: true,
        arrayFormat: 'none'
    };
    opts = $d6ffec2e52d6b077$exports(defaults, opts);
    var formatter = $777797f781e144aa$var$encoderForArrayFormat(opts);
    return obj ? Object.keys(obj).sort().map(function(key) {
        var val = obj[key];
        if (val === undefined) return '';
        if (val === null) return $777797f781e144aa$var$encode(key, opts);
        if (Array.isArray(val)) {
            var result = [];
            val.slice().forEach(function(val2) {
                if (val2 === undefined) return;
                result.push(formatter(key, val2, result.length));
            });
            return result.join('&');
        }
        return $777797f781e144aa$var$encode(key, opts) + '=' + $777797f781e144aa$var$encode(val, opts);
    }).filter(function(x) {
        return x.length > 0;
    }).join('&') : '';
};



const $976d0242c5cf6d30$export$11cb33cb3c138832 = 1;
const $976d0242c5cf6d30$export$8815aa1d021a7d50 = 2;
const $976d0242c5cf6d30$export$815b03eba529a08e = 3;
const $976d0242c5cf6d30$export$b002d543d753c46c = 'public';
const $976d0242c5cf6d30$export$c82af8024a84ed47 = 'private';
const $976d0242c5cf6d30$export$78ef7a7f3635780c = 'client';
const $976d0242c5cf6d30$export$6376c1682056142e = 'app';



const $c2ce11430d706635$export$47fdd40111eda34c = ()=>typeof fetch === 'undefined' ? (parcelRequire("hcqDF")) : fetch
;
class $c2ce11430d706635$export$bcd553e5cdd70e04 {
    /**
   * @hideconstructor
   */ constructor(){
        throw new $5acc442337fa3693$export$92aa0aa8f60e5a4f('StitchClient can only be made from the StitchClientFactory.create function');
    }
    /**
   * Creates a new {@link StitchClient}.
   *
   * @param {String} clientAppID the app ID of the Stitch application, which can be found in
   * the "Clients" page of the Stitch admin console.
   * @param {Object} [options = {}] additional options for creating the {@link StitchClient}.
   */ static create(clientAppID1, options1 = {
    }) {
        return $c2ce11430d706635$export$dbabd6c62bf4518c($c2ce11430d706635$export$47898e7fe20553f1.prototype, clientAppID1, options1);
    }
}
function $c2ce11430d706635$export$dbabd6c62bf4518c(prototype, clientAppID, options = {
}) {
    let stitchClient = Object.create(prototype);
    let baseUrl = $eadd389675610441$export$15e777aff03fd23c;
    if (options.baseUrl) baseUrl = options.baseUrl;
    stitchClient.clientAppID = clientAppID;
    stitchClient.authUrl = clientAppID ? `${baseUrl}/api/client/v2.0/app/${clientAppID}/auth` : `${baseUrl}/api/admin/v3.0/auth`;
    stitchClient.rootURLsByAPIVersion = {
        [$976d0242c5cf6d30$export$11cb33cb3c138832]: {
            [$976d0242c5cf6d30$export$b002d543d753c46c]: `${baseUrl}/api/public/v1.0`,
            [$976d0242c5cf6d30$export$78ef7a7f3635780c]: `${baseUrl}/api/client/v1.0`,
            [$976d0242c5cf6d30$export$c82af8024a84ed47]: `${baseUrl}/api/private/v1.0`,
            [$976d0242c5cf6d30$export$6376c1682056142e]: clientAppID ? `${baseUrl}/api/client/v1.0/app/${clientAppID}` : `${baseUrl}/api/public/v1.0`
        },
        [$976d0242c5cf6d30$export$8815aa1d021a7d50]: {
            [$976d0242c5cf6d30$export$b002d543d753c46c]: `${baseUrl}/api/public/v2.0`,
            [$976d0242c5cf6d30$export$78ef7a7f3635780c]: `${baseUrl}/api/client/v2.0`,
            [$976d0242c5cf6d30$export$c82af8024a84ed47]: `${baseUrl}/api/private/v2.0`,
            [$976d0242c5cf6d30$export$6376c1682056142e]: clientAppID ? `${baseUrl}/api/client/v2.0/app/${clientAppID}` : `${baseUrl}/api/public/v2.0`
        },
        [$976d0242c5cf6d30$export$815b03eba529a08e]: {
            [$976d0242c5cf6d30$export$b002d543d753c46c]: `${baseUrl}/api/public/v3.0`,
            [$976d0242c5cf6d30$export$78ef7a7f3635780c]: `${baseUrl}/api/client/v3.0`,
            [$976d0242c5cf6d30$export$6376c1682056142e]: clientAppID ? `${baseUrl}/api/client/v3.0/app/${clientAppID}` : `${baseUrl}/api/admin/v3.0`
        }
    };
    const authOptions = {
        codec: $99eab7d63bb19b88$export$ef2912c5a4434709,
        storage: options.storage
    };
    if (options.storageType) authOptions.storageType = options.storageType;
    if (options.platform) authOptions.platform = options.platform;
    if (options.authCodec) authOptions.codec = options.authCodec;
    if (options.requestOrigin) authOptions.requestOrigin = options.requestOrigin;
    const authPromise = $bec6eb1921ac4121$export$a4b63a972049ab97.create(stitchClient, stitchClient.authUrl, authOptions);
    return authPromise.then((auth)=>{
        stitchClient.auth = auth;
        return Promise.all([
            stitchClient.auth.handleRedirect(),
            stitchClient.auth.handleCookie()
        ]);
    }).then(()=>stitchClient
    );
}
class $c2ce11430d706635$export$47898e7fe20553f1 {
    /**
   * @hideconstructor
   */ constructor(){
        let classname = this.constructor.name;
        throw new $5acc442337fa3693$export$92aa0aa8f60e5a4f(`${classname} can only be made from the ${classname}Factory.create function`);
    }
    get type() {
        return $eadd389675610441$export$347e6d9936c9829;
    }
    /**
   * Login to Stitch instance, optionally providing a username and password. In
   * the event that these are omitted, anonymous authentication is used.
   *
   * @param {String} [email] the email address used for login
   * @param {String} [password] the password for the provided email address
   * @param {Object} [options = {}] additional authentication options
   * @returns {Promise} which resolve to a String value: the authenticated user ID.
   */ login(email, password, options = {
    }) {
        if (email === undefined || password === undefined) return this.authenticate($2859ed2d1ef64fb6$export$a79c91b221bb4dea, options);
        return this.authenticate('userpass', Object.assign({
            username: email,
            password: password
        }, options));
    }
    /**
   * Send a request to the server indicating the provided email would like
   * to sign up for an account. This will trigger a confirmation email containing
   * a token which must be used with the `emailConfirm` method of the `userpass`
   * auth provider in order to complete registration. The user will not be able
   * to log in until that flow has been completed.
   *
   * @param {String} email the email used to sign up for the app
   * @param {String} password the password used to sign up for the app
   * @param {Object} [options = {}] additional authentication options
   * @returns {Promise}
   */ register(email1, password1, options2 = {
    }) {
        return this.auth.provider('userpass').register(email1, password1, options2);
    }
    /**
   * Links the currently logged in user with another identity.
   *
   * @param {String} providerType the provider of the other identity (e.g. 'userpass', 'facebook', 'google')
   * @param {Object} [options = {}] additional authentication options
   * @returns {Promise} which resolves to a String value: the original user ID
   */ linkWithProvider(providerType, options3 = {
    }) {
        if (!this.isAuthenticated()) throw new $5acc442337fa3693$export$92aa0aa8f60e5a4f('Must be authenticated to link an account');
        return this.auth.provider(providerType).authenticate(options3, true).then(()=>this.authedId()
        );
    }
    /**
   * Submits an authentication request to the specified provider providing any
   * included options (read: user data).  If auth data already exists and the
   * existing auth data has an access token, then these credentials are returned.
   *
   * @param {String} providerType the provider used for authentication (The possible
   *                 options are 'anon', 'userpass', 'custom', 'facebook', 'google',
   *                 and 'apiKey')
   * @param {Object} [options = {}] additional authentication options
   * @returns {Promise} which resolves to a String value: the authenticated user ID
   */ authenticate(providerType1, options4 = {
    }) {
        // reuse existing auth if present
        const authenticateFn = ()=>this.auth.provider(providerType1).authenticate(options4).then(()=>this.authedId()
            )
        ;
        if (this.isAuthenticated()) {
            if (providerType1 === $2859ed2d1ef64fb6$export$a79c91b221bb4dea && this.auth.getLoggedInProviderType() === $2859ed2d1ef64fb6$export$a79c91b221bb4dea) return Promise.resolve(this.auth.authedId); // is authenticated, skip log in
            return this.logout().then(()=>authenticateFn()
            ); // will not be authenticated, continue log in
        }
        // is not authenticated, continue log in
        return authenticateFn();
    }
    /**
   * Ends the session for the current user, and clears auth information from storage.
   *
   * @returns {Promise}
   */ logout() {
        return this._do('/auth/session', 'DELETE', {
            refreshOnFailure: false,
            useRefreshToken: true,
            rootURL: this.rootURLsByAPIVersion[$976d0242c5cf6d30$export$8815aa1d021a7d50][$976d0242c5cf6d30$export$78ef7a7f3635780c]
        }).then(()=>this.auth.clear()
        , ()=>this.auth.clear()
        );
    }
    /**
   * @returns {*} Returns any error from the Stitch authentication system.
   */ authError() {
        return this.auth.error();
    }
    /**
   * Returns profile information for the currently logged in user.
   *
   * @returns {Promise} which resolves to a a JSON object containing user profile information.
   */ userProfile() {
        return this._do('/auth/profile', 'GET', {
            rootURL: this.rootURLsByAPIVersion[$976d0242c5cf6d30$export$8815aa1d021a7d50][$976d0242c5cf6d30$export$78ef7a7f3635780c]
        }).then((response)=>response.json()
        );
    }
    /**
   * @returns {Boolean} whether or not the current client is authenticated.
   */ isAuthenticated() {
        return !!this.authedId();
    }
    /**
   *  @returns {String} a string of the currently authenticated user's ID.
   */ authedId() {
        return this.auth.authedId;
    }
    /**
   * Factory method for accessing Stitch services.
   *
   * @method
   * @param {String} type the service type (e.g. "mongodb", "aws-s3", "aws-ses", "twilio", "http", etc.)
   * @param {String} name the service name specified in the Stitch admin console.
   * @returns {Object} returns an instance of the specified service type.
   */ service(type, name) {
        if (this.constructor !== $c2ce11430d706635$export$47898e7fe20553f1) throw new $5acc442337fa3693$export$92aa0aa8f60e5a4f('`service` is a factory method, do not use `new`');
        if (!$93d1449ecf1cf6a9$export$2e2bcd8739ae039.hasOwnProperty(type)) throw new $5acc442337fa3693$export$92aa0aa8f60e5a4f('Invalid service type specified: ' + type);
        const ServiceType = $93d1449ecf1cf6a9$export$2e2bcd8739ae039[type];
        return new ServiceType(this, name);
    }
    /**
   * Executes a function.
   *
   * @param {String} name The name of the function.
   * @param {...*} args Arguments to pass to the function.
   */ executeFunction(name1, ...args) {
        return this._doFunctionCall({
            name: name1,
            arguments: args
        });
    }
    /**
   * Executes a service function.
   *
   * @param {String} service The name of the service.
   * @param {String} action The name of the service action.
   * @param {...*} args Arguments to pass to the service action.
   */ executeServiceFunction(service, action, ...args1) {
        return this._doFunctionCall({
            service: service,
            name: action,
            arguments: args1
        });
    }
    _doFunctionCall(request) {
        let responseDecoder = (d)=>$868bb48821d209c4$exports.EJSON.parse(d, {
                relaxed: true
            })
        ;
        let responseEncoder = (d)=>$868bb48821d209c4$exports.EJSON.stringify(d, {
                strict: true
            })
        ;
        return this._do('/functions/call', 'POST', {
            body: responseEncoder(request)
        }).then((response)=>response.text()
        ).then((body)=>responseDecoder(body)
        );
    }
    /**
   * Returns an access token for the user
   *
   * @private
   * @returns {Promise}
   */ doSessionPost() {
        return this._do('/auth/session', 'POST', {
            refreshOnFailure: false,
            useRefreshToken: true,
            rootURL: this.rootURLsByAPIVersion[$976d0242c5cf6d30$export$8815aa1d021a7d50][$976d0242c5cf6d30$export$78ef7a7f3635780c]
        }).then((response)=>response.json()
        );
    }
    /**
   * Returns the user API keys associated with the current user.
   *
   * @returns {Promise} which resolves to an array of API key objects
   */ getApiKeys() {
        return this._do('/auth/api_keys', 'GET', {
            rootURL: this.rootURLsByAPIVersion[$976d0242c5cf6d30$export$8815aa1d021a7d50][$976d0242c5cf6d30$export$78ef7a7f3635780c],
            useRefreshToken: true
        }).then((response)=>response.json()
        );
    }
    /**
   * Creates a user API key that can be used to authenticate as the current user.
   *
   * @param {String} userApiKeyName a unique name for the user API key
   * @returns {Promise} which resolves to an API key object containing the API key value
   */ createApiKey(userApiKeyName) {
        return this._do('/auth/api_keys', 'POST', {
            rootURL: this.rootURLsByAPIVersion[$976d0242c5cf6d30$export$8815aa1d021a7d50][$976d0242c5cf6d30$export$78ef7a7f3635780c],
            useRefreshToken: true,
            body: JSON.stringify({
                name: userApiKeyName
            })
        }).then((response)=>response.json()
        );
    }
    /**
   * Returns a user API key associated with the current user.
   *
   * @param {String} keyID the ID of the key to fetch
   * @returns {Promise} which resolves to an API key object, although the API key value will be omitted
   */ getApiKeyByID(keyID) {
        return this._do(`/auth/api_keys/${keyID}`, 'GET', {
            rootURL: this.rootURLsByAPIVersion[$976d0242c5cf6d30$export$8815aa1d021a7d50][$976d0242c5cf6d30$export$78ef7a7f3635780c],
            useRefreshToken: true
        }).then((response)=>response.json()
        );
    }
    /**
   * Deletes a user API key associated with the current user.
   *
   * @param {String} keyID the ID of the key to delete
   * @returns {Promise}
   */ deleteApiKeyByID(keyID1) {
        return this._do(`/auth/api_keys/${keyID1}`, 'DELETE', {
            rootURL: this.rootURLsByAPIVersion[$976d0242c5cf6d30$export$8815aa1d021a7d50][$976d0242c5cf6d30$export$78ef7a7f3635780c],
            useRefreshToken: true
        });
    }
    /**
   * Enables a user API key associated with the current user.
   *
   * @param {String} keyID the ID of the key to enable
   * @returns {Promise}
   */ enableApiKeyByID(keyID2) {
        return this._do(`/auth/api_keys/${keyID2}/enable`, 'PUT', {
            rootURL: this.rootURLsByAPIVersion[$976d0242c5cf6d30$export$8815aa1d021a7d50][$976d0242c5cf6d30$export$78ef7a7f3635780c],
            useRefreshToken: true
        });
    }
    /**
   * Disables a user API key associated with the current user.
   *
   * @param {String} keyID the ID of the key to disable
   * @returns {Promise}
   */ disableApiKeyByID(keyID3) {
        return this._do(`/auth/api_keys/${keyID3}/disable`, 'PUT', {
            rootURL: this.rootURLsByAPIVersion[$976d0242c5cf6d30$export$8815aa1d021a7d50][$976d0242c5cf6d30$export$78ef7a7f3635780c],
            useRefreshToken: true
        });
    }
    _fetch(url, fetchArgs, resource, method, options5) {
        const doFetch = $c2ce11430d706635$export$47fdd40111eda34c();
        return doFetch(url, fetchArgs).then((response)=>{
            // Okay: passthrough
            if (response.status >= 200 && response.status < 300) return Promise.resolve(response);
            if (response.headers.get('Content-Type') === $eadd389675610441$export$ad106c78fd3b6e6) return response.json().then((json)=>{
                // Only want to try refreshing token when there's an invalid session
                if ('error_code' in json && json.error_code === $5acc442337fa3693$export$604c120584438724) {
                    if (!options5.refreshOnFailure) return this.auth.clear().then(()=>{
                        const error = new $5acc442337fa3693$export$92aa0aa8f60e5a4f(json.error, json.error_code);
                        error.response = response;
                        error.json = json;
                        throw error;
                    });
                    return this.auth.refreshToken().then(()=>{
                        options5.refreshOnFailure = false;
                        return this._do(resource, method, options5);
                    });
                }
                const error2 = new $5acc442337fa3693$export$92aa0aa8f60e5a4f(json.error, json.error_code);
                error2.response = response;
                error2.json = json;
                return Promise.reject(error2);
            });
            const error1 = new Error(response.statusText);
            error1.response = response;
            return Promise.reject(error1);
        });
    }
    _fetchArgs(resource1, method1, options6) {
        const appURL = this.rootURLsByAPIVersion[options6.apiVersion][options6.apiType];
        let url = `${appURL}${resource1}`;
        if (options6.rootURL) url = `${options6.rootURL}${resource1}`;
        let fetchArgs = $eadd389675610441$export$f269dc256bdbf2f8(method1, options6.body, options6);
        if (!!options6.headers) Object.assign(fetchArgs.headers, options6.headers);
        if (options6.queryParams) url = `${url}?${(/*@__PURE__*/$parcel$interopDefault($777797f781e144aa$exports)).stringify(options6.queryParams)}`;
        if (options6.multipart) // fall-back on browser to generate Content-Type for us based on request body (FormData)
        delete fetchArgs.headers['Content-Type'];
        return {
            url: url,
            fetchArgs: fetchArgs
        };
    }
    _do(resource2, method2, options7) {
        options7 = Object.assign({
        }, {
            refreshOnFailure: true,
            useRefreshToken: false,
            apiVersion: $976d0242c5cf6d30$export$8815aa1d021a7d50,
            apiType: $976d0242c5cf6d30$export$6376c1682056142e,
            rootURL: undefined
        }, options7);
        let { url: url , fetchArgs: fetchArgs  } = this._fetchArgs(resource2, method2, options7);
        if (options7.noAuth) return this._fetch(url, fetchArgs, resource2, method2, options7);
        if (!this.isAuthenticated()) return Promise.reject(new $5acc442337fa3693$export$92aa0aa8f60e5a4f('Must auth first', $5acc442337fa3693$export$14a25834bf5fa686));
        if (this.auth.requestOrigin) fetchArgs.headers['X-BAAS-Request-Origin'] = this.auth.requestOrigin;
        const token = options7.useRefreshToken ? this.auth.getRefreshToken() : this.auth.getAccessToken();
        fetchArgs.headers.Authorization = `Bearer ${token}`;
        return this._fetch(url, fetchArgs, resource2, method2, options7);
    }
}


var $d6cb55a88bb6f607$exports = {};
/* eslint-env browser */ $d6cb55a88bb6f607$exports = typeof self == 'object' ? self.FormData : window.FormData;







class $170414591a09cba0$export$1cc308f04deaa7a1 {
    constructor(){
        throw new $5acc442337fa3693$export$92aa0aa8f60e5a4f('StitchAdminClient can only be made from the StitchAdminClientFactory.create function');
    }
    static create(baseUrl, options1 = {
        requestOrigin: undefined
    }) {
        return $c2ce11430d706635$export$dbabd6c62bf4518c($170414591a09cba0$export$e69c78fea39cbf6c.prototype, '', {
            requestOrigin: options1.requestOrigin,
            baseUrl: baseUrl,
            authCodec: $99eab7d63bb19b88$export$790cb3fe07c4778b
        });
    }
}
class $170414591a09cba0$export$e69c78fea39cbf6c extends $c2ce11430d706635$export$47898e7fe20553f1 {
    constructor(){
        super();
    }
    get type() {
        return $eadd389675610441$export$7ca39f6d0f92b2ab;
    }
    get _v1() {
        const privateV1do = (url, method, options)=>super._do(url, method, Object.assign({
                apiVersion: $976d0242c5cf6d30$export$11cb33cb3c138832,
                apiType: $976d0242c5cf6d30$export$c82af8024a84ed47
            }, options)).then((response)=>{
                const contentHeader = response.headers.get('content-type') || '';
                if (contentHeader.split(',').indexOf('application/json') >= 0) return response.json();
                return response;
            })
        ;
        return {
            [$976d0242c5cf6d30$export$c82af8024a84ed47]: {
                _get: (url, queryParams, headers, options)=>privateV1do(url, 'GET', Object.assign({
                        queryParams: queryParams,
                        headers: headers
                    }, options))
                ,
                _post: (url, body, options = {
                })=>privateV1do(url, 'POST', Object.assign({
                        body: body
                    }, options))
            }
        };
    }
    get _v3() {
        const v3do = (url, method, options)=>super._do(url, method, Object.assign({
            }, {
                apiVersion: $976d0242c5cf6d30$export$815b03eba529a08e
            }, options)).then((response)=>{
                const contentHeader = response.headers.get('content-type') || '';
                if (contentHeader.split(',').indexOf('application/json') >= 0) return response.json();
                return response;
            })
        ;
        return {
            _get: (url, queryParams, headers, options)=>v3do(url, 'GET', Object.assign({
                }, {
                    queryParams: queryParams,
                    headers: headers
                }, options))
            ,
            _put: (url, options)=>options ? v3do(url, 'PUT', options) : v3do(url, 'PUT')
            ,
            _patch: (url, options)=>options ? v3do(url, 'PATCH', options) : v3do(url, 'PATCH')
            ,
            _delete: (url, queryParams)=>queryParams ? v3do(url, 'DELETE', {
                    queryParams: queryParams
                }) : v3do(url, 'DELETE')
            ,
            _post: (url, body, queryParams)=>queryParams ? v3do(url, 'POST', {
                    body: JSON.stringify(body),
                    queryParams: queryParams
                }) : v3do(url, 'POST', {
                    body: JSON.stringify(body)
                })
            ,
            _postRaw: (url, options)=>v3do(url, 'POST', options)
        };
    }
    /**
   * Verifies a recaptcha token.
   *
   * @returns {Promise}
   */ verifyRecaptcha(token) {
        return this._v1.private._post('/spa/recaptcha/verify', new URLSearchParams(`response=${token}`), {
            credentials: 'include',
            multipart: true,
            noAuth: true
        });
    }
    /**
   * Ends the session for the current user.
   *
   * @returns {Promise}
   */ logout() {
        return super._do('/auth/session', 'DELETE', {
            refreshOnFailure: false,
            useRefreshToken: true,
            apiVersion: $976d0242c5cf6d30$export$815b03eba529a08e
        }).then(()=>this.auth.clear()
        );
    }
    /**
   * Returns profile information for the currently logged in user
   *
   * @returns {Promise}
   */ userProfile() {
        return this._v3._get('/auth/profile');
    }
    /**
   * Returns available providers for the currently logged in admin
   *
   * @returns {Promise}
   */ getAuthProviders() {
        return super._do('/auth/providers', 'GET', {
            noAuth: true,
            apiVersion: $976d0242c5cf6d30$export$815b03eba529a08e
        }).then((response)=>response.json()
        );
    }
    /**
   * Returns an access token for the user
   *
   * @returns {Promise}
   */ doSessionPost() {
        return super._do('/auth/session', 'POST', {
            refreshOnFailure: false,
            useRefreshToken: true,
            apiVersion: $976d0242c5cf6d30$export$815b03eba529a08e
        }).then((response)=>response.json()
        );
    }
    /* Examples of how to access admin API with this client:
   *
   * List all apps
   *    a.apps('580e6d055b199c221fcb821c').list()
   *
   * Fetch app under name 'planner'
   *    a.apps('580e6d055b199c221fcb821c').app('planner').get()
   *
   * List services under the app 'planner'
   *    a.apps('580e6d055b199c221fcb821c').app('planner').services().list()
   *
   * Delete a rule by ID
   *    a.apps('580e6d055b199c221fcb821c').app('planner').services().service('mdb1').rules().rule('580e6d055b199c221fcb821d').remove()
   *
   */ apps(groupId) {
        const api = this._v3;
        const groupUrl = `/groups/${groupId}/apps`;
        return {
            list: (filter)=>api._get(groupUrl, filter)
            ,
            create: (data, options)=>{
                let query = options && options.product ? `?product=${options.product}` : '';
                return api._post(groupUrl + query, data);
            },
            measurements: (filter)=>api._get(`/groups/${groupId}/measurements`, filter)
            ,
            app: (appId)=>{
                const appUrl = `${groupUrl}/${appId}`;
                return {
                    get: ()=>api._get(appUrl)
                    ,
                    remove: ()=>api._delete(appUrl)
                    ,
                    export: ()=>api._get(`${appUrl}/export`, {
                            version: '20200603'
                        }, {
                            Accept: 'application/zip'
                        })
                    ,
                    measurements: (filter)=>api._get(`${appUrl}/measurements`, filter)
                    ,
                    commands: ()=>({
                            run: (command, data)=>api._post(`${appUrl}/commands/${command}`, data)
                        })
                    ,
                    dependencies: ()=>({
                            list: ()=>api._get(`${appUrl}/dependencies`)
                            ,
                            upload: (filename, body)=>{
                                const form = new (/*@__PURE__*/$parcel$interopDefault($d6cb55a88bb6f607$exports))();
                                form.append('file', body, filename);
                                return api._postRaw(`${appUrl}/dependencies`, {
                                    body: form,
                                    multipart: true
                                });
                            }
                        })
                    ,
                    values: ()=>({
                            list: ()=>api._get(`${appUrl}/values`)
                            ,
                            create: (data)=>api._post(`${appUrl}/values`, data)
                            ,
                            value: (valueId)=>{
                                const valueUrl = `${appUrl}/values/${valueId}`;
                                return {
                                    get: ()=>api._get(valueUrl)
                                    ,
                                    remove: ()=>api._delete(valueUrl)
                                    ,
                                    update: (data)=>api._put(valueUrl, {
                                            body: JSON.stringify(data)
                                        })
                                };
                            }
                        })
                    ,
                    secrets: ()=>({
                            list: ()=>api._get(`${appUrl}/secrets`)
                            ,
                            create: (data)=>api._post(`${appUrl}/secrets`, data)
                            ,
                            secret: (secretId)=>{
                                const secretUrl = `${appUrl}/secrets/${secretId}`;
                                return {
                                    remove: ()=>api._delete(secretUrl)
                                    ,
                                    update: (data)=>api._put(secretUrl, {
                                            body: JSON.stringify(data)
                                        })
                                };
                            }
                        })
                    ,
                    hosting: ()=>({
                            config: ()=>({
                                    get: ()=>api._get(`${appUrl}/hosting/config`)
                                    ,
                                    patch: (config)=>api._patch(`${appUrl}/hosting/config`, {
                                            body: JSON.stringify(config)
                                        })
                                })
                            ,
                            cache: ()=>({
                                    invalidate: (path)=>api._put(`${appUrl}/hosting/cache`, {
                                            body: JSON.stringify({
                                                invalidate: true,
                                                path: path
                                            })
                                        })
                                })
                            ,
                            assets: ()=>({
                                    createDirectory: (folderName)=>api._put(`${appUrl}/hosting/assets/asset`, {
                                            body: JSON.stringify({
                                                path: `${folderName}/`
                                            })
                                        })
                                    ,
                                    list: (params)=>api._get(`${appUrl}/hosting/assets`, params)
                                    ,
                                    upload: (metadata, body)=>{
                                        const form = new (/*@__PURE__*/$parcel$interopDefault($d6cb55a88bb6f607$exports))();
                                        form.append('meta', metadata);
                                        form.append('file', body);
                                        return api._put(`${appUrl}/hosting/assets/asset`, {
                                            body: form,
                                            multipart: true
                                        });
                                    },
                                    post: (data)=>api._post(`${appUrl}/hosting/assets`, data)
                                    ,
                                    asset: ()=>({
                                            patch: (options)=>api._patch(`${appUrl}/hosting/assets/asset`, {
                                                    body: JSON.stringify({
                                                        attributes: options.attributes
                                                    }),
                                                    queryParams: {
                                                        path: options.path
                                                    }
                                                })
                                            ,
                                            get: (params)=>api._get(`${appUrl}/hosting/assets/asset`, params)
                                            ,
                                            delete: (params)=>api._delete(`${appUrl}/hosting/assets/asset`, params)
                                        })
                                })
                        })
                    ,
                    deploy: ()=>({
                            auth: ()=>({
                                    github: ()=>api._get(`${appUrl}/deploy/github/auth`, undefined, undefined, {
                                            credentials: 'include'
                                        })
                                })
                            ,
                            config: ()=>api._get(`${appUrl}/deploy/config`)
                            ,
                            deployments: ()=>({
                                    list: (filter)=>api._get(`${appUrl}/deployments`, filter)
                                    ,
                                    get: (commit)=>api._get(`${appUrl}/deployments/${commit}`)
                                })
                            ,
                            installation: ()=>api._get(`${appUrl}/deploy/installation`)
                            ,
                            repositories: ()=>({
                                    repository: (repoId)=>({
                                            github: ()=>({
                                                    branches: ()=>({
                                                            list: ()=>api._get(`${appUrl}/deploy/github/repositories/${repoId}/branches`)
                                                        })
                                                })
                                        })
                                })
                            ,
                            updateConfig: (config)=>api._patch(`${appUrl}/deploy/config`, {
                                    body: JSON.stringify(config)
                                })
                            ,
                            overwriteConfig: (config)=>api._put(`${appUrl}/deploy/config`, {
                                    body: JSON.stringify(config)
                                })
                        })
                    ,
                    drafts: ()=>({
                            get: (draftId)=>api._get(`${appUrl}/drafts/${draftId}`)
                            ,
                            list: ()=>api._get(`${appUrl}/drafts`)
                            ,
                            create: ()=>api._post(`${appUrl}/drafts`)
                            ,
                            delete: (draftId)=>api._delete(`${appUrl}/drafts/${draftId}`)
                            ,
                            deploy: (draftId, params)=>api._post(`${appUrl}/drafts/${draftId}/deployment`, null, params)
                            ,
                            diff: (draftId)=>api._get(`${appUrl}/drafts/${draftId}/diff`)
                        })
                    ,
                    services: ()=>({
                            list: ()=>api._get(`${appUrl}/services`)
                            ,
                            create: (data)=>api._post(`${appUrl}/services`, data)
                            ,
                            service: (serviceId)=>({
                                    get: ()=>api._get(`${appUrl}/services/${serviceId}`)
                                    ,
                                    remove: (params)=>api._delete(`${appUrl}/services/${serviceId}`, params)
                                    ,
                                    update: (data)=>api._patch(`${appUrl}/services/${serviceId}`, {
                                            body: JSON.stringify(data)
                                        })
                                    ,
                                    runCommand: (commandName, data)=>api._post(`${appUrl}/services/${serviceId}/commands/${commandName}`, data)
                                    ,
                                    config: ()=>({
                                            get: (params)=>api._get(`${appUrl}/services/${serviceId}/config`, params)
                                            ,
                                            update: (data)=>api._patch(`${appUrl}/services/${serviceId}/config`, {
                                                    body: JSON.stringify(data)
                                                })
                                        })
                                    ,
                                    rules: ()=>({
                                            list: ()=>api._get(`${appUrl}/services/${serviceId}/rules`)
                                            ,
                                            create: (data, params)=>api._post(`${appUrl}/services/${serviceId}/rules`, data, params)
                                            ,
                                            rule: (ruleId)=>{
                                                const ruleUrl = `${appUrl}/services/${serviceId}/rules/${ruleId}`;
                                                return {
                                                    get: ()=>api._get(ruleUrl)
                                                    ,
                                                    update: (data, params)=>api._put(ruleUrl, {
                                                            body: JSON.stringify(data),
                                                            queryParams: params
                                                        })
                                                    ,
                                                    remove: (params)=>api._delete(ruleUrl, params)
                                                };
                                            }
                                        })
                                    ,
                                    incomingWebhooks: ()=>({
                                            list: ()=>api._get(`${appUrl}/services/${serviceId}/incoming_webhooks`)
                                            ,
                                            create: (data)=>api._post(`${appUrl}/services/${serviceId}/incoming_webhooks`, data)
                                            ,
                                            incomingWebhook: (incomingWebhookId)=>{
                                                const webhookUrl = `${appUrl}/services/${serviceId}/incoming_webhooks/${incomingWebhookId}`;
                                                return {
                                                    get: ()=>api._get(webhookUrl)
                                                    ,
                                                    update: (data)=>api._put(webhookUrl, {
                                                            body: JSON.stringify(data)
                                                        })
                                                    ,
                                                    remove: ()=>api._delete(webhookUrl)
                                                };
                                            }
                                        })
                                })
                        })
                    ,
                    pushNotifications: ()=>({
                            list: (filter)=>api._get(`${appUrl}/push/notifications`, filter)
                            ,
                            create: (data)=>api._post(`${appUrl}/push/notifications`, data)
                            ,
                            pushNotification: (messageId)=>({
                                    get: ()=>api._get(`${appUrl}/push/notifications/${messageId}`)
                                    ,
                                    update: (data)=>api._put(`${appUrl}/push/notifications/${messageId}`, {
                                            body: JSON.stringify(data)
                                        })
                                    ,
                                    remove: ()=>api._delete(`${appUrl}/push/notifications/${messageId}`)
                                    ,
                                    send: ()=>api._post(`${appUrl}/push/notifications/${messageId}/send`)
                                })
                        })
                    ,
                    users: ()=>({
                            count: ()=>api._get(`${appUrl}/users_count`)
                            ,
                            list: (filter)=>api._get(`${appUrl}/users`, filter)
                            ,
                            create: (user)=>api._post(`${appUrl}/users`, user)
                            ,
                            user: (uid)=>({
                                    get: ()=>api._get(`${appUrl}/users/${uid}`)
                                    ,
                                    devices: ()=>({
                                            get: ()=>api._get(`${appUrl}/users/${uid}/devices`)
                                        })
                                    ,
                                    logout: ()=>api._put(`${appUrl}/users/${uid}/logout`)
                                    ,
                                    enable: ()=>api._put(`${appUrl}/users/${uid}/enable`)
                                    ,
                                    disable: ()=>api._put(`${appUrl}/users/${uid}/disable`)
                                    ,
                                    remove: ()=>api._delete(`${appUrl}/users/${uid}`)
                                })
                        })
                    ,
                    userRegistrations: ()=>({
                            sendConfirmationEmail: (email)=>api._post(`${appUrl}/user_registrations/by_email/${email}/send_confirm`)
                            ,
                            runUserConfirmation: (email)=>api._post(`${appUrl}/user_registrations/by_email/${email}/run_confirm`)
                            ,
                            confirmByEmail: (email)=>api._post(`${appUrl}/user_registrations/by_email/${email}/confirm`)
                            ,
                            listPending: (filter)=>api._get(`${appUrl}/user_registrations/pending_users`, filter)
                            ,
                            removePendingUserByEmail: (email)=>api._delete(`${appUrl}/user_registrations/by_email/${email}`)
                            ,
                            removePendingUserByID: (id)=>api._delete(`${appUrl}/user_registrations/by_id/${id}`)
                        })
                    ,
                    customUserData: ()=>({
                            get: ()=>api._get(`${appUrl}/custom_user_data`)
                            ,
                            update: (data)=>api._patch(`${appUrl}/custom_user_data`, {
                                    body: JSON.stringify(data)
                                })
                        })
                    ,
                    debug: ()=>({
                            executeFunction: (userId, name = '', ...args)=>{
                                return api._post(`${appUrl}/debug/execute_function`, {
                                    name: name,
                                    arguments: args
                                }, {
                                    user_id: userId
                                });
                            },
                            executeFunctionSource: ({ userId: userId , source: source = '' , evalSource: evalSource = '' , runAsSystem: runAsSystem  })=>{
                                return api._post(`${appUrl}/debug/execute_function_source`, {
                                    source: source,
                                    eval_source: evalSource
                                }, {
                                    user_id: userId,
                                    run_as_system: runAsSystem
                                });
                            }
                        })
                    ,
                    authProviders: ()=>({
                            list: ()=>api._get(`${appUrl}/auth_providers`)
                            ,
                            create: (data)=>api._post(`${appUrl}/auth_providers`, data)
                            ,
                            authProvider: (providerId)=>({
                                    get: ()=>api._get(`${appUrl}/auth_providers/${providerId}`)
                                    ,
                                    update: (data)=>api._patch(`${appUrl}/auth_providers/${providerId}`, {
                                            body: JSON.stringify(data)
                                        })
                                    ,
                                    enable: ()=>api._put(`${appUrl}/auth_providers/${providerId}/enable`)
                                    ,
                                    disable: ()=>api._put(`${appUrl}/auth_providers/${providerId}/disable`)
                                    ,
                                    remove: ()=>api._delete(`${appUrl}/auth_providers/${providerId}`)
                                })
                        })
                    ,
                    security: ()=>({
                            allowedRequestOrigins: ()=>({
                                    get: ()=>api._get(`${appUrl}/security/allowed_request_origins`)
                                    ,
                                    update: (data)=>api._post(`${appUrl}/security/allowed_request_origins`, data)
                                })
                        })
                    ,
                    logs: ()=>({
                            list: (filter)=>api._get(`${appUrl}/logs`, filter)
                        })
                    ,
                    apiKeys: ()=>({
                            list: ()=>api._get(`${appUrl}/api_keys`)
                            ,
                            create: (data)=>api._post(`${appUrl}/api_keys`, data)
                            ,
                            apiKey: (apiKeyId)=>({
                                    get: ()=>api._get(`${appUrl}/api_keys/${apiKeyId}`)
                                    ,
                                    remove: ()=>api._delete(`${appUrl}/api_keys/${apiKeyId}`)
                                    ,
                                    enable: ()=>api._put(`${appUrl}/api_keys/${apiKeyId}/enable`)
                                    ,
                                    disable: ()=>api._put(`${appUrl}/api_keys/${apiKeyId}/disable`)
                                })
                        })
                    ,
                    functions: ()=>({
                            list: ()=>api._get(`${appUrl}/functions`)
                            ,
                            create: (data)=>api._post(`${appUrl}/functions`, data)
                            ,
                            function: (functionId)=>({
                                    get: ()=>api._get(`${appUrl}/functions/${functionId}`)
                                    ,
                                    update: (data)=>api._put(`${appUrl}/functions/${functionId}`, {
                                            body: JSON.stringify(data)
                                        })
                                    ,
                                    remove: ()=>api._delete(`${appUrl}/functions/${functionId}`)
                                })
                        })
                    ,
                    eventSubscriptions: ()=>({
                            list: (filter)=>api._get(`${appUrl}/event_subscriptions`, filter)
                            ,
                            create: (data)=>api._post(`${appUrl}/event_subscriptions`, data)
                            ,
                            eventSubscription: (eventSubscriptionId)=>({
                                    get: ()=>api._get(`${appUrl}/event_subscriptions/${eventSubscriptionId}`)
                                    ,
                                    update: (data)=>api._put(`${appUrl}/event_subscriptions/${eventSubscriptionId}`, {
                                            body: JSON.stringify(data)
                                        })
                                    ,
                                    remove: ()=>api._delete(`${appUrl}/event_subscriptions/${eventSubscriptionId}`)
                                    ,
                                    resume: (data)=>api._put(`${appUrl}/event_subscriptions/${eventSubscriptionId}/resume`, {
                                            body: JSON.stringify(data)
                                        })
                                })
                        })
                    ,
                    validationSettings: ()=>{
                        const validationSettingsUrl = `${appUrl}/validation_settings`;
                        return {
                            graphql: ()=>{
                                const graphqlUrl = `${validationSettingsUrl}/graphql`;
                                return {
                                    get: ()=>api._get(graphqlUrl)
                                    ,
                                    update: (data)=>api._put(graphqlUrl, {
                                            body: JSON.stringify(data)
                                        })
                                };
                            }
                        };
                    },
                    graphql: ()=>{
                        const graphqlUrl = `${appUrl}/graphql`;
                        return {
                            config: ()=>({
                                    get: ()=>api._get(`${graphqlUrl}/config`)
                                    ,
                                    update: (data)=>api._put(`${graphqlUrl}/config`, {
                                            body: JSON.stringify(data)
                                        })
                                })
                            ,
                            post: (data)=>api._post(`${graphqlUrl}`, data)
                            ,
                            validate: ()=>api._get(`${graphqlUrl}/validate`)
                            ,
                            customResolvers: ()=>({
                                    list: ()=>api._get(`${graphqlUrl}/custom_resolvers`)
                                    ,
                                    create: (data)=>api._post(`${graphqlUrl}/custom_resolvers`, data)
                                    ,
                                    customResolver: (id)=>({
                                            get: ()=>api._get(`${graphqlUrl}/custom_resolvers/${id}`)
                                            ,
                                            update: (data)=>api._put(`${graphqlUrl}/custom_resolvers/${id}`, {
                                                    body: JSON.stringify(data)
                                                })
                                            ,
                                            remove: ()=>api._delete(`${graphqlUrl}/custom_resolvers/${id}`)
                                        })
                                })
                        };
                    },
                    sync: ()=>{
                        const syncUrl = `${appUrl}/sync`;
                        return {
                            config: ()=>{
                                const realmConfigUrl = `${syncUrl}/config`;
                                return {
                                    get: ()=>api._get(realmConfigUrl)
                                    ,
                                    update: (data)=>api._put(realmConfigUrl, {
                                            body: JSON.stringify(data)
                                        })
                                };
                            },
                            clientSchemas: ()=>{
                                const realmClientSchemasUrl = `${syncUrl}/client_schemas`;
                                return {
                                    get: (language, filter)=>api._get(`${realmClientSchemasUrl}/${language}`, filter)
                                };
                            },
                            data: (params = {
                            })=>api._get(`${syncUrl}/data`, params)
                            ,
                            patchSchemas: (data)=>api._patch(`${syncUrl}/schemas`, {
                                    body: JSON.stringify(data)
                                })
                            ,
                            progress: ()=>api._get(`${syncUrl}/progress`)
                        };
                    }
                };
            }
        };
    }
    /**
   * Manages an Atlas Cluster.
   *
   * @returns {Object}
   */ privateClusters(groupId1, appId) {
        const privateApi = this._v1[$976d0242c5cf6d30$export$c82af8024a84ed47];
        const baseUrl = `/groups/${groupId1}/apps/${appId}/atlas_clusters`;
        return {
            create: (regionName)=>privateApi._post(baseUrl, JSON.stringify({
                    region_name: regionName
                }), {
                    credentials: 'include'
                })
        };
    }
    /**
   * Manages Atlas temporary API keys.
   *
   * @returns {Object}
   */ privateTempAPIKeys() {
        const privateApi = this._v1[$976d0242c5cf6d30$export$c82af8024a84ed47];
        const baseUrl = '/auth/temp_api_keys';
        return {
            create: (desc)=>privateApi._post(baseUrl, JSON.stringify({
                    desc: desc
                }))
        };
    }
}





export {$c2ce11430d706635$export$bcd553e5cdd70e04 as StitchClientFactory, $170414591a09cba0$export$1cc308f04deaa7a1 as StitchAdminClientFactory, $868bb48821d209c4$export$2e2bcd8739ae039 as BSON};
//# sourceMappingURL=index.js.map
